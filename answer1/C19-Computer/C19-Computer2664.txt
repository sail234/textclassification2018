软件 学报 JOURNALOFSOFTWARE 年 　 第卷 　 第期 　 Vol 　 No 　 一种 基于 半自动 Agent 的 协同 设计 层次 操作 模型 李保建 　 曾广周 　 林宗楷 摘要 　 如何 反映 设计 过程 中 协同 的 若干 需求 是 开发 协同 设计 系统 所 面临 的 一个 重要 问题 文章 提出 了 一种 协同 设计 的 层次 操作 模型 ， 设计 了 agent 的 称作 jointendeavor 的 心态 元素 以及 一组 agent 之间 的 通信 原语 来 规范 模型 中多 agent 层 的 行为 这种 基于 jointendeavor 的 协同 模式 反映 和 满足 了 协同 设计 的 一些 需求 文章 还 给出 了 这种 层次 操作 模型 的 一种 实现 结构 ， 简单 介绍 了 作者 所 开发 的 一个 协同 对象 图 设计 系统 CODDScollaborativeobjectdiagramdesignsystem 关键词 　 计算机辅助 协同工作 ， 计算机辅助 协同 设计 ， 认知 型 agent ， intention ， jointendeavor 中图法 分类号 　 TPAHierarchicalOperationModelBasedonHalfautomatedAgentforCollaborativeDesignLIBaojianLINZongkaiCADLaboratoryInstituteofComputingTechnologyTheChineseAcademyofSciencesBeijingZENGGuangzhouDepartmentofComputerShandongUniversityofTechnologyJinanAbstract 　 HowtoembodytherequirementsofcollaborationindesigningprocessesisanimportantissueindevelopingcollaborativedesignsystemsInthispaperahierarchicaloperationmodelforcollaborativedesignispresentedAmentalcomponentcalledjointendeavorandasetofcommunicationprimitivesaredevisedforthehalfautomatedagentsinthemodeltomeetsomeoftherequirementsincollaborativedesignAnimplementationstructureforthehierarchicaloperationmodelisalsogivenAcollaborativeobjectdiagramdesignsystemCODDSisintroducedasanexampleofthiscollaborativedesignmodelKeywords 　 CSCWcomputersupportedcollaborativedesigncognitiveagentintentionjointendeavor 　 　 在 计算机辅助 协同 设计 （ computersupportedcollaborativedesign 简称 CSCD ） 的 各种 形式 中 ， 协作 是 特别 重要 的 在 大型 设计 项目 中 更是如此 ， 因为 大型项目 涉及 不同 的 领域 需要 不同 的 专门知识 和 技术 作为 CSCW 的 一种 特别 形式 ， CSCD 关注 设计 人员 如何 协同工作 并 致力于 发现 辅助 他们 工作 的 技术 ［ ］ 现存 的 产品 与 研究 大多数 集中 于 协同 设计 的 网络 多媒体技术 支持 ， 如 远程 指针 、 共享 白板 、 共享 应用 工具 等 ［ ］ 而 如何 利用 agent 技术 来 反映 协同 的 约束 与 需求 从而 更好 地 支持 、 帮助 与 约束 协同 设计 过程 中 的 人人 交互 的 研究 则 较 少见 诸 文献 MRPatra 等 人 ［ ］ 对 协同 设计 中 agent 的 联合 态度 （ jointattitudes ） 的 必要性 及其 建立 等 问题 进行 了 理论 上 的 初步 探讨 DJRam 等 人 ［ ］ 提出 了 一种 基于 约束 元 对象 （ constraintmetaobject ） 的 扩充 对象 模型 ， 用 约束 元 对象 来 体现 不同 设计 人员 的 设计 对象 之间 的 参数 约束 ， 从而 可以 部分 地 反映 协同 设计 的 需求 ， 为 协同 提供 一定 的 支持 　 　 本文 提出 了 一种 协同 设计 的 层次 操作 模型 这种 层次 操作 模型 通过 在 设计 人员 和 领域 级 设计 系统 之间 设置 半自动 agent 层来 体现 协同 设计 的 约束 与 需求 我们 将 通过 分析 协同 设计 过程 中 的 一些 基本 需求 ， 提出 规范化 agent 行为 从而 模型 化 这些 需求 的 一种 agent 联合 心态 以及 一组 相应 的 agent 通信 原语 ， 并 给出 相应 的 agent 实现 结构 作为 这种 层次 操作 协同 设计 模型 的 一个 实例 ， 本文 还 将 介绍 我们 开发 的 一个 协同 对象 图 设计 系统 　 协同 设计 的 基本 需求 　 　 开发 一个 有效 的 CSCD 系统 必须 考虑 协同 设计 的 约束 与 需求 ［ ， ］ ， 它们 可以 包括 ： 　 　 任务 分解 　 根据 协同 设计 参与者 的 多寡 ， 可以 将 设计 任务 分解成 不同 粒度 的 子 任务 这种 分解 的 目的 在于 将 每个 子 任务分配 给 一个 相应 的 领域专家 然而 ， 也 有 一些 子 任务 需要 不同 的 技术 ， 这 就 需要 分配 多个 设计者 任务 分解 未必 能 一次性 地 完成 ， 设计者 们 可能 发现 ， 将 一个 子 任务 分解成 更 小 的 子 任务 会 更 方便 　 　 角色 分配 　 设计 成员 在 设计 过程 中 扮演 不同 的 角色 ， 这些 角色 可以 是 面向 任务 的 或者 是 面向 功能 的 赋予 不同 子 任务 的 设计者 或 设计 小组 自然 具有 不同 的 面向 任务 的 角色 ， 而 赋予 相同 子 任务 的 多个 设计者 可能 具有 诸如 组织者 、 仲裁者 、 评注 者 等 不同 的 功能 角色 ， 当然 也 可能 具有 完全 对 等 的 关系 设计 人员 或 小组 的 角色 不是 一成不变 的 ， 随着 设计 过程 的 进展 ， 同一 设计者 完全 可能 扮演 不同 的 角色 一个 协同 设计 系统 应该 提供 包括 相关 设计 对象 存取 授权 的 角色 建模 　 　 设计 活动 监控 　 一旦 设计 任务 被 分解成 不同 的 子 任务 并 被 赋予 不同 的 设计者 ， 他们 的 设计 过程 必须 受到 监控 ， 直到 结束 如果 设计者 在 设计 过程 中 具有 不同 的 角色 ， 他们 的 行为 必须 符合 他们 的 角色 ， 违反 角色 的 行为 必须 得到 监测 并 予以 取消 ， 以 避免 有害 的 影响 　 　 冲突消解 　 设计 过程 中 可能 会 产生 冲突 许多 设计 问题 或 任务 具有 不良 结构 （ illstructured ） Simon 认为 不 存在 结构 良好 （ wellstructured ） 的 问题 ［ ］ 工作 于 同一 任务 或子 任务 的 设计 人员 可能 对于 如何 进行 任务 分解 等 问题 具有 不同 的 意见 ， 即便 是 就 某 一 特殊 对象 的 设计 ， 他们 也 会 有 不同 的 方案 系统 应该 提供 帮助 他们 消解 冲突 的 协商 机制 　 　 子 任务 装配 　 一旦 子 任务 完成 ， 它们 应该 在 保持 一致性 的 基础 上 予以 组装 在 组装 子 任务 的 过程 中 ， 可能 会 产生 问题 一旦 如此 ， 一个 或 几个 子 任务 的 结果 必须 被 修改 ， 或者 必须 重新 设计 它们 ， 甚至 也 必须 重新 分解 它们 的 父 任务 　 　 讨论 了 协同 设计 的 这些 约束 或 需求 ， 下面 的 问题 就是 如何 将 它们 集成 到 一个 设计 系统 中 　 协同 设计 的 层次 操作 模型 　 　 协同 设计 的 层次 操作 模型 分成 层 上层 是 多个 设计 人员 ， 下层 是 共享 设计 对象 ， 中间层 则 是 由 多个 半自动 agent 组成 的 多 agent 系统 个 层次 由 它们 之间 的 操作 关系 连接起来 每个 设计者 可以 直接 操纵 他 的 agent ， 但是 只能 通过 中间 agent 层 间接 地 操纵 共享 设计 对象 　 Agent 层 　 　 Agent 的 理性 行为 是 由 它们 的 认知 元素 （ cognitivecomponent ） 或 心态 元素 （ mentalcomponent ） ： beliefsdesires 和 goalsintentions 和 commitments 等 决定 的 至于 心态 元素 的 选取 ， Shoham 认为 既 没有 一个 唯一 “ 正确 ” 的 选择 ， 也 没有 一个 关于 如何 选择 的 “ 正确 ” 理论 ， 因为 不同 的 应用 可能 需要 不同 的 心态 性质 ［ ］ Cohen 和 Levesque 关于 intention 和 jointintention 的 理论 ［ ］ 以及 Jennings 建立 在 他们 的 工作 基础 上 的 jointresponsibility 模型 ［ ］ 反映 了 合作 的 一些 性质 ， 但是 他们 的 理论 必须 予以 调整 和 求 精 才能 适应 本文 设计 的 应用 背景 因此 ， 我们 提出 了 jointendeavor 的 概念 ， 并 设计 了 一组 用于 agent 交互 的 通信 原语 来 规范 和 协调 agent 的 行为 ， 使得 协同 的 某些 约束 和 需求 得以 满足 　 Jointendeavor 　 　 Jointendeavor 可以 用 模态 、 时态 逻辑 予以 形式化 地 定义 但是 ， 我们 研究 的 目的 是 用 其 指导 建立 协同 设计 系统 ， 所以 ， 我们 仅仅 给出 其非 形式化 定义 Jointendeavor 是 agent 的 一种 复合 心态 元素 ， 其 定义 和 理解 依赖于 其他 更 简单 的 心态 元素 ， 如 beliefmutualbeliefachievementgoaljointachievementgoalpersistentgoaljointpersistentgoalintention 以及 jointintention 等 ［ ， ］ 　 　 在 上述 概念 的 基础 上 ， 我们 可以 定义 jointendeavor 的 概念 假设 有 一组 agentAGaaan 称 这组 agent 具有 jointendeavorp ， 记为 JENDEAVORAGp ， 当且 仅 当 ： 　 　 它们 以 p 作为 一个 jointachievementgoal 　 　 作为 实现 这个 目标 的 一个 总 策略 ， 它们 通过 协作性 协商 将 此 任务 或 目标 p 分解成 子 任务 或 子目标 p ， ppm ， 其中 ≤ m ≤ n 并 将子 任务 piim 赋予 一组 agentAGiaiaiaiMi ， 其中 MMMmn 　 　 如果 m ， 即 没有 分解 ， 那么 AG 中 的 agent 为了 实现 使 p 成 真的 任务 而 协同工作 ， 直到 ： 　 　 它们 共同 相信 p 已经 为 真 并且 ， 如果 p 不是 根 任务 ， 它们 必须 将 此 结果 通知 工作 于 p 的 兄弟 任务 的 所有 agent 小组 ； 如果 p 是 根 任务 ， 则 它们 的 jointendeavor 成功 　 　 或者 它们 共同 相信 不 可能 使 p 为 真 如果 p 不是 根 任务 ， 它们 必须 将 此 结果 通知 工作 于 p 的 兄弟 任务 的 所有 agent 小组 ； 如果 p 是 根 任务 ， 则 它们 的 jointendeavor 失败 　 　 或者 它们 被 通知 其 兄弟 任务 （ 如果 存在 ） 失败 　 　 如果 m 分解 是非 平凡 的 ， 那么 对于 i 从 到 mJENDEAVORAGipi ， 并且 AGi 具有 对子 任务 pi 所 直接 覆盖 的 对象 进行 操作 的 排 他 权利 每个 jointendeavor 必须 一直 进行 到 获得成功 或 失败 的 结果 ， 或者 直到 某个 其他 的 jointendeavor 声明 失败 ， 然后 ， AGi 在子 任务 pi 上 的 工作 结束 或 暂停 　 　 如果 任何 jointendeavor 已经 失败 ， 工作 于 任务 p 的 agent 小组 AG 可能 决定 对 任务 p 进行 重新 分解 或者 它们 可能 认为 p 不 可能 为 真 在 第种 情况 下 （ 它们 认为 p 不 可能 为 真 ） ， 如果 p 不是 根 任务 ， 它们 必须 将 此 结果 通知 工作 于 p 的 兄弟 任务 的 所有 agent 小组 ； 如果 p 是 根 任务 ， 则 它们 的 jointendeavor 失败 　 　 如果 所有 的 jointendeavor 都 是 成功 的 ， 并且 AG 建立 了 对于 这个 成功 的 共同 信念 ， 那么 它们 就 进入 子 任务 装配 阶段 如果 装配 失败 ， AG 可能 决定 对 任务 p 进行 重新 分解 ， 或者 它们 可能 认为 p 不 可能 为 真 ， 并 将 此 结果 通知 工作 于 p 的 兄弟 任务 的 所有 agent 小组 （ 如果 存在 的话 ） ； 如果 装配 成功 ， 那么 目标 p 已经 实现 ， AG 应 将 此 结果 通知 工作 于 p 的 兄弟 任务 的 所有 agent 小组 （ 如果 存在 的话 ） 如果 p 是 根 任务 ， 那么 就 得到 了 这个 jointendeavor 的 最终 结果 　 　 Jointpersistentgoal 规定 一组 agent 应该 履行 它们 实现 某个 目标 的 承诺 ， 直到 它们 认为 目标 已经 实现 或 不 可能 实现 ， 然而 Jointpersistentgoal 没有 规定 如何 实现目标 （ 譬如说 ， 是 仅仅 等待 别人 去 实现 还是 自己 做 某些 事情 来 实现 ？ ） Cohen 和 Levesque 的 jointintention 要求 这组 agent 应该 自己 做 某些 事情 来 实现 它们 的 目标 而 jointendeavor （ 当然 是 一种 jointpersistentgoal ） ， 不但 规定 这些 agent 必须 自己 做 某些 事情 来 实现目标 ， 而且 还 规定 了 实现目标 的 一种 层次 规划 和 重新 规划 方法 Agent 交互 通信 原语 　 　 Agent 之间 借助 通信 原语 实现 交互作用 考虑 到 本文 的 应用 背景 ， 我们 设计 的 通信 原语 包括 ： inform 与 agreedeny ， permit 与 forbid ， request 与 consentrefuseproposal 与 acceptdecline 　 　 设计 通信 原语 的 指导思想 是 言语 行为 理论 正如 心态 元素 的 选择 不是 唯一 的 ， 我们 认为 通信 原语 的 选择 也 不是 唯一 的 考虑 到 本文 的 应用 背景 ， 我们 提出 了 如上所述 的 agent 通信 原语 ， 这些 通信 原语 可以 由 它们 对 发生 交互 的 agent 的 语用 效应 来 定义 　 　 Informagreedeny 　 　 我们 用 INFORMxyp 表示 agentx 通知 y 命题 p 如果 agentx 相信 （ believe ） p ， 它 可以 将 其 通知 另 一个 agenty （ 这里 要求 agent 必须 讲 真话 ） ， 并且 这 将 导致 被 通知 的 agenty 相信 “ agentx 相信 p ” 如果 这 也 导致 了 agenty 相信 p ， 它 必须 发送 消息 AGREEyxp 给 x ， 这 将 导致 x 相信 “ y 相信 p ” ； 如果 agenty 并 不 相信 p ， 它 必须 发送 消息 DENYyxp 给 x ， 这 将 导致 x 相信 “ y 不 相信 p ” 　 　 这组 通信 原语 可以 帮助 一组 agent 建立 共同 信念 mutualbelief 　 　 Requestconsentrefuse 　 　 Request （ 请求 ） 反映 了 agent 的 desire 一个 agent 可以 请求 其他 agent 做 某些 action 这里 ， action 是 指 领域 级 操作 ， 它 包括 我们 所 提出 的 层次 操作 模型 中 共享 对象 层 操作 集里 的 所有 操作 我们 用 REQxyactexpr 表示 agentx 请求 agenty 做 actexpr （ 行动 表达式 ） 中 规定 的 action 行动 表达式 可以 是 任意 的 action 或 action 序列 就 领域 级 操作 来说 ， action 不仅 包括 操作 ， 也 包括 操作 的 对象 　 　 当 agenty 收到 消息 REQxyactexpr ， 它 必须 以 消息 CONSENTyxactexpr 或 REFUSEyxactexpr 予以 响应 前者 导致 y 做 actexpr 规定 的 action 的 intention 我们 在 Cohen 与 Leveseque 的 INTEND ［ ］ 的 意义 上 使用 这个 词 以及 agentx 相信 y 的 这个 intention ， 后者 导致 y 的 拒绝 以及 x 相信 y 的 拒绝 　 　 Permitforbid 　 　 在 我们 的 层次 操作 模型 中 ， 如果 一个 agent 或 一组 agent 被 赋予 一个 任务 ， 那么 它们 具有 对此 任务 所 直接 覆盖 的 对象 进行 操作 的 排 他 权利 因此 从 一 开始 所有 其他 agent 小组 隐含地 被 禁止 对 这些 对象 做 任何 操作 然而 ， 如果 这个 agent 或 agent 小组 相信 其他 agent 或 agent 小组 的 经验 和 技术 能 对 它们 的 任务 有所 帮助 ， 前者 可以 允许 （ permit ） 后者 对 它们 的 对象 进行 某些 操作 　 　 我们 用 PERMITxyactexpr 表示 agentx 允许 agenty 进行 actexpr 中 规定 的 操作 然而 ， 如果 actexpr 中 规定 操作 的 对象 不 在 x 的 任务 范围 之内 ， 这种 允许 无效 ， 否则 ， 这个 消息 将 导致 y 对 这个 permission 的 信念 　 　 我们 用 FORBIDxyactexpr 表示 agentx 禁止 agenty 进行 actexpr 中 规定 操作 然而 ， 如果 actexpr 中 规定 操作 的 对象 不 在 x 的 任务 范围 之内 ， 这种 禁止 无效 ， 否则 ， 这个 消息 将 导致 y 对 这个 forbid 的 信念 　 　 Proposalacceptdecline 　 　 当 一组 agent 进行 任务 分解 、 子 任务 装配 或 工作 于 一个 不能 继续 分解 的 子 任务 时 ， 他们 可能 具有 不同 的 意见 在 具体操作 之前 达成 一个 大家 共同 接受 的 方案 是 一个 较 好 的 办法 　 　 一个 agent 可以 对 它 所属 的 小组 建议 某个 方案 我们 用 PROPOSExp 表示 agentx 对 它 所属 的 小组 建议 方案 p 这个 消息 将 被 发送到 本组 的 所有 成员 如果 一个 成员 y 接收 到 这个 提议 ， 它 必须 答以 消息 ACCEPTyxp ， 否则 它 必须 答以 消息 DECLINEyxp 如果 x 从 所有 其他 成员 收到 了 accept 消息 ， 它 必须 通知 所有 成员 对 这个 方案 的 联合 承诺 已经 形成 　 对 协同 设计 某些 需求 的 支持 　 　 中间层 的 多个 agent 通过 形成 一种 协作性 的 联合 心态 ， 并 借助于 它们 之间 的 通信 原语 ， 从而 使得 它们 的 联合 行为 得以 规范化 并 具有 合作性 中间层 的 多个 agent 与 顶层 的 多个 设计 人员 是 一一对应 的 由于 设计 人员 对 底层 领域 级 系统 的 操作 以及 他们 之间 的 交互 行为 必须 通过 中间层 的 agent 来 进行 ， 并 接受 agent 的 检查和 帮助 ， 从而 使得 设计 人员 的 行为 同样 必须 具有 agent 的 联合 心态 及其 通信 原语 所 规定 的 性质 　 　 设计 人员 基于 jointendeavor 的 行为 直接 支持 协同 设计 中 任务 分解 和子 任务 装配 的 需求 ， 而且 这种 联合 心态 自然 要求 依据 设计 人员 面向 任务 的 角色 对 他们 的 设计 活动 进行 监控 ， 即 他们 不能 进行 违反 他们 角色 的 操作 这种 联合 心态 还 要求 对 完成 任务 或子 任务 的 承诺 的 合理性 进行 监控 例如 ， 如果 他们 获知 他们 的 一个 兄弟 任务 已经 失败 ， 则 至少 需要 暂停 他们 的 工作 ， 直至 得到 他们 父 任务 重新 分解 的 结果 为止 ， 然后 ， 依据 重新 分解 的 结果 判断 他们 的 子 任务 是否 已经 改变 ， 并 决定 他们 已经 做 的 工作 是否 需要 修改 甚至 放弃 　 　 当 一组 设计 人员 进行 任务 分解 、 子 任务 装配 或者 对 某 一 不能 继续 分解 的 任务 进行 简单 设计 时 ， 他们 可能 因 不同 的 方案 而 产生 冲突 据此 ， 有 不同 的 冲突消解 方法 合作性 协商 就是 一种 消除 协同 设计 中 冲突 的 适当 方法 ， 因为 设计 小组 中 不同 的 设计 人员 具有 不同 的 专门 经验 和 技术 ， 强迫 他们 做 某些 事情 是 不 合适 的 　 　 中间层 的 agent 仅仅 体现 了 协同 的 某些 约束 和 需求 ， 而 不能 代替 设计 人员 进行 具体 的 设计 决策 因此 ， 不能 依赖 agent 之间 的 自动 协商 过程 来 消除 设计 人员 之间 的 冲突 但 设计 人员 可以 借助于 agent 之间 的 通信 原语 对 proposalacceptdecline 来 对 他们 之间 的 协商 过程 进行 规范化 　 　 具体来说 ， 当 一个 设计者 收到 来自 另 一个 设计者 （ 通过 他们 的 agent ） 发来 的 一个 方案 的 proposal 时 ， 这个 设计者 必须 决定 是 accept 还是 decline ， 他 只有 这 两种 选择 ， 并且 必须 作出 选择 这种 通信 过程 一直 进行 到 一个 共同 的 方案 被 接受 为止 因此 可以 说 ， 我们 提出 的 设计 人员 之间 的 协商 过程 是 一种 基于 proposalacceptdecline 的 通信协议 的 协商 方法 本质 上 说 ， 这种 协商 过程 是 一种 社会 行为 过程 ， 方案 的 达成 有赖于 社会 规则 的 约束 　 共享 对象 层 和 设计 人员 层 　 　 在 我们 的 模型 中 ， 任何 领域 的 计算机辅助 设计 系统 均 被 抽象 为 对象 及其 可以 作用 于 这些 对象 的 操作 集合 换句话说 ， 被 设计 的 产品 被 看成 对象 ， 一般来说 它 是 由 许多 更 小 的 组件 对象 构成 的 ， 并且 有 不同 的 操作 ， 诸如 创建 、 修改 及 删除 等等 可以 施加 于 这些 对象 因此 ， 共享 设计 对象 层 又 称为 领域 级 系统 （ domainlevelsystem ） 一般来说 ， 设计 活动 中 创建 的 所有 对象 均 可 被 所有 的 设计 人员 浏览 ， 但是 工作 于 一个 子 任务 的 设计者 通常 情况 下 是 不 允许 对 其他 子 任务 的 对象 施加 操作 的 ， 除非 他 得到 允许 或 收到 来自 其他 子 任务 设计 人员 的 请求 　 　 设计 人员 层 由 工作 于 一个 总 的 设计 任务 的 所有 设计 人员 组成 他们 有时 同步 工作 ， 例如 ， 当 他们 对 某 一 任务 或子 任务 进行 分解 时 他们 有时 也 异步 地 工作 ， 例如 ， 工作 于 不同 的 子 任务 的 设计 人员 一般 情况 下 没有 必要 同时 工作 尽管 中间 agent 层 体现 了 协同 的 某些 需求 ， 并且 对 设计 人员 形成 某种 约束 （ 即 中间层 agent 可以 提醒 、 请求 和 禁止 设计 人员 做 某些 事情 ） ， 但 这 并 不 意味着 设计 人员 不 需要 社会 规则 的 约束 中间层 agent 可以 禁止 一个 设计 人员 进行 某种 操作 ， 但 不能 强制 他 进行 某种 操作 ， 虽然 它 可以 提醒 或 请求 设计 人员 去 做 这 意味着 设计 人员 的 合作 态度 对于 设计 活动 的 成功 进行 是 非常 重要 的 　 系统 实现 研究 　 　 我们 给 层次 操作 模型 中 的 半自动 agent 设计 了 如图所示 的 体系结构 在 图 中 ， 为了 方便 起 见 ， 共享 对象 层 （ 领域 级 系统 ） 也 和 agent 画 在 一起 ， 然而 它 并 不是 agent 的 一部分 图 　 半自动 agent 的 体系结构 　 　 考虑 到 本文 涉及 的 应用 ， 半自动 agent 必须 具有 用户界面 Agent 的 用户界面 被 分成 两 部分 ： 领域 级 用户界面 和 元级 用户界面 领域 级 用户界面 支持 设计 人员 和 共享 对象 层 的 交互 ， 而元级 用户界面 支持 设计 人员 通过 agent 层 的 合作 　 　 监控 模块 的 职能 是 根据 其 规则 来 控制 设计 人员 通过 领域 级 用户界面 对 共享 对象 的 操作 它 根据 设计 人员 在 jointendeavor 中 面向 任务 的 角色 、 当前 设计阶段 以及 交互 的 当前 状态 判断 设计 人员 的 可能 操作 是否 适当 正确 的 操作 被 传递 到 领域 级 系统 ， 违反 规则 的 操作 简单 地被 领域 级 用户界面 禁止 　 　 协作 与 通信 模块 与 元级 用户界面 有 直接 联系 ， 它 支持 通过 元级 用户界面 的 人人 交互 协作 与 通信 模块 的 功能 比 监控 模块 的 功能 复杂 得 多 下面 是 协作 与 通信 模块 的 个 主要 功能 　 　 （ ） 管理 jointendeavor 换句话说 ， 本 功能 负责 jointendeavor 的 形成 、 修正 以及 终止 在 前面 关于 jointendeavor 的 非 形式化 的 逻辑 描述 中 ， 为了 突出重点 ， 我们 将 agent 的 个数 限定 为 常数 n 个 （ 即 ， 在 设计 过程 中 n 是 不变 的 ） 在 具体 实现 过程 中 ， 考虑 到 实用性 ， 我们 允许 新 的 agent 或者说 设计 人员 加入 到 某个 子 任务 小组 ， 或者 某个 子 任务 小组 的 部分 设计 人员 或者说 agent 退出 这 对 jointendeavor 没有 实质性 影响 　 　 （ ） 实现 第节 所述 agent 之间 的 通信 原语 的 通信协议 因为 这些 通信 原语 是 由 设计 人员 通过 agent 的 元级 用户界面 直接 使用 的 ， 这种 协议 可以 提醒 、 请求 甚至 迫使 设计者 通过 元级 用户界面 做 必要 的 合作 例如 ， 当 一个 设计者 收到 进行 某种 操作 的 一个 请求 时 ， 他 必须 予以 回答 如果 不 回答 ， 协议 将 禁止 他 进行 任何 其他 操作 因此 ， 这种 协议 可以 规范化 设计 人员 的 交互 行为 　 　 （ ） 根据 jointendeavor 的 约定 跟踪 协同 活动 在 设计 的 不同 阶段 ， 协同 活动 必须 与 jointendeavor 的 规定 一致 协作 模块 同样 可以 提醒 甚至 强迫 设计 人员 遵循 jointendeavor 约定 例如 ， 当 一个 非根 节点 子 任务 的 设计 人员 结束 了 设计 工作 后 ， 根据 jointendeavor ， 必须 将 他们 的 工作 结论 通知 其 兄弟 任务 的 设计 人员 各个 agent 的 协作 模块 通过 将 工作 结论 写入 任务 树 数据结构 并 周期性地 读取 任务 树 的 变化 来 实现 这 一点 若 一个 agent 的 协作 模块 通过 读取 任务 树 检测 到 一个 兄弟 任务 已 失败 ， 则 它 将 提醒 与其 相应 的 设计者 暂停 工作 并 返回 到 其父 任务 　 　 Agent 也 维持 着 当前任务 和 所有 agent 的 内部 表示 这种 表示 也 是 非常 重要 的 ， 因为 一个 agent 必须 知道 当前任务 的 状态 和 其他 agent 当前 的 心态 才能 作出 正确 的 选择 和 决定 　 　 Agent 对 共享 对象 的 操作 是 通过 领域 操纵 模块 来 实现 的 共享 对象 可以 通过 集中式 、 复制 式 及 混合式 等 多种 方式 来 存放 领域 操纵 模块 的 功能 及其 实现 方法 因 共享 对象 存放 方式 的 不同 而 存在 着 差异 ， 但 其 最 基本 的 功能 是 要 传递 agent 对 共享 对象 的 操作 　 一个 协同 对象 图 设计 系统 　 　 虽然 我们 提出 的 以 jointendeavor 为 核心 的 协同 设计 层次 操作 模型 是 一种 通用 的 模型 ， 但 到 目前为止 ， 我们 仅仅 开发 了 一个 协同 对象 图 设计 系统 （ CODDS ） 来 检验 这种 协同 设计 模型 的 有效性 　 　 面向对象 的 分析 （ OOA ） 是 面向对象 的 软件开发 过程 中 最 重要 的 阶段 OOA 的 中间 结果 和 最终 结果 都 可以 用 对象 图来 表示 （ 注 ： 这里 ， 我们 在 严格 的 面向对象 的 意义 下 使用 对象 这个 概念 ， 和 我们 在 本文 提出 的 层次 操作 模型 中 的 共享 对象 的 概念 有所区别 对于 后者 ， 我们 仅仅 强调 操作 和 数据 的 封装 性 ） 对象 图 借助 对象 及其 属性 、 分类 结构 和 装配 结构 等 来 建立 应用领域 的 模型 对象 图 直接 反映 了 软件开发 的 需求 ， 并且 也 可以 在 设计 和 实现 阶段 使用 而 不 发生 意义 上 的 转变 　 　 OOA 是 一项 复杂 的 工作 同样 地 ， 直观 反映 OOA 过程 的 对象 图 的 设计 过程 也 是 一项 复杂 的 工作 这 是因为 它 需要 各 方面 ， 包括 系统分析 和 设计 人员 、 领域专家 以及 用户 等 的 知识 对 任何 成功 的 OO 分析 来说 ， 协作 都 是 必不可少 的 在 设计 CODDS 的 过程 中 ， 我们 完全 采用 了 本文 提出 的 协同 设计 层次 操作 模型 及其 实现 技术 　 　 CODDS 领域 级 系统 的 外观 看起来 像 一个 普通 的 图形 编辑器 ， 但是 这个 编辑器 的 基本 元素 是 代表 对象 、 属性 和 对象 间 的 类 层次 关系 、 装配 关系 的 矩形 、 文本 、 连接线 等 我们 为 对象 图 采用 了 内部 文本 表示 作为 其 存储 形式 其 优点 在于 ， 不但 减小 了 存储量 ， 而且 便于解决 对象 图 在 不同 的 设计者 之间 的 共享 及其 控制 问题 对象 图中 每 一 对象 的 附加 信息 诸如 其 所属 的 任务 、 创建者 以及 其他 设计者 对 其 操作 权限 等等 ， 都 可以 方便 地 插入 到 对象 图 的 文本 表示 之中 中间层 agent 可以 直接 使用 这些 附加 信息 来 进行 协同 控制 　 结束语 　 　 本文 提出 了 一种 基于 半自动 agent 的 协同 设计 层次 操作 模型 作为 这种 模型 的 核心 ， 我们 提出 了 多 agent 层 的 一种 复合 心态 元素 — — jointendeavor 以及 一组 通信 原语 来 规范 agent 的 行为 ， 从而 满足 协同 设计 的 某些 需求 基于 jointendeavor 协同 设计 ， 我们 规定 了 设计 人员 的 一种 有效 协同 模式 ， 也 给出 了 这种 半自动 agent 及其 这种 层次 操作 模型 的 一种 实现 结构 　 　 作为 这种 协同 设计 层次 操作 模型 的 一个 例子 ， 我们 开发 了 一个 协同 对象 图 设计 系统 CODDSCODDS 的 初步 使用 经验 表明 ， 这种 模型 是 可行 的 、 有效 的 ， 还有 待 获得 更 多 的 经验 来 修正 模型 ， 以 提高 其 效率 　 　 我们 提出 的 这种 协同 设计 层次 操作 模型 是 一种 具有 一定 通用性 的 模型 将 这种 模型 应用 于 其他 设计 领域 的 潜力 是 巨大 的 我们 将 与 其他 设计 领域 的 专家 合作 ， 设计 出 更 多 的 协同 设计 系统 ， 以 充分 发掘 这种 模型 的 潜力 　 本文 研究 得到 山东省 自然科学 基金 资助 本文 通讯联系 人 ： 李保建 ， 济南 山东 工业 大学 计算机系 作者简介 ： 李保建 ， 年生 ， 博士生 ， 主要 研究 领域 为 人工智能 ， 协同 设计 　 　 　 　 　 曾广周 ， 年生 ， 教授 ， 主要 研究 领域 为 人工智能 和 知识 工程 ， 软件 方法 和 软件工程学 　 　 　 　 　 林宗楷 ， 年生 ， 研究员 ， 博士生 导师 ， 主要 研究 领域 为 工程 数据库 及 协同 设计 作者 单位 ： 李保建 ， 林宗楷 （ 中国科学院计算技术研究所 CAD 开放 研究 实验室 北京 ） 　 　 　 　 　 曾广周 （ 山东 工业 大学 计算机系 济南 ） 参考文献 ： ［ ］ EllisCGibbsSReinGGroupware ： someissuesandexperiencesCommunicationsoftheACM ～ ［ ］ GrudinJCSCWintroductionCommunicationsoftheACM ～ ［ ］ FluckigerFUnderstandingNetworkedMultimediaApplicationsandTechnologyEnglewoodCliffsNJPrenticeHallInc ［ ］ GibbsSVerrijnStuartAAMultiUserInterfacesandApplicationsAmsterdamNorthHollandPublishingCompany ［ ］ PatraMRMohantyHBuildingjointattitudesforcollaborativedesigninmultiagentenvironmentsInSiriruchatapongPLinZongkaiBarthesJPedsProceedingsofthendInternationalWorkshoponCSCWinDesignBeijingInternationalAcademicPublishers ～ ［ ］ RamDJVivekanandaNRaoCSetalConstraintmetaobjectanewobjectmodelfordistributedcollaborativedesigningIEEETransactionsonSystemManandCybernetics ～ ［ ］ SimonHAThestructureofillstructuredproblemsArtificialIntelligence ～ ［ ］ ShohamYAgentorientedprogrammingArtificialIntelligence ～ ［ ］ CohenPRLevesqueHJIntentionIsChoicewithCommitmentArtificialIntelligence ～ ［ ］ JenningsNRControllingcooperativeproblemsolvinginindustrialmultiagentsystemsusingjointintentionsArtificialIntelligence ～ 收稿 日期 ： ， 修改 日期 ：