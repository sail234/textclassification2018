计算机 工程 COMPUTERENGINEERING 年 第卷 第期 volNoBDEGATE 一个 数据库 网关 原型 的 研究 与 构造 王雪平 　 刘松鹏 　 张 　 峰 　 张根度 　 　 在 分布式 的 计算环境 中 ， 采用 传统 的 客户机 服务器 模式 在 访问 远程 数据库 时 ， 必须 安装 和 配置 数据库 访问 接口 。 这种 配置 复杂性 使得 系统 使用 不便 ， 系统 的 支持 和 维护费用 偏高 。 随着 系统 的 扩大 ， 系统 变得 越来越 复杂 ： 在 每 一个 需要 访问 远程 数据库 的 客户机 上 都 需要 安装 和 设置 数据库 访问 接口 ， 这 可能 会 导致 这些 接口 之间 的 不 一致 ； 而且 一旦 需要 升级 该 数据库 接口 ， 那么 每台 客户机 上 都 必须 重新安装 ， 系统 将 变得 不 可以 接受 。 另外 ， 对 不同 的 数据库 访问 ， 用户 的 访问 权限 是 由 数据库系统 决定 的 ， 应用 系统 无法 提供 额外 的 数据库安全 机制 来 监测 客户 对 数据库 的 访问 。 而且 随着 应用 的 深入 与 趋于 复杂 ， 对 数据库 访问 的 功能 和 性能 要求 就 越 高 。 很 明显 ， 当前 应用 中 所 采用 的 方法 已 不能 很 好 地 满足 应用 的 要求 。 　 　 为此 ， 本文 提出 了 一种 数据库 网关 形式 的 数据库 接口 在 分布式 客户机 服务器 应用 的 新 方法 ， 并 开发 了 一个 数据库 网关 原型 BDEGATEBorlandDatabaseEngineGateway 。 通过 构造 数据库 网关 ， 把 数据库 接口 的 复杂性 集中 在 服务器 上 ， 降低 客户端 的 数据库 接口 的 复杂性 ， 增强 分布式 CS 应用程序 的 可维护性 ， 增加 对 数据库安全 的 控制 ， 并 支持 与 多种 数据库 的 接口 。 目前 ， 分布式 客户机 服务器 上 实现 对 数据库 访问 的 接口 大致 可以 分为 以下 种 。 　 　 专用 数据库 接口 API 　 　 数据库 厂商 纷纷 推出 各自 的 专用 的 数据库 接口 API 。 这种 专用 数据库 接口 API 常常 是 以 嵌入式 语言 的 形式 存在 。 其 特点 是 数据库 访问 效率高 ， 但是 开发 效率 极低 。 而且 不同 数据库 厂商 的 API 之间 根本 不 存在 可 互操作性 。 用 这种 专用 API 开发 的 应用程序 在 后台 数据库 改变 时 ， 有 可能 不得不 重新 开发 。 总之 ， 专用 数据库 的 接口 方案 都 与 各自 的 数据库 产品 紧密 集成 ， 因而 无论 在 效率 、 性能 还是 安全性 方面 都 达到 了 理想 的 水平 ， 但 也 正是 由于 这种 紧密 集成 ， 导致 了 他们 只能 局限 在 各自 的 数据库 产品 之上 ， 所以 兼容性 和 可移植性 差 。 　 　 Microsoft 公司 的 开放 数据库 互连 ODBCOpenDatabaseConnectivityMicrosoft 　 　 公司 的 开放 数据库 互连 是 一种 数据库 中间件 技术 和 通用 的 数据库 接口 。 开放 数据库 互连 是 用来 执行 SQLStructuredQueryLanguage 语句 的 应用 程序接口 ， 它 由 一组 开放 数据库 互连 接口 和 规范 组成 ， 易于 向 任何 关系数据库 发送 SQL 语句 ， 从而 支持 对 多种 数据库 的 访问 ； C ， VB 等 都 支持 开放 数据库 互连 接口 。 运用 开放 数据库 互连 接口 ， 只 需要 写出 一个 程序 就 能够 给 相应 的 数据库 发送 数据库 请求 。 开放 数据库 互连 ， 作为 一种 通用 的 数据库 接口 ， 具有 访问 不同 类型 的 数据库 的 能力 ； 同时 也 因为 其 通用性 而 大大 地 限制 了 其 数据库 访问 的 效率 。 而且 使用 开放 数据库 互连 ， 必须 在 运行 客户程序 的 机器 上 安装 一个 ODBC 的 驱动程序 ， 而且 还要 配置 ODBC 。 这样 极大 地 增加 了 分布式 的 客户服务器 应用 的 复杂性 和 影响 其 可维护性 。 　 　 Borland 公司 的 数据库 引擎 　 　 BDEBorland 公司 的 数据库 引擎 也 是 一种 数据库 中间件 技术 。 与 开放 数据库 互连 相 类似 ， 数据库 引擎 也 是 用来 执行 SQL 语句 的 应用 程序接口 ， 由 一组 数据库 引擎 接口 组成 ， 易于 向 任何 关系数据库 发送 SQL 语句 ， 从而 支持 对 多种 数据库 的 访问 。 与 开放 数据库 互连 不同 的 是 ， 数据库 引擎 支持 与 多种 数据库 的 直接 连接 ， 因而 效率 问题 得到 解决 。 但 还是 必须 在 运行 客户程序 的 机器 上 安装 一个 数据库 引擎 的 驱动程序 ， 而且 还要 配置 BDE 。 这样 极大 地 增加 了 分布式 的 客户机 服务器 应用 的 复杂性 和 影响 其 可维护性 。 数据库 网关 方法 的 提出 　 　 按照 通常 的 方式 ， 在 开发 分布式 的 客户机 服务器 应用 时 ， 涉及 到 远程 数据库 访问 时 往往 采用 开放 数据库 互连 方法 或 数据库 引擎 方法 。 在 使用 VB 或 C 开发 应用程序 时 ， 开放 数据库 互连 是 首选 的 方法 ； 在 使用 Delphi 开发 时 ， 数据库 引擎 是 最合适 的 选择 。 但是 无论是 使用 开放 数据库 互连 还是 使用 数据库 引擎 ， 在 应用 运行 的 主机 上 必须 安装 一个 开放 数据库 互连 接口 通常 是 ODBC 或 安装 一个 数据库 引擎 通常 是 BDE ； 此外 ， 还 需要 配置 相应 的 数据库 接口 或 数据库 引擎 。 在 一个 本地 集中 的 应用环境 中 ， 这种 方案 是 可行 的 。 然而 ， 在 一个 分布 的 应用环境 中 ， 尤其 是 跨 地域 的 应用环境 中 ， 这种 方案 的 可行性 值得 怀疑 ： 系统 的 复杂性 急剧 增加 ， 系统 的 可维护性 大大降低 。 　 　 如果 在 分布 的 应用环境 中 ， 在 访问 数据库 时 也 无须 在 本 机上 配置 数据库 访问 接口 ， 如上所述 的 制约 系统 因素 将 不复存在 ， 从而 大大提高 系统 的 可维护性 和 降低 系统 的 复杂性 。 设计 数据库 网关 的 目的 就 在于 此 ： 在 客户机 上 实现 数据库 访问 的 零 配置 方案 ， 把 数据库 接口 的 复杂性 集中 在 数据库 服务器 上 ； 同时 加入 适当 的 安全 控制策略 ， 增强 系统 的 安全性 。 数据库 网关 原型 BDEGATE 的 设计 思想 　 　 我们 设计 和 实现 的 数据库 网关 的 基本 结构 如图所示 。 分为 两 大部分 ： 一部分 是 基于 服务器 的 数据库 网关 服务 管理器 DBGSMDatabaseGatewayServiceManager ； 另外 一部分 则 是 基于 客户 的 数据库 存取 界面 DBinterface 。 其中 DBGSM 是 一个 服务 进程 ， 是 前端 的 客户 和 后 端的 数据库 之间 通信 的 桥梁 这 也 是 网关 的 来历 。 每个 客户 首先 必须 和 DBGSM 建立 连接 。 在 连接 时 ， DBGSM 进行 安全检查 。 只有 通过 安全检查 的 客户 才能 与 DBGSM 建立 连接 ， 从而 获得 DBGSM 的 数据库 网关 服务 ； 否则 ， DBGSM 将 拒绝 客户 的 请求 。 在 建立 连接 后 ， DBGSM 服务 充当 客户 和 数据库 之间 的 代理 ： 客户 把 SQL 语句 送到 DBGSM 服务 ， 然后 DBGSM 服务 透明 地 把 该 SQL 语句 提交 给 数据库 连接 ； 数据库 服务器 执行 SQL 语句 后 ， 把 结果 通过 数据库 连接 返回 给 DBGSM ， 然后 由 DBGSM 把 结果 返回 给 客户 。 数据库 存取 界面 仅仅 包含 了 两个 对象 ： RemoteDataBase 和 FrontDataSet 对象 ； 从而 为 访问 远程 数据库 提供 了 方便 。 图 数据库 关 BDEGATE 的 基本 结构 　 　 整个 数据库 网关 的 体系结构 采用 的 是 三层 Threetier 客户机 服务器 模型 。 数据库 网关 与 各个 客户 的 数据通信 采用 流套 接字 StreamSocket 机制 实现 ， 并且 利用 了 多线程 的 优点 ， 使得 数据库 网关 与 各个 客户 的 套 接字 通信 能够 并发 地 进行 。 数据库 网关 与 后 端 数据库 的 接口 采用 了 数据库 引擎 BDE ， 它们 之间 是 通过 标准 的 SQL 语言 进行 通信 的 。 在 客户端 ， 利用 对象 技术 ， 把 下层 的 实现 隐藏 起来 ， 提供 给 用户 一个 容易 使用 的 界面 。 数据库 网关 原型 BDEGATE 的 实现 　 　 根据 这个 数据库 网关 的 设计 思想 ， 选择 了 Delphi 作为 开发工具 ， 把 BDEGATE 作为 一个 服务 在 WindowsNT 下 实现 。 Delphi 已经 成为 最 受欢迎 的 数据库 应用 开发 的 工具 ， 而且 Delphi 提供 了 面向对象 的 Pascal 语言 ， 支持 面向对象 程序 的 开发 ， 还 支持 应用 构件 的 开发 。 在 BDEGATE 的 客户端 中 ， 我们 就 利用 构件技术 ， 开发 了 两个 构件 ： TRemoteDatabase 和 TFrontDataSet ， 从而 使得 客户端 的 应用 开发 非常简单 ： 无论 从 概念 还是 编程 ， 都 和 使用 传统 的 编程 方法 一样 。 在 实现 数据库 网关 BDEGATE 的 过程 中 采用 了 下面 的 关键技术 。 数据库 引擎 BDE 　 　 数据库 引擎 BDE 是 一个 由 Borland 公司 开发 的 独立 于 数据库 管理系统 DBMS 的 数据库 接口 ， 即 一个 通用 的 SQL 数据库 访问 框架 ， 它 对于 不同 的 数据库 使用 了 统一 的 接口 。 使用 数据库 引擎 BDE ， 程序员 只 需要 写 一个 数据库 接口 ， 不 需要 重新 编码 就 能够 访问 任何 数据源 。 数据库 引擎 BDE 支持 直接 的 数据库 访问 ， 其 效率 远比 开放 数据库 互连 高 。 当前 数据库 引擎 BDE 支持 的 数据库 接口 有 ： WindowsNTServer 上 的 MicrosoftSQLServer ， SybaseSQLServer ， SCOUNIX 平台 上 的 Informix ， OSWarpServer 平台 上 的 DB 等 。 此外 还 提供 对 开放 数据库 互连 数据源 的 支持 。 使用 数据库 引擎 ， 可以 实现 对 一种 数据库 的 访问 。 　 　 客户端 发送 过来 的 SQL 语句 最终 通过 数据库 引擎 BDE 来 执行 。 因此 用户 在 指定 SQL 语句 的 同时 必须 指定 连接 的 BDE 的 别名 ， 以及 用于 身份 认证 的 用户名 和 用户 口令 。 流套 接字 　 　 传输控制协议 TCPTransferControlProtocol 提供 了 一种 可靠 的 端 对 端的 通信 通道 ， 客户机 服务器应用程序 可以 用 它 来 进行 通信 。 套 接字 是 在 网络 上 运行 的 两个 程序 之间 的 双向通信 链路 的 一个 端点 。 对应 于 TCP 的 套 接字 称为 流套 接字 ， 它 是 面向 连接 的 。 服务器应用程序 侦听 特定 端口 ， 等待 来自 客户 的 连接 请求 。 当 一个 连接 请求 到达 时 ， 客户 与 服务器之间 建立 一条 专用 连接 ， 它们 在 这条 连接 上 通信 。 在 连接 过程 中 ， 客户 被 分配 一个 本地 端口号 ， 并 将 一个套 接字 绑定 到 这个 端口 。 客户 通过 向套 接字 写入 消息 以及 从套 接字 读出 来自 服务器 的 信息 的 方式 与 服务器 通信 。 与 此 类似 ， 服务器 也 获得 一个 新 的 本地 端口号 需要 新 的 端口号 是因为 ， 这样 ， 服务器 就 能够 在 原来 的 端口 上 继续 侦听 连接 请求 。 服务器 也 将 一个套 接字 绑定 到 它 的 一个 本地 端口 ， 并 通过 读写 这个 套 接字 与 客户 通信 ， 客户 和 服务器 必须 使用 相同 的 协议 ， 也就是说 ， 它们 通过 套 接字 来回 传输 信息 时 必须 使用 相同 的 语言 。 图 显示 了 流套 接字 的 工作 流程 。 图流套 接字 的 工作 流程 　 　 我们 利用 流套 接字 ， 作为 数据库 网关 下层 通信 的 渠道 。 而且 根据 应用 自身 的 需要 ， 在 流套 接字 上 定义 了 通信协议 ， 这些 对 上层 用户 是 不 可见 的 ： 在 客户端 ， 我们 利用 Delphi 开发 了 两个 数据库 存取 构件 ： TRemoteDatabase 和 TFrontDataset ， 用户 无须 关心 下层 通信协议 。 多线程 　 　 线程 是 一个 程序 中 单独 的 顺序 化 流程 。 多线程 程序设计 是 指 在 单个 程序 中 使用 多个 线程 ， 这些 线程 在 同一时间 并发 运行 ， 执行 不同 的 任务 。 在 多线程 程序 中 ， 各个 线程 需要 共享 数据 。 例如 ， 一个 线程 向 文件 写入 数据 ， 而 另 一个 线程 要 从 这个 文件 中 读数据 。 当 多个 线程 共享 数据 时 ， 需要 将 线程 同步 ， 以 达到 预期 的 结果 。 如果 一个 程序 中有 几个 并发 进程 在 竞争 资源 ， 就 必须 运用 适当 的 同步 机制 来 保证 公平竞争 。 如果 每个 线程 对于 有限 的 资源 能够 有 足够 的 访问 时间 来 保证 合理 的 进度 ， 这个 系统 是 公平 的 。 　 　 在 数据库 网关 BDEGATE 中 ， 采用 为 每个 客户 提供 一个 服务 线程 的 方式 实现 。 在 数据库 网关 中 ， 主要 包括 类 线程 ： 服务 监听 线程 ； 服务 线程 ； 空闲 管理 线程 ； 状态 监控 线程 。 其中 监听 线程 、 空闲 管理 线程 和 状态 监控 线程 是 服务器 中 始终 存在 的 个 线程 ， 服务 线程 是 根据 客户 的 请求 而 产生 和 消失 的 ， 其 数量 不定 。 图 显示 了 服务 线程 的 工作 流程 。 服务 监听 线程 始终 在 监听 服务 请求 。 一旦 有 来自 客户端 的 服务 请求 ， 服务 监听 线程 就 生成 一个 服务 线程 ， 传递 必要 的 参数 ， 然后 继续 监听 请求 。 新 生成 的 服务 线程 首先 利用 SSL 对 用户 进行 认证 ， 然后 根据 认证 结果 继续 运行 。 一旦 连接 建立 起来 后 ， 客户 就 直接 和 相关 的 服务 线程 相关 ， 而 与 其他 的 服务 线程 无关 。 空闲 管理 线程 定期 在 后台 运行 ， 检查 物理 连接 的 使用 状态 ， 如 某个 物理 连接 已经 长时间 未 用 超时 ， 则 断开连接 以 释放 资源 。 由于 一个 服务 线程 只 为 一个 客户服务 ， 失败 的 用户 不会 影响 服务 服务 线程 对 其他 客户 的 响应 。 图 服务 线程 的 工作 流程 安全 机制 　 　 结合 WindowsNT 操作系统 的 安全 机制 ， 采用 SSPISecureServiceProviderInterface 来 传送 用户 信息 和 认证 用户 。 在 用户 访问 数据库 时 ， 先 把 用户 的 认证 信息 通过 SSPI 的 客户端 接口 进行 转换 相当于 加密 ， 然后 由 下层 的 流套 接字 把 转换 的 结果 传送 给 服务 线程 ； 服务 线程 通过 SSPI 的 服务端 接口 把 认证 信息 送到 操作系统 上 认证 用户 ； 最后 服务端 把 认证 的 结果 通过 下层 的 流套 接字 返回 给 客户端 。 由于 传送 的 是 经过 加密 的 认证 信息 ， 因而 大大减少 了 用户 认证 信息 泄密 的 可能性 。 在 认证 结束 后 ， 由 BDEGATE 在 系统日志 中写 一条 安全 日志 记录 。 如果 系统 认证 成功 ， 则 允许 用户 建立 连接 ， 否则 ， 不 允许 用户 建立 连接 。 在 用户 进行 数据库 访问 时 ， 先 把 用户 信息 映射 成其 数据库 存取 信息 上 ， 然后 利用 已经 映射 的 数据库 映射 信息 去 访问 数据库 。 通过 这种 安全 机制 ， 可以 加入 用户 自己 的 安全策略 ， 实际上 大大 增强 了 数据库系统 访问 的 安全性 ， 可靠性 。 　 　 在 编程 实现 数据库 网关 的 过程 中 ， 特别 注意 了 下面 的 几个 问题 。 因为 网络 是 不 可靠 的 ， 客户程序 同样 不 可靠 ， 所以 在 BDEGATE 加入 了 充分 的 出错 处理 ExceptionHandling 机制 。 在 出错 后 ， 把 出错 的 原因 尽可能 地 告诉 客户端 ， 让 客户端 了解 系统 的 状态 。 　 　 综上所述 ， 在 设计 和 实现 数据库 网关 BDEGATE 的 过程 中 ， 运用 了 如下 的 关键技术 ： 三层 客户机 服务器 模型 ； SQL ； BDE ； 流套 接字 ； 多线程 ； SSPI 支持 的 安全 机制 。 小结 　 　 我们 设计 和 开发 的 数据库 网关 原型 利用 了 数据库 引擎 BDE 来 进行 数据库 访问 ， 使得 可以 访问 各种 数据库系统 ； 采用 了 多线程 技术 ， 使得 系统 的 健壮性 得到 了 保证 ； 采用 SSPI ， 增加 了 额外 的 数据库 访问 安全 机制 。 为了 测试 开发 的 数据库 网关 原型 ， 我们 编写 一个 简单 的 客户端 测试程序 ， 以及 测试程序 的 安装程序 。 我们 发现 ， 在 连接 不同 类型 的 数据库 时 ， 客户端 的 应用程序 无须 修改 ； 使用 TCPIP 网络 上 常用 的 协议 分析器 ， 也 无法 分析 出 用户 访问 数据库 的 认证 信息 ； 在 连接 多个 客户端 应用 时 ， BDEGATE 表现 良好 ， 资源 消耗 达到 了 理想 的 水平 。 　 　 概括 起来 ， 该 数据库 网关 的 原型 完成 了 下列 功能 ： 实现 了 客户端 的 零 配置 方案 ； 降低 客户端 的 数据库 接口 的 复杂性 ； 增强 分布式 客户机 服务器应用程序 的 可维护性 ， 增加 了 数据库 访问 的 安全 机制 ； 支持 与 多种 关系数据库 的 连接 。 作者 单位 ： 复旦大学 计算机系 ， 上海 参考文献 施 伯乐 ， 丁宝康 ， 楼荣生 数据库系统 导论 北京 ： 高等教育出版社 ， 徐 新华 Delphi 编程 指南 北京 ： 宇航 出版社 ， MinasiM ， AndersonC ， CreeganEWindowsNTServer 从 入门 到 精通 北京 ： 电子 工业 出版社 ，