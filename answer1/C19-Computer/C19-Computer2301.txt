计算机 研究 与 发展 JOURNALOFCOMPUTERRESEARCHANDDEVELOPMENT 年 第卷 第期 VolNo 一个 并发 对象 演算 张 　 黔 　 李卫华 　 傅建明 　 金 　 涛 摘 　 要 　 由于 缺乏 一个 为 人们 接受 的 描述 并发 对象 系统 语义 的 形式化 模型 ， 并发 面向对象 程序设计 语言 的 开发 受到 了 很大 的 制约 为了 给 并发 面向对象 程序设计 定义 一个 公共 的 语义 框架 ， 人们 分别 以 π 演算 和 actor 模型 为 基础 进行 了 研究 综合 这 两种 方法 ， 文中 定义 了 一个 形式化 模型 该 模型 具有 清晰 的 形式化 定义 ， 既 可 重用 标准 的 并发 性 理论 ， 还 保存 了 高级 面向对象 的 程序设计 风格 本文 还 提供 了 一个 actor 代数 及 一个 并发 对象 演算 ， 并 在 两者之间 建立 起 变换 关系 关键词 　 并发 面向对象 程序设计 语言 ， π 演算 ， actor 模型 ， 操作 语义 中图法 分类号 　 TPACALCULUSOFCONCURRENTOBJECTSZHANGQianLIWeiHuaFUJianMingandJINTaoNationalEngineeringTechnologyResearchCentreforMultimediaSoftwareWuhan 　 OpenResearchLaboratoryforMultimediaSoftwareunderMinistryofEducationWuhan 　 SoftwareBaseofWuhanUniversityWuhan 　 Abstract 　 ThedevelopmentofconcurrentobjectorientedprogramminglanguageshassufferedfromthelackofawidelyacceptedformalfoundationfordescribingthesemanticsofconcurrentobjectsystemsBasedonthe π calculusandtheactormodelrespectivelyattemptshavebeenmadetodefineacommonsemanticframeworkforconcurrentobjectorientedprogrammingBycompromisingthesetwoapproachesaformalismthatenjoysacleanformaldefinitionisdefinedwhichallowsthereuseofstandardresultsofthetheoryofconcurrencywhilepreservingahighlevelobjectorientedprogrammingstyleTheactoralgebraandtheconcurrentobjectcalculusareproposedinthepaperhereandthetranslationrelationshipbetweenthetwoapproachesisalsopresentedKeywords 　 concurrentobjectorientedprogramminglanguage π calculusactormodeloperationalsemantics 　 　 Grogono 和 Gargul 曾 指出 ： “ 函数 式 程序设计 的 基础 是 λ 演算 ， 逻辑 程序设计 的 基础 为 逻辑 ， 而 面向对象 程序设计 缺乏 一个 人们 可用 来 作为 定义 和 讨论 基础 的 简单 模型 ” Stein 等 人 也 指出 “ 关于 什么 是 面向对象 程序设计 基础 的 讨论 自该 领域 出现 就 一直 存在 哪些 特征 — — 类 、 原型 、 继承 、 代理 、 消息传递 、 封装 、 抽象 — — 是 面向对象 程序设计 的 核心 ， 以及 它们 之间 的 关系 如何 ， 这些 问题 都 不是 在 短时间 内 可以 解决 的 ” 　 　 而 对于 并发 面向对象 程序设计 来说 ， 其 形式化 模型 则 更是 缺乏 Nierstrasz 在 文献 中 谈到 “ 由于 缺乏 被 广泛 接受 的 定义 语义 的 形式化 基础 ， 基于 对象 的 并发程序 设计 语言 的 开发 受到 了 制约 ” 在 这里 ， 他 所 谈到 的 只是 基于 对象 的 并发程序 设计 语言 ， 还 未 涉及 面向对象 的 许多 特征 ， 如类 、 继承 等等 人们 认识 到 该 问题 的 严重性 ， 正 投入 较大 精力 从事 并发 对象 形式 语义 的 研究 　 　 目前 ， 在 研究 给 并发 面向对象 程序设计 定义 一个 公共 的 语义 框架 时 ， 主要 有 两种 方法 ： 　 　 第种 方法 基于 π 演算 π 演算 可以 被 看作 是 对 进程 代数 的 扩充 ， 它 引入 了 名字 及 动态 进程 创建 的 概念 ， 在 计算 过程 中 ， 通信 的 拓扑 结构 可以 动态 地 演化 通常 认为 ， π 演算 为 建模 具有 动态 结构 的 系统 提供 了 一个 合理 的 形式化 基础 但是 用 π 演算 来 建模 ， 面向对象 特征 是 一件 相当 繁琐 的 工作 ， 这 就 类似 于用 “ 并发 汇编 ” 来 进行 程序设计 　 　 第种 方法 基于 actor 模型 长期以来 ， actor 模型 被 公认 为 是 能 处理 进程 创建 、 变换 等 动态 特性 的 独特 的 并发 计算 模型 与 π 演算 相比 ， actor 模型 为 并发 面向对象 程序设计 提供 了 更 抽象 的 观察点 特别 是 ， 由于 一个 actor 具有 接近 于 对象 的 结构 及 交互 属性 ， 该 模型 可以 对 面向对象 程序设计 的 核心 概念 — — 对象 — — 进行 直接 的 表示 但 该 模型 一方面 无法 表示 面向对象 系统 中 最 重要 的 概念 — — 继承 ， 同时 模型 的 理论 基础 还 不够 完备 　 　 本文 研究 的 目标 就是 要 开发 一个 全新 的 方法 ， 用以 进行 并发 面向对象 程序设计 语义 的 研究 我们 将 综合 π 演算 及 actor 模型 的 特征 ， 形成 一个 并发 对象 演算 　 并发 对象 演算 需 满足 的 特性 　 　 在 形式化 一个 并发 对象 演算 时 ， 我们 需 考虑 并发 面向对象 语言 中 几个 基本特征 ： 　 　 对象 标识 性 标识 性是 对象 的 一个 重要 属性 ， 根据 该 属性 ， 一个 对象 可 区别 于 其它 所有 对象 ， 这 对于 获得 对 相应 对象 的 存取 十分必要 通过 给 每个 对象 关联 一个 特有 的 名字 或 地址 可以 实现 对于 对象 标识 性 的 支持 　 　 并发 性 对象 是 自治 的 实体 ， 它 具有 内部 及 外部 并发 性 　 　 组合 对象 可以 被 指定 为 对于 对象 的 抽象 、 服务 及其 它 对象 部分 的 函数 组合 　 　 异步 消息传递 异步 消息传递 最 适合 于 描述 并发 面向对象 程序设计 的 基本 交互 机制 通过 提供 足够 的 同步 约束 ， 在 异步 消息传递 机制 上 可以 建模 同步 通信 但是 反过来 ， 若想 在 一个 同步 语言 中 建模 异步 消息传递 ， 则 需要 引入 一个 额外 的 实体 以 处理 消息 的 缓存 　 　 递归 以 表达 非 终止 agent 及 状态 改变 　 　 动态性 动态性 意味着 在 运行 时期 创建 新 对象 的 可能性 　 Actor 的 一个 代数 　 　 actor 是 自 包含 agent ， 它 具有 一个 状态 及 一个 行为 每个 actor 有 一个 独特 的 邮箱地址 ， 该 地址 是 在 它 被 创建 时 决定 的 actor 利用 个 基本 的 原语 进行 异步 消息传递 ： create — — 创建 新 的 actors ； send — — 发送 消息 给 其它 actor ； become — — 改变 当前 actor 的 行为 一个 actor 或 处于 活跃 状态 或 处于 空闲 状态 仅 当 某 actor 处于 空闲 时 ， 它 方可 接收 消息 ［ ］ 　 一个 actor 代数 　 　 actor 代数 是 一 可 建模 actor 系统 的 代数 设 Aactors 为 actor 名字 的 可数 集合 ， a ， b ， c ， ai ， bi ， … 在 Aactors 上 变化 ； Mactors 为 消息 内容 的 集合 ； Sactors 为 变量值 的 集合 ， s ， s ， s ， v ， v ， … 在 Sactors 上 变化 actor 系统 可以 根据 下面 的 抽象 语法 进行 定义 ： 　 　 Actor ∷ Idle — ActorActive — ActorMessageActor ‖ ActorvnameActor 　 　 Idle — Actor ∷ 〈 IdleNameProgramStates 〉 　 ∥ 可 接收 一 消息 　 　 Active — Actor ∷ 〈 ActiveNameProgramStates 〉 　 ∥ Program 为 正在 执行 的 程序 　 　 Message ∷ 〈 RecipientContents 〉 　 Recipient ∷ Name 　 　 Name ∷ a ∈ Aactors 　 Contents ∷ m ∈ Mactors 　 States ∷ s ∈ Sactors 　 　 Program ∷ becomeProgramStateProgramsendNameContentsProgramcreateNameProgramStateProgramEProgam … EnProgramn 　 　 一个 actor 系统 代表 并行 运行 的 actor 的 集合 　 操作 语义 　 　 我们 用 标签 变换 系统 来 建模 上述 actor 代数 的 操作 语义 设 τ 为 局部 自治 的 计算 步骤 ； 和 av 分别 表示 接收 及 发送 一 消息 ， 该 消息 的 接收者 为 a ， 消息 的 内容 为 v 　 　 ① 程序 sendbmP 发送 一 内容 为 m 的 消息 到 名字 为 b 的 actor 　 　 ② 程序 becomePsP ′ 将 自身 状态 从 活跃 改变 为 空闲 继续 的 程序 P ′ 由 匿名 actor 〈 ActivePs 〉 执行 ， 该 actor 将 不能 再 接收 任何 消息 ， 所以 它 没有 名字 　 　 ③ （ d 是 一个 新 的 名字 程序 createbPsP ′ 创建 一新 的 空闲 actor ， 该 actor 状态 为 s 、 程序 为 P ′ ， 且 具有 新 名字 d 　 　 ④ 　 ∥ 若 ei ＝ 真 表达式 ei 为 返回 真 或 假 的 布尔 表达式 仅当 表达式 ei 为 真时 ， 方可 选中 对应 的 分支 Pi 　 　 ⑤ 　 　 ⑥ 　 　 ⑦ 　 　 ⑧ 　 一个 基于 actor 的 语言 　 　 下面 我们 引入 一个 新 语言 ABL ， ABL 是 基于 actor 的 简单 的 并发 面向对象 语言 ， 其 基础 为 actor 代数 在 actor 模型 中 ， 计算 由 多个 称为 actor 的 agent 执行 ， 每个 actor 有 自己 的 邮箱地址 在 接收 到 一条 消息 时 ， 该 actor 可以 发送 一些 消息 到 其它 actor 或 自身 、 创建 新 的 actors 、 或 指定 替代 行为 　 　 例如 ， 下面 是 对 一个 cell 类 的 定义 ： 　 　 　 　 cell 类 的 实例 有 状态变量 x ， 该类 处理 get 及 set 两条 消息 消息 get 带 参量 reply — adr ， 此 参量 指出 cell 对象 将 状态变量 x 的 值 所 送到 的 目标 消息 set 带 参量 newx ， 当 cell 对象 接收 到 此 消息 时 ， 它 将 其实 例 变量 设为 newxcell 类 的 一个 实例 可以 用 表达式 letidcreatecelline 创建 该 表达式 创建 cell 类 的 一个 实例 ， 并 在 e 中将 id 约束 为 它 的 标识符 　 　 下面 给出 在 ABL 中 一个 类 的 定义 的 全部 语法 ： 　 　 〈 defcl 〉 ∷ defclass 〈 clname 〉 〈 statevar 〉 〈 body 〉 　 　 　 　 〈 action 〉 ∷ become 〈 clname 〉 〈 arg 〉 sendto 〈 dest 〉 〈 mname 〉 〈 arg 〉 sendto 〈 dest 〉 〈 arg 〉 let 〈 var 〉 create 〈 clname 〉 〈 arg 〉 in 〈 action 〉 　 　 其中 ， 〈 body 〉 代表 方法 定义 表达式 （ sendtoxm ） 发送 一 异步 消息 m 到 x 消息 m 或 为 一 包含 方法 名及 参量 的 点 对 ， 或仅 为 一 参量 　 并发 对象 演算 　 　 从 上 面对 ABL 的 语法分析 可以 看出 ， ABL 语言 具有 较 高 的 抽象 程度 ， 其 语法结构 能够 较 容易 地为 编程人员 所 接受 但是 如何 看待 其 理论 基础 呢 ？ 如何 能够 正确 地 对 该 语言 的 语义 进行 研究 呢 ？ 下面 我们 将 给出 一个 并发 对象 演算 ， 并 设法 在 ABL 及 演算 之间 建立 起 相应 的 变换 关系 ， 从而 实现 对 语言 语义 的 探讨 　 并发 对象 演算 　 　 表中 总结 了 并发 对象 演算 中 进程 表达式 的 语法 我们 将 每个 进程 表达式 与 TyCO （ typedconcurrentobjects ） ［ ］ 的 一些 公式 对应 起来 ， 表中 第列 显示 这种 对应 关系 在 定义 中 ， 设 x 在 变量 上 变化 ， P 在 进程 表达式 上 变化 ， m 为 一 消息 谓词 仅当 发送者 与 接收者 的 消息 谓词 相同 时 ， 方可 执行 消息传递 例如 ， （ m （ ） 可 计算 为 ： 表 　 并发 对象 演算 中 进程 表达式 的 语法 进程 表达式 TyCO 语法 描述 无 作用 ProcAx … xnP 进程 定义 mx … xnP 接收 me … ， en 消息 ， 并 表现 为 P ［ ex … ， enxn ］ mx … xnP 发送 me … en 消息 ， 并 表现 为 Pmx … xnPmx … xnP 表现 为 mx … xnP 或 mx … xnPPPPP 并行 组合 ＄ xPvxP 名字 限制 创建 PP 非 约束 复制 　 将 ABL 编码 到 并发 对象 演算 　 　 上文 已经 给出 了 一种 并发 对象 演算 ， 由于 我们 已经 将 该 并发 对象 演算 对应 到 TyCO ， 而 目前 对 TyCO 中 类型 的 研究 已经 取得 了 一定 的 进展 ［ ］ ， 所以 对 自定义 的 并发 对象 演算 就 可以 重用 并发 性 理论 中 的 标准 结果 现在 关键 的 问题 在于 ABL 和 该 并发 对象 演算 之间 如何 能够 建立 起 相应 的 变换 关系 ？ 　 　 我们 观察 到 ， ABL 可以 被 简单 地 编码 到 并发 对象 演算 中 例如 ， 上述 cell 类 的 定义 可 编码 为 下面 的 进程 表达式 ： （ 设比具 较 高 优先级 ） 　 　 proccellxselfselfgetreply — adrreply — adrxcellxselfselfsetnewxcellnewxself 　 　 变换 后 的 程序 与 ABL 中 cell 类 的 定义 形式 上 十分 近似 ， 区别 在于 在 演算 中 我们 为 cell 引入 了 一个 额外 的 参量 self ， self 可以 看作 是 cell 的 对象 标识符 ， 而 它 在 ABL 中是 隐含 的 有关 并发 对象 演算 中 self 的 必要性 我们 在 文献 ［ ］ 中 已 进行 了 较 详细 的 描述 　 　 下面 给出 一些 变换 函数 的 形式 定义 ， 它们 将 ABL 中 对 类 的 定义 变换 为 并发 对象 演算 中 的 进程 表达式 ： 　 　 ζ cdefclass 〈 clname 〉 〈 statevar 〉 〈 body 〉 proc 〈 clname 〉 〈 statevar 〉 self ζ b 〈 bodys 〉 　 　 ζ b ε ⊥ 　 　 ζ bmethod 〈 mname 〉 〈 parvar 〉 〈 action 〉 〈 body 〉 　 　 self 〈 mname 〉 〈 parvar 〉 ζ a 〈 actions 〉 ζ b 〈 script 〉 　 　 ζ a ε ⊥ 　 　 ζ abecome 〈 clname 〉 〈 arg 〉 〈 action 〉 〈 clname 〉 〈 arg 〉 self ζ a 〈 action 〉 　 　 ζ asendto 〈 dest 〉 〈 mname 〉 〈 arg 〉 〈 action 〉 〈 dest 〉 〈 mname 〉 〈 arg 〉 ζ a 〈 action 〉 　 　 ζ asendto 〈 dest 〉 〈 arg 〉 〈 action 〉 〈 dest 〉 〈 arg 〉 ζ a 〈 action 〉 　 　 ζ alet 〈 var 〉 new 〈 clname 〉 〈 arg 〉 in 〈 action 〉 ＄ 〈 var 〉 〈 clname 〉 〈 arg 〉 self ζ a 〈 action 〉 　 　 利用 上述 变换 函数 ， 可以 将 ABL 编码 到 并发 对象 演算 中 经过 变换 后 ， 所有 的 类型 推断 、 语义 研究 均 可以 在 并发 对象 演算 中 进行 由于 我们 已经 将 该 并发 对象 演算 对应 到 TyCO ， 将 可以 利用 并发 性 理论 中 一些 标准 结论 同时 ， 由于 在 ABL 和 并发 对象 演算 之间 建立 了 一 变换 关系 ， 还 保存 了 高级 面向对象 程序设计 风格 　 相关 工作 及 讨论 　 相关 工作 　 　 关于 对象 计算 模型 的 研究 ， 目前 主要 有 以下 几种 方法 λ 演算 具有 完备 的 理论 基础 ， 适于 对 封装 性 、 组合 及 类型 等 问题 进行 建模 ， 但是 它 完全 不 涉及 并发 性及 通信 人们 开发 了 CCS 等 进程 演算 以 解决 这些 问题 ， 但是 它们 不能 直接 地 表示 新 通信 通道 的 动态创建 及 通信 　 　 π 演算 通过 引入 名字 ， 以及 像 λ 演算 引入 新 的 约束 名字 一样 地 进行 通信 ， 克服 了 上述 缺点 以 这种 方式 ， 新 对象 的 创建 可以 用 它们 独特 的 对象 标识符 来 建模 人们 在 这个 领域 进行 了 很多 的 尝试 ， 以 利用 π 演算 来 建模 并发 面向对象 程序设计 语言 中 的 不同 方面 有 代表性 的 包括 BPierce 的 PICT ［ ］ ， VVasconcelos 的 TyCO ［ ］ 以及 ONierstrasz 的 OC ［ ］ 但是 这些 方法 并 不能 完全 地 令人满意 ， 主要 是因为 π 演算 不能 将 对象 处理 为 一阶 实体 　 　 actor 模型 能 处理 并发 计算 模型 的 动态 特性 ， 如 进程 创建 、 变换 等 该 模型 为 并发 面向对象 程序设计 提供 了 抽象 的 观察点 ［ ］ 但 其 理论 基础 不 完备 例如 ， 迄今为止 对于 actor 的 等价 性 仍然 没有 一个 公认 的 概念 　 　 还有 一些 对 并发 面向对象 语言 的 研究 ， 例如 ， PAmerica 采用 基于 指称 语义 的 方法 、 JEngelfriet 采用 基于 Petri 网 的 方法 ， 为 一 特定 并行 面向对象 语言 POOL 提供 了 不同 的 语义 描述 这些 工作 与 我们 所 进行 研究 的 目标 不 大 相同 ， 我们 是 希望 研究 一个 适于 对 通用 并发 面向对象 语言 建模 的 actor 代数 及其 基础 并发 对象 演算 　 讨论 　 　 本文 研究 了 actor 模型 与 并发 对象 演算 的 关系 定义 了 一个 actor 代数 ， 该 代数 既 具有 清晰 的 形式 定义 ， 又 基于 良好 的 程序设计 风格 文中 引入 了 一个 基于 actor 的 高级 语言 以及 一个 并发 对象 演算 ， 指出 该 高级 语言 可以 编码 到 并发 对象 演算 中 ， 从而 进行 类型 检查和 语义 推理 这种 方法 的 好处 在于 ， 可以 在 不 修改 底层 并发 对象 演算 及其 类型 系统 的 前提 下 ， 引入 并发 面向对象 程序设计 的 其它 机制 　 　 在 该 领域 还有 一些 研究 有待 进行 它们 包括 ： 研究 在 该 actor 代数 中 如何 讨论 类型 及 继承 问题 ； 研究 代数 定律 的 表达 以 特征 化 actor 系统 的 等价 性 ； 研究 在 该 actor 代数 中 如何 集成 并发 面向对象 语言 的 特征 ， 特别 是 重用 特征 和 并发 性 机制 本 课题 得到 国家 “ 八 六三 ” 高技术 计划 项目编号 和 国家 高校 博士点 学科点 专项基金 资助 作者简介 ： 张黔 ， 女 ， 年月生 ， 博士 研究生 ， 主要 研究 领域 为 并发 面向对象 程序设计 语言 、 并行 归纳法 推理 及 分布 计算 李卫华 ， 男 ， 年月生 ， 教授 ， 博士生 导师 ， 主要 研究 领域 为 人工智能 、 知识 工程 、 多媒体技术 傅建明 ， 男 ， 年月生 ， 博士 研究生 ， 主要 研究 领域 为 知识 工程 、 分布 计算 金涛 ， 男 ， 年月生 ， 博士 研究生 ， 主要 研究 领域 为 知识 工程 、 多媒体技术 作者 单位 ： 张 　 黔 　 国家 多媒体 软件工程 技术 研究 中心 　 武汉 　 　 　 　 　 　 李卫华 　 教育部 多媒体 软件 开放 研究 实验室 　 武汉 　 　 　 　 　 　 傅建明 　 金涛 　 武汉大学 软件 基地 　 武汉 　 参考文献 　 　 NierstraszOTowardsanobjectcalculusInProcoftheECOOPWorkshoponObjectBasedConcurrentComputingLNCSUtrechtSpringerVerlag ～ 　 MilnerRParrowJWalkerDAcalculusofmobileprocessesPart Ⅰ Ⅱ InformationandComputation ： ～ 　 AghaGMasonIASmithSetalTowardsatheoryofactorcomputationInProcofCONCURLNCSNiceSpringerVerlag ～ 　 VasconcelosVTTypedconcurrentobjectsInthEuropeanConfonObjectOrientedProgrammingLNCSBerlinSpringerVerlag ～ 　 张黔 并发 面向对象 语言 中 继承 异常 及 语义 模型 的 研究 博士论文 武汉大学 武汉 ， ZhangQianResearchontheinheritanceanomalyandthesemanticsmodelinconcurrentobjectorientedlanguageinChineseWuhanUniversityWuhan 　 PierceBCTurnerDNPictAprogramminglanguagebasedonthepicalculusIndianaUniversityTechRep ： CSCI 原稿 收到 日期 ： 修改稿 收到 日期 ：