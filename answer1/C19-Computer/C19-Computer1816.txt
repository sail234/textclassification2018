微型机 与 应用 MICROCOMPUTERITSAPPLICATIONS 　 No 　 No 　 P 基于 层 CS 结构 的 管理信息系统 开发 于华 摘要 ： 在 分析 传统 层 CS 结构 局限性 的 基础 上 ， 简要 介绍 了 层 CS 结构 的 概念 、 特点 以及 基于 这种 结构 的 管理信息系统 的 开发方法 。 关键词 ： 层 CS 结构 管理信息系统 组件 ActiveX 传统 层 CS 结构 的 局限性 　 　 随着 计算机技术 、 网络 技术 和 数据库 技术 的 发展 ， MIS 的 开发 平台 从 单一 的 体系结构 、 主机 结构 、 PC － LAN 的 文件 服务器 结构 发展 到 年代 以来 较为 先进 的 客户服务器 （ CS ） 结构 。 这种 模式 将 应用 一分为二 ， 服务器 负责 数据管理 ， 客户机 完成 与 用户 的 交互 任务 ， 从而 在 主机 模式 和 文件 服务器 模式 中 找到 了 平衡 。 然而 ， 随着 企业 规模 的 日益 扩大 ， 应用程序 的 复杂程度 不断 提高 ， 这种 传统 的 层 CS 模式 也 逐渐 暴露出 许多 问题 ， 已 不能 适应 不断 增长 的 多方面 需求 。 主要 体现 为 以下几点 ： 　 　 （ ） 可扩展性 差 。 它 是 单一 服务器 且 以 局域网 为 中心 的 ， 所以 难以 扩展 至 大型 企业 网 或 Internet 。 　 　 （ ） 软硬件 的 组合 及 集成 能力 有限 。 　 　 （ ） 难以 管理 大量 的 客户机 。 　 　 因此 ， 层 CS 结构 应运而生 。 层 CS 结构 　 　 层 CS 结构 是 将 应用 功能 分成 表示层 、 功能 层 和 数据 层 部分 。 这些 层 并不一定 与 网络 上 的 具体 物理 位置 相对 应 ， 它们 只是 概念 上 的 层 。 一般 情况 是 将 表示层 配置 在 客户机 中 ， 功能 层 和 数据 层 既 可以 分别 放在 不同 的 服务器 上 ， 也 可以 放在 同台 服务器 上 。 典型 的 层 CS 结构 如图所示 。 图 典型 的 层 CS 结构 　 　 ． 表示层 （ 客户端 服务程序 ） 　 　 表示层 提供 可视化 的 用户 接口 ， 它 担负 着 用户 和 应用 间 的 对话 功能 ， 用来 表示 信息 和 收集 数据 。 它 一般 是 使用 快速 应用 开发 （ RAD ） 工具 创建 的 。 以 微软 的 产品 为例 ， 当 用户服务 表现 为 Windows 应用 时 ， 往往 是 用 VisualBasic 、 VisualFoxpro 、 VisualC ＋ ＋ 等 编写 出来 的 可执行程序 。 当 用户服务 表现 为 Web 应用 时 ， 往往 是 用 FrontPage 或 MSVisualInterDev 写 出来 的 HTML 、 DHTML 网页 或 ActiveServerPage 。 　 　 ． 功能 层 （ 业务 服务 及其 它 中间层 服务程序 ） 　 　 功能 层 相当于 应用 的 本体 ， 它 是 将 具体 的 业务 处理 逻辑 地 编入 程序 中 ， 是 联系 表示层 和 数据 层 的 “ 桥梁 ” ， 它 响应 用户 发来 的 请求 ， 执行 某种 业务 任务 ， 并 对 相应 的 数据 进行 处理 。 用户 不 需要 直接 与 数据库 打交道 。 在 实际 应用 过程 中 ， 功能 层 部件 通常 可 分为 个 以上 的 层次 ， 因此 这种 模型 也 被 称为 多层次 结构 。 　 　 ． 数据 层 　 　 数据 层 就是 数据库 管理系统 （ DBMS ） ， 负责管理 数据 的 定义 、 维护 、 访问 和 更新 ， 以及 管理 并 响应 业务 服务 的 数据 请求 。 　 　 DBMS 必须 能 迅速 执行 大量 数据 的 更新 和 检索 。 现在 的 主流 是 关系数据库 管理系统 。 将 数据服务 和 应用程序 的 其它 组件 分开 ， 在 维护 、 修改 甚至 重构 数据结构 及 访问 机制 时 ， 可以 丝毫 不 影响 业务 服务程序 和 客户端程序 。 层 CS 结构 的 特点 优越 的 系统 性能 　 　 层 CS 结构 是 一种 胖 客户 型 ， 即 数据 计算 和 数据处理 集中 在 客户端 ， 这种 系统 的 网络 负荷 大 ， 直接 影响 业务 处理 的 速度 。 在 层 CS 结构 中 ， 数据 计算 和 数据处理 集中 在 中间层 部件 ， 因而 层 结构 系统 能够 实现 分布 计算 功能 。 具体地说 ， 可以 根据 需要 把 各个 部件 分别 或 重复 地 分布 在 不同 的 计算机 上 ， 使 整个 系统 的 工作量 平衡 分配 到 网络 中 。 具有 灵活 的 硬件 系统 构成 　 　 对于 各个 层 可以 选择 与其 处理 负荷 和 处理 特性 相适应 的 硬件 。 例如 ， 最初 可以 用台 计算机 作为 服务器 ， 将 数据 层 和 功能 层 都 配置 在 这台 服务器 上 ， 随着 业务 的 发展 ， 用户数 和 数据量 逐渐 增加 ， 就 可以 将 这台 计算机 作为 功能 层 的 专用 服务器 ， 另外 追加 台 专用 于 数据 层 的 服务器 。 若 业务 进一步 扩大 ， 用户数 进一步 增加 ， 则 可以 继续 增加 功能 层 的 服务器 数目 ， 用以 分割 数据库 。 清晰 、 合理 地 分割 层 结构 并 使 其 独立 ， 可以 使 系统 构成 的 变更 非常简单 。 提高 系统 的 可维护性 　 　 层 CS 机构 中 ， 应用 的 各层 可以 并行 开发 ， 各层 也 可以 选择 各自 最 适合 的 开发 语言 。 采用 基于 组件 的 开发方法 ， 也 使 系统 的 维护 和 升级 更加 容易 。 对系统 的 修改 或 升级 可简化 到 只 对 某个 特定 部件 的 更换 。 进行 严密 的 安全 管理 　 　 越是 关键 的 应用 ， 用户 的 识别 和 存取 权限 设定 越 重要 。 在 层 CS 结构 中 ， 对 应用 和 数据 的 存取 权限 可以 按层 进行 设定 。 这样 ， 即使 外部 的 入侵者 突破 了 表示层 的 安全 防线 ， 若 在 功能 层 和 数据 层中 备有 另外 的 安全 机构 ， 系统 也 可以 阻止 入侵者 进入 其他 部分 。 开放性 　 　 在 层 CS 结构 中 ， 客户端程序 和 功能 层 部件 可用 VB 、 VC 、 JAVA 以及 其它 各种 支持 ActiveX 的 开发工具 开发 。 由于 采用 ActiveX 技术 ， 每个 功能 层 部件 都 有 标准 的 接口 ， 这样 就 可以 将 系统 中 的 一些 部件 接口 ， 提供 给 客户 进行 次 开发 ， 客户 可以 重写 自己 的 客户端程序 和 自己 的 浏览器 程序 ， 也 可 重写 满足 特殊 需要 的 功能 层 部件 ， 此外 还 可 添加 新 的 部件 。 基于 层 CS 结构 的 应用 开发 基于 组件 的 应用 程序开发 方法 　 　 使用 层 结构 模型 可以 将 应用程序 的 需求 分解成 明确 定义 的 服务 ， 然后 创建 具体 的 物理 组件 来 实现 它们 。 根据 性能 和 维护 的 需求 、 网络带宽 以及 其它 因素 ， 可以 在 网络 上 灵活 地 部署 这些 组件 。 　 　 这种 基于 组件 的 解决方案 将 应用程序 的 开发 分成 大 类 任务 。 类 任务 是 开发 能 被 很多 程序 使用 的 核心 组件 （ ActiveX 控件 和 服务器 、 存储 过程 等 ） ； 另类 任务 是 集成 这些 核心 组件 ， 象 搭积木 一样 将 它们 组装 在 一起 ， 构造 出 特定 的 业务 解决方案 。 组件 的 组装 模型 如图所示 。 图 组件 的 组装 模型 　 　 与 传统 的 应用 程序开发 方法 相比 ， 基于 组件 的 方法 具有 以下 优点 ： 　 　 （ ） 能够 使用 多种语言 工具 （ 如 ： VisualBasic 、 CC ＋ ＋ 、 SQL 或 其它 工具 ） 编写 可 重用 组件 ， 这样 程序员 就 不会 被 束缚 于 单一 的 语言 或 工具 ， 能够 使用 他们 所 熟悉 的 、 最 适合 特定 任务 的 语言 和 工具 ； 　 　 （ ） 创建 能够 被 很多 应用程序 使用 的 通用 组件 ， 可 大大减少 开发 的 开销 。 组件 的 使用者 不 需要 知道 组件 的 内部结构 ， 只 需要 理解 与 它们 之间 的 接口 ， 这样 就 能够 以 最少 的 开销 开发 尽可能 多 的 应用程序 ； 　 　 （ ） 组件 可以 部署 在 网络 上 ， 从而 取得 效率 、 性能 和 安全 、 维护 上 的 最大 利益 。 　 　 通常 ， 基于 部件 的 应用 程序开发 过程 包括 以下 步骤 ： 　 　 （ ） 确定 应用程序 的 需求 ； 　 　 （ ） 把 这些 需求 映射 成 抽象 的 业务 对象 以及 它们 提供 的 服务 ； 　 　 （ ） 把 业务 对象 及其 服务 映射 为 软件 组件 ； 　 　 （ ） 在 网络 上 部署 这些 组件 。 用 VB 和 ActiveX 组件 进行 企业 开发 　 　 目前 ， 组件 分为 二大类 ， 一类 是 由 微软 推出 的 ActiveX ， 另一类 是 Sun 的 JavaBean 。 ActiveX 可以 做到 操作系统 级 兼容 ， 即 在 Windows 平台 下 运行 ， 支持 Windows 平台 下 的 各类 开发工具 ， 如 VisualC ＋ ＋ 、 VisualBasic 、 VisualFoxpro 和 PowerBuilder 等等 ； JavaBean 在 所有 支持 Java 的 平台 上 皆 可 运行 。 ActiveX 和 JavaBean 的 区别 其实 就是 性能 与 平台 无关 性 的 区别 。 在 目前 的 商业软件 中 ， ActiveX 的 应用 更为 广泛 。 　 　 当 分布式应用 通过 网络 进行 通信 时 ， ActiveX 可以 使用 种 不同 的 机制 对 客户 请求 作出 响应 ： 分布式 组件 对象 模型 （ DCOM ） 和 远程 自动化 （ RemoteAutomation ） 。 这 二种 分布式 机制 都 有着 与 组件 物理 位置 无关 的 特点 。 也就是说 ， 当用 VisualBasic 创建 ActiveX 组件 时 ， 无需 知道 它 将 分布 在 哪台 机器 上 。 同样 的 组件 ， 既 可以 将 它 放在 本地 机 ， 也 可以 将 它 分布 在 其它 机器 上 而 不 需要 重新 编译 。 这样 ， 根据 网络 的 性能 和 网络结构 的 变化 ， 我们 可以 方便 地 调整 组件 的 分布 策略 。 　 　 ActiveX 标准 非常适合 为 企业级 的 客户服务器 系统 构造 分离 的 组件 ： 　 　 （ ） 构造 远程 组件 和 构造 本地 组件 的 编程 方法 一模一样 ， 无须 特殊 的 编程 经验 。 　 　 （ ） 可以 用 ActiveX 组件 在 服务器端 实现 复杂 的 商业 规则 ， 比起 用 DBMS （ 如 SQLServer ） 来 具有 更好 的 编程 、 维护 和 排错 手段 。 　 　 （ ） ActiveX 组件 可以 自行 开发 ， 也 可以 购买 商业 组件 ， 现在 有 越来越 多 的 商业 组件 可以 购买 ， 所以 我们 只 需要 将 特殊 的 商业 规则 开发 成 组件 。 　 　 由此可见 ， 在 创建 企业级 的 客户服务器 系统 应用 时 ， ActiveX 组件 是 基本 工具 。 　 　 目前 ， 用层 CS 结构 开发 的 应用 还 不太多 ， 一般 在 下列 情况 下应 考虑 采用 层 结构 。 　 　 （ ） 应用 是 用 不同 语言 编写 的 ； （ ） 有个 以上 的 异构 数据源 ； （ ） 高 工作 负荷 ； （ ） 应用 的 生命周期 较长 等等 。 　 　 从 传统 的 层 CS 型 应用 过渡 到层 CS 型 应用 时 ， 要 考虑 时间 和 费用 问题 ， 需要 循序渐进 。 于华 （ 山东 财政 学院 计算机信息 工程系 ） 收稿 日期 ： － －