计算机 应用 研究 APPLICATIONRESERCHOFCOMPUTERSVol 　 No 　 P 软件 构架 在 系统 动态 演化 中 的 应用 汪洋 　 葛叶冰 　 李丽燕 摘要 描述 了 基于 软件 构架 的 方法 来 实现 系统 的 动态 演化 ， 并 结合 C 软件 风格 和 一 实例 来 展示 是 如何 实现 运行 动态 演化 的 。 关键词 软件 构架 构件 连接器 C 风格 　 前言 　 　 运行 系统 在 长期 的 运行 过程 中 会 遇到 各种各样 的 变化 ， 如 硬件 的 更换 、 损坏 ， 网络 性能 的 变化 ， 服务 的 变化 ， 需求 变化 以及 功能 实现 的 变化 。 运行 系统 如何 适应 这些 变化 呢 ？ 一种 是 将 系统 复位 ， 重新配置 系统 的 结构 和 实现 。 另 一种 是 系统 在 运行 时 进行 动态 演化 以 适应 这些 变化 。 对于 一些 要求 连续 运行 的 系统 ， 如 航空 交通系统 、 数据 采集 系统 ， 停止 运行 将 带来 重大 的 损失 ， 所以 在 设计 时应 尽量 考虑 让 系统 具备 动态 演化 的 功能 。 　 运行 期 变化 管理 　 　 系统 在 运行 时 遇到 的 外部 变化 从 性质 上 一般 分 两类 。 一类 是 需求 的 变化 ， 它 将 有 可能 要求 系统结构 发生变化 ； 另一类 是 系统 实现 部分 的 变化 。 需求 变化 将 直接 影响 系统 实现 的 变化 ， 而 系统 实现 的 变化 并 不 改变 需求 。 　 　 要 让 系统 在 运行 过程 中 实现 动态 演化 ， 首先 要 对 变化 进行 管理 。 这 包括 ： 　 　 确定 变化 的 对象 ， 即 是 什么 发生 了 变化 。 　 　 确定 变化 对系统 带来 的 影响 。 　 　 对 变化 进行 控制 以 维护 系统 的 完整性 、 一致性 。 　 　 以下 是 管理 变化 的 四个 重要 方面 。 　 　 变化 的 策略 。 即 运行 期 的 变化 是 如何 施加 到 系统 上 的 。 如 系统 是 采取 瞬时 的 功能 替换 ， 或者 是 新 老 功能 并存 ， 让 新 的 功能 逐步 接管 老 的 功能 。 这种 策略 由 系统 设计者 根据 系统 的 需求 决定 。 　 　 变化 的 影响 范围 。 确定 系统 的 各个 部分 是否 受 变化 的 影响 。 对 变化 的 影响 范围 准确 定位 有利于 对 变化 的 管理 。 　 　 将 系统 功能 行为 与 系统 动态 演化 尽量 地 隔离 。 隔离 程度 越高 ， 其中 一个 发生变化 不会 影响 到 另 一个 。 　 　 对 变化 描述 的 抽象 程度 将 影响 系统管理 变化 的 开销 和 复杂性 。 　 软件 构架 、 构件 、 连接器 、 构架 风格 　 　 软件 构架 高度 抽象地 描述 了 软件系统 的 结构 ， 包括 系统 元素 的 描述 、 元素 之间 的 交互 、 用于 指导 元素 复合 的 模式 和 这些 模式 的 约束 。 构件 是 组成 构架 的 基本 元素 ， 是 对系统 应用 功能 的 实现 。 我们 把 构件 看成 一个 黑盒子 。 构件 封装 了 功能性 ， 有着 自己 的 内部 状态 信息 。 构件 的 实现 是 异质 的 可以 用 多种语言 实现 。 构件 的 这些 特性 使得 一些 OTS 通用 构件 可以 很 容易 被 复用 。 连接器 是 将 系统 中 的 构件 绑定 在 一起 的 实体 ， 是 构件 交互 的 中间 媒介 。 连接器 将 构件 的 接口 需求 与 它 的 功能 需求 分割 开来 。 连接器 封装 了 构件之间 的 交互 协议 。 构架 风格 是 指 能够 标识 一类 构架 的 功能性 特征 的 集合 。 一种 构架 风格 代表 了 一种 软件设计 成分 进行 组织 的 特定 模式 。 构架 风格 是 领域 独立 的 。 　 软件 构架 与 系统 动态 演化 　 　 以往 处理 运行 变化 的 方法 有 ： 手工 的 方法 。 计算机 放弃 对系统 的 控制 而 由 人 对系统 进行 手工 的 维护 配置 ； 迂回 的 方法 。 通过 冗余 功能 和 簇 机制 来 绕过 变化 ； 基于 程序 级 的 方法 。 采用 动态 的 编程语言 来 支持系统 运行 期 的 变化 。 如 Lisp 、 SmallTalk ； 基于 模块 级 的 方法 。 通过 功能模块 将 系统 在 运行 期 的 各种 变化 封装 起来 ； 基于 结构 的 方法 。 系统 由 各个 处理 节点 和 连接 各 节点 的 连接器 组成 。 从 各种 方法 的 处理 效果 来看 ， 手工 与 迂回 的 方法 只能 处理 特定 简单 的 变化 ， 而 基于 动态 语言 的 方法 使得 系统 的 实现 局限于 几种 动态 语言 上 ， 而且 效率 低 。 模块 级 的 方法 要求 在 设计 时 就 考虑 到 所有 可能 的 变化 ， 对 变化 的 处理 是 源代码 级 的 ， 不宜 扩展 。 基于 结构 的 方法 能够 很 好 地 引入 变化 ， 但 受到 节点 的 状态 的 限制 。 　 　 基于 软件 构架 的 方法 在 实现 系统 的 动态 演化 方面 有 以下 优点 。 设计者 通过 系统 构架 的 层次 来 描述 理解 系统 ， 可 对 变化 的 策略 及 变化 的 影响 范围 进行 统一规划 ； 系统 变化 的 策略 及 对 变化 作出 的 反应 封装 在 软件 连接器 中 ， 从而 将 变化 管理 与 特定 应用 行为 分离 ； 软件 构架 从 高层次 描述 系统 ， 有利于 对 变化 的 管理 。 　 　 运行 系统 的 动态 演化 在 软件 构架 上 表现 在 ： 　 　 l 运行 期 构件 的 添加 。 通过 增加 构件 可以 扩充 完善 系统 的 功能 ， 在 添加 构件 时应 根据 系统 的 当前 状态 以 确定 是否 应对 构件 的 内部 状态 进行 初始化 。 　 　 运行 期 构件 的 删除 。 通过 删除 构件 可以 去掉 系统 中 一些 不再 需要 的 功能 。 在 删除 构件 时应 确认 该 构件 的 所有 事务 都 已 处理完毕 。 　 　 运行 期 构件 的 替换 。 通过 替换 构件 可以 升级 完善 系统 的 功能 ， 为 保证 新老 构件 的 顺利 交接 。 在 替换 构件 时应 保证 老 构件 的 当前 状态 能够 复制到 新 构件 中 ， 而且 新老 构件 不能 同时 处于 激活状态 。 　 　 运行 期 构架 的 重组 。 通过 构架 的 重组 可以 改变 系统 的 功能 行为 。 重组 表现 在 构件 、 连接器 之间 的 连接 拓扑 结构 上 。 　 　 下面 针对 C 软件 构架 风格 ， 介绍 软件 构架 在 系统 动态 演化 中 的 应用 。 　 C 构架 风格 　 概况 　 　 C 是 一种 基于 分层 结构 ， 事件驱动 的 软件 构架 风格 。 图是 一个 典型 的 C 风格 构架 。 C 构架 中 的 基本 元素 是 构件 Component ， 连接器 Connector 。 每个 构件 定义 有 一个 顶端 接口 和 一个 底端 接口 ， 这 使得 构件 的 增加 、 删除 、 重组 更为 简单 方便 。 每个 连接器 也 定义 有 顶端 接口 和 底端 接口 ， 但 接口 的 数量 与 连接 在 其 上 的 构件 ， 连接器 数量 有关 ， 这 也 有利于 实现 在 运行 时 的 动态 绑定 。 构件之间 不 存在 直接 的 通讯 手段 。 构架 中 各 元素 构件 、 连接器 之间 的 通讯 只有 通过 连接器 传递 消息 来 实现 ， 如图 。 处于 底层 的 构件 向 高层 的 构件 发出 服务 请求 消息 Requests ， 消息 经由 连接器 送到 相应 的 构件 ， 处理 完成 后 由 该 构件 将 结果 信息 Notifications 经 连接器 送到 低层 相应 的 构件 。 图 图 　 特点 　 　 C 风格 区别 于 其它 软件 风格 的 几个 显著特点 ： 　 　 A 基底 独立性 Substrateindependence 　 　 在 整个 构架 中 ， 构件 只 知道 处于 它 上层 的 构件 而 不 知道 它 下层 的 构件 。 构件 通过 发送 一个 请求 消息 利用 上层 的 构件 的 服务 ， 而 构件 与 下层 构件 的 通讯 是 隐式 的 。 它 发出 的 消息 有 可能 被 多个 构件 所 接受 。 　 　 B 消息 通讯 机制 Messagebasedcommunication 　 　 构件之间 的 交互 只有 通过 信息 传递 实现 。 　 　 C 多线程 Multithreaded 　 　 组成 系统 的 各个 构件 有 自己 的 状态 ， 进程 控制 。 　 　 D 不 共享 地址 空间 Noassumptionofsharedaddressspace 　 　 组成 系统 中 的 各个 构件 不 共享 地址 空间 。 　 　 E 实现 与 构架 分离 Implementationseparatefromarchitecture 　 　 实现 技术 与 系统 的 概念 构架 相 分离 。 　 　 C 风格 的 以上 这些 特点 减少 了 构件之间 的 相互 依赖性 ， 有利于 动态 实现 系统 构架 的 变化 ， 对系统 动态 演化 提供 了 最大 程度 的 支持 。 　 C 实现 框架 　 　 图是 C 风格 的 基本 类 框架 。 ComponentInterface 　 　 　 　 　 ArchitectureInterface 　 　 start 　 　 　 　 　 　 　 　 　 　 start 　 　 finish 　 　 　 　 　 　 　 　 　 　 finish 　 　 handlerequest 　 　 　 　 　 　 　 handlerequest 　 　 handlenotification 　 　 　 　 handlenotification 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 addComponentcomponentConnectorInterface 　 　 　 　 　 removeComponentcomponent 　 　 start 　 　 　 　 　 　 　 　 　 　 addConnectorconnector 　 　 finish 　 　 　 　 　 　 　 　 　 　 removeConnectorconnector 　 　 handlerequest 　 　 　 　 　 　 　 weldconnectorcomponent 　 　 handlenotification 　 　 　 　 weldcomponentconnector 　 　 addTopPort 　 　 　 　 　 　 　 weldconnectorconnector 　 　 removeTopPort 　 　 　 　 　 unweldconnectorcomponent 　 　 addBottomPort 　 　 　 　 　 unweldcomponentconnector 　 　 removeBottomPort 　 　 　 　 unweldconnectorconnector 图 　 　 Component 、 Connector 、 Architecture 是 三个 抽象类 ， 其中 方法 start 和 finish 是 用来 初始化 一个 构件 的 运行 和 结束 一个 构件 的 运行 。 Handle 方法 用来 处理 各 对象 之间 的 消息传递 。 AddTopPort ， addBottomPort ， weld 用来 在 运行 时 改变 构架 的 组成 元素 和 各 元素 之间 的 连接 拓扑 结构 。 enum 等 方法 用来 查询 构架 自身 组织 和 结构 。 C 框架 的 这些 方法 有利于 描述 和 实现 系统 构架 的 动态变化 ， 开发者 可以 通过 对 上述 对象 的 继承 从而 复用 这些 方法 。 　 C 连接器 　 　 在 C 风格 软件 构架 中 ， 连接器 以 独立 实体 存在 ， 由 它 将 各个 构件 连接起来 并 充当 它们 交互 的 中间件 ， 从而 将 构件 的 接口 需求 与 功能 需求 相 分离 。 在 动态 演化 中 对 变化 的 处理 策略 、 对 变化 的 隔离 、 对 变化 的 一致性 维护 是 通过 连接器 Connector 来 实现 的 。 主要 表现 在 ： 连接器 能够 实现 不同 的 变化 策略 。 例如 ： 如果 要 支持 瞬间 的 构件 替换 ， 连接器 可以 将 通讯 从 老 构件 切换 到 新 构件 。 如果 要 实现 渐进式 的 构件 替换 ， 就 可以 将 老 的 服务 请求 定位 到 老 构件 ， 新 的 服务 请求 定位 到 新 的 构件 。 连接器 可以 隔离 变化 ， 防止 变化 的 影响 扩散 ， 将 变化 局部 化 。 例如 ： 如果 一个 构件 在 系统 运行 时 不可 用 了 ， 那么 连接器 将 发给 它 的 服务 请求 用 临时 队列 保存起来 直到 该 构件 恢复正常 工作 ， 结果 达到 了 其它 构件 与 该 变化 相 隔离 的 效果 。 　 应用 　 　 结合 上述 的 C 风格 ， 我们 将 其 应用 在 一个 网络服务 支持系统 中 ， 系统 可以 针对 不断 提出 的 新 的 变化 进行 动态 演化 。 　 需求 简介 　 　 某一 大型 企业 的 服务 支持系统 要求 对 工程 自 签定 合同 以后 的 计划 、 安装 、 服务 进行 一条龙 的 管理 。 首先 由 市场部 签定 工程 合同 ， 对 该 工程 编号 ， 产生 该 工程 的 原始 信息 。 生产 部将 生产 出该 工程 的 硬件 材料 ， 并 进行 调测 。 等到 该 工程 具备 安装 条件 时 ， 将 由 计划 部 列入 工程 安装 计划 ， 由 所属 分公司 进行 现场 安装 。 分公司 在 安装 期间 不断 返回 工程 的 安装 进展 情况 。 在 安装 完毕 验收 后 ， 由 服务部 统一 进行 维护 。 由于 系统 与 多个 部门 发生 联系 ， 系统 且 有 较 高 的 实时性 要求 ， 系统 在 不断 地 运行 过程 中 工作 流程 还会 发生 不断 变化 及 工作 具体 实现 策略 的 变化 ， 所以 要求 系统 能够 在 最大 程度 上 实现 动态 演化 以 保证 其它 部门 的 正常 工作 。 　 C 风格 构架 　 　 简略 的 C 风格 构架 如图所示 。 图 　 　 各个 构件 说明 如下 。 　 　 DADataAccess ： 数据 存储 构件 。 负责 对 数据库 的 访问 ， 接受 下层 构件 的 数据库 服务 请求 。 　 　 PSMProjectStateManager ： 工程 状态 管理 构件 。 根据 下层 构件 的 修改 及 查询 工程 数据 及 状态 请求 ， 产生 相应 的 数据库 访问 请求 提交 给 DA 。 　 　 PPPProjectPlanPolicy ： 工程 计划 管理 构件 。 根据 PSM 返回 的 工程 状态 ， 设置 工程 的 计划 。 在 具体 实现 中 主要 根据 工程 的 发货 及 相应 硬件 准备 情况 来 设置 。 　 　 PSPProjectServicePolicy ： 工程 服务 管理 构件 。 根据 PSM 返回 的 工程 状态 ， 设置 工程 的 服务类型 、 服务 时间 。 在 具体 实现 中 主要 根据 工程 的 类型 及 完成 日期 来 设置 。 　 　 PSRProjectStateReport 及 SRServiceReport 是 相应 的 报表 构件 。 DIDateInput ， DIDateInput 等 是 与 工程 数据录入 相对 应 的 构件 ， 各个部门 负责 各自 有关 数据 的 录入 。 　 　 Graphics 构件 负责 图形界面 的 显示 。 　 　 各个 连接器 说明 如下 。 　 　 Connectorl ： 负责 将 数据库 服务 请求 如 Sql 语句 提交 给 数据库 访问 构件 及 将 操作 结果 返回 给 下层 构件 。 　 　 Connector ： 负责 将 工程 状态 的 操作 提交 给 工程 状态 管理 构件 ， 及 将 工程 状态 广播 到 下层 的 构件 及 连接器 。 　 　 Connector ： 负责 将 工程 状态 操作 请求 及 工程 状态 的 广播 ， 是 基于 网络 的 连接器 。 在 整个 构架 图中 ， 位于 其 上方 的 构件 及 连接器 位于 服务器端 ， 位于 其 下方 的 构件 及 连接器 位于 用户端 。 　 　 Connector ： 负责 图形 方面 的 服务 请求 及 数据 交互 。 　 　 值得注意 的 是 工程 状态 管理 构件 PSM 是 整个 系统 的 核心 构件 ， 系统 中 对 工程 状态 的 增加 ， 修改 ， 删除 ， 查询 等 操作 都 要 最终 提交 给 它 ， 而且 操作 的 返回 结果 由 它 传给 Connector ， 再 由 Connector 进行 广播 ， 相应 的 构件 就 可以 得到 相应 信息 了 。 如 ： DI 构件 要 修改 工程 的 完成 日期 HandOver ， 它 将 发送 请求 PrjStateRequest 给 PSM ， 该 请求 经由 Connector ， Connector 提交 到 PSM ， PSM 收到 请求 后 生成 相应 的 数据库 服务 请求 DBRequest 经由 Connector 提交 到 DA ， 由 DA 进行 数据库 的 操作 。 操作 完毕 后 DA 将 操作 结果 DBNotification 返回 给 Connector ， PSM 在 收到 该 消息 后 ， 发送 消息 PrjStateNotification ， 由 Connector 将 该 消息 进行 广播 。 与 该 连接器 相连 的 每个 构件 和 连接器 都 有 可能 这 与 连接器 的 消息 广播 机制 及 策略 有关 收到 该 消息 。 在 DI 构件 收到 该 消息 后 注意 到 Connector ， Connector 之间 存在 直接 的 通讯 连接 ， 所以 该 消息 可以 广播 到 DI 构件 ， 可以 进一步 运行 。 与此同时 PSP 构件 在 接受 到 该 消息 后 ， 将 根据 该 工程 的 完成 日期 和 服务 策略 决定 该 工程 的 服务 情况 。 如果 该 工程 满足 一定 的 服务 要求 ， PSP 构件 将 发出 设置 服务类型 和 服务 时间 的 请求 。 因为 完成 日期 的 更新 在 工程 的 计划 之后 ， 故 PPP 构件 将 不 接受 该 消息 。 　 系统 的 动态 演化 　 　 下面 是 该 系统 在 运行 过程 中 针对 一系列 的 变化 作出 的 动态 演化 。 　 　 构件 的 增加 ： 输入 构件 DI 的 增加 。 由于 工程 的 进度 信息 原来 是 属于 计划 部 负责管理 和 填写 。 现在 由于 工程 的 数量 的 增加 ， 计划 部 的 工作量 急剧 增加 。 现在 提出 由 分公司 在 现场 通过 网络 直接 填写 。 DI 则 是 为此 而 设计 的 分布式 构件 。 工程 状态 检查 构件 PSC 的 增加 。 原来 对 工程 数据 的 检查 是 由 工程 状态 管理 构件 PSM 完成 ， 但 现在 由于 数据 操作 量 的 增加 ， PSM 越来越 成为 系统 性能 的 瓶颈 ， 增加 的 构件 PSC 是 在 数据 提交 之前 对 提交 的 数据 进行 检查 ， 将 不 合法 的 数据 及时 反馈 给 下层 构件 ， 而 不 向上 提交 。 在 实现 构件 增加 的 同时 必须 对 构件 状态 进行 初始化 。 　 　 构件 的 替换 ： 构件 的 替换 主要 用于 构件 的 升级 。 服务 构件 PSP 的 替换 。 原来 的 服务 策略 是 由 系统 根据 工程 的 状态 确定 服务 的 类型 及 服务 时间 ， 现在 要求 服务 时间 不是 确定 的 ， 而是 根据 工程 的 状态 和 历次 服务 历史 来 确定 一个 最迟 服务 时间 deadline ， 工程 的 服务 只要 在 此 时间 之前 完成 即可 。 并 在 输入 服务 时间 的 同时 确定 下次 的 最迟 服务 时间 。 替换 在 老 构件 处于 空闲 状态 进行 。 在 进行 构件 替换 的 过程 中 ， 为 保证系统 的 正常 运行 ， 要求 在 老 构件 的 状态 处于 非 活动状态 进行 替换 。 　 　 构件 的 删除 ： 报表 构件 的 删除 。 构件 的 替换 比较简单 ， 但 要 注意 构件 的 删除 应 在 构件 处理 完 了 所有 的 任务 以后 ， 即 构件 处于 非 激活状态 ， 如 报表 构件 的 删除 。 系统 经过 演化 后 的 构架 如图所示 。 图 　 动态 演化 支持 　 　 图是 基于 软件 构架 方法 实现 动态 演化 的 模型 。 图 　 　 系统 构架 以 脚本 的 形式 存在 。 通过 对外部 变化 进行 解释 ， 将 其 转化 为 系统 构架 的 变化 如 ： 构件 的 增 、 删 、 替换 等 。 这部分 由 系统 设计师 根据 系统 的 需求 情况 得到 ， 再 由 系统 构架 管理器 将 其 转化 到 相应 实现 的 变化 。 系统 构架 管理器 还 负责 对 提出 的 构架 变化 进行 一致性 验证 及 对 构架 脚本 进行 更新 维护 。 　 结论 本文 介绍 了 一种 基于 软件 构架 实现 系统 动态 演化 的 方法 ， 软件 构架 由于 其 抽象层次 高 ， 并 可 通过 连接器 来 封装 不同 的 运行 时 变化 的 策略 将 特定 应用 功能 与 运行 变化 分割 开来 ， 从而 实现 对 变化 更好 的 管理 ， 使得 对系统 演化 的 考虑 不再 渗透到 系统 的 详细 设计 当中 。 值得一提的是 目前 还 没有 一种 合适 的 方法 来 对系统 构架 的 变化 进行 一致性 的 检查 ， 以 保证系统 的 完整性 。 这 将 有待于 进一步 的 研究 。 汪洋 （ 复旦大学 计算机系 上海 ） 葛叶冰 （ 复旦大学 计算机系 上海 ） 李丽燕 （ 复旦大学 计算机系 上海 ） 参考文献 AcomponentandmessagebasedarchitecturalstyleforGUIsoftwareIEEETransSEPp ～ DynamicStructureinSoftwareArchitecturesFourthSIGSOFTsymposiumontheFoundationsofsoftwareengineeringSanFranciscoIssuesintheruntimemodificationofsoftwarearchitecturesUCIrvineTechnicalReportUCIICSArchitecturalsupportfordynamicreconfigurationofdistributedworkflowapplicationsIEEOctoberADLsandDynamicArchitectureChangesProceedingsoftheSecondInternationalSoftwareArchitectureworkshopISAWpagesSanFranciscoCAOctober 收稿 日期 ： 年月日