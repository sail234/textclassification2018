软件 学报 JOURNALOFSOFTWARE 年 　 第卷 　 第期 　 Vol 　 No 　 基于 最佳 并行度 的 任务 依赖图 调度 杜 建成 黄皓 陈道蓄 谢立 摘要 　 基于 最佳 并行度 的 任务 依赖图 调度 策略 充分利用 编译 时刻 所 得到 的 全局 信息 采用 横向 和 纵向 任务 合并 处理 节点 预 分配 静态 调度 和 动态 调度 相结合 、 集中 式调度 和 分层 调度 相结合 等 措施 是 一种 简单 的 、 具有 较 高效率 的 实用化 调度 方案 该 调度 方案 能够 在 尽量 压缩 调度 长度 的 情况 下 节约 系统资源 关键词 　 层次 任务 图 任务 依赖图 静态 调度 动态 调度 最佳 并行度 中图法 分类号 　 TPOptimumDegreeofParallelismbasedTaskDependenceGraphSchedulingSchemeDUJianchengHUANGHaoCHENDaoxuXIELiStateKeyLaboratoryforNovelSoftwareTechnologyNanjingUniversityNanjingDepartmentofComputerScienceandTechnologyNanjingUniversityNanjingAbstractOptimumdegreeofparallelismbasedtaskdependencegraphschedulingschemefullyutilizestheglobalinformationcollectedatcompiletimeemploysthetechniquessuchastaskmerginginhorizontalandverticaldirectionsprocessorspreallocationcombinationofstaticanddynamicschedulingandintegrationofcentralizedschedulingandlayerschedulingItisasimplepracticalandeffectiveschedulingmethodwhichaddressestheproblemofhowtobothreducetheexecutiontimeofprogramsandeconomizeonprocessorresourcesKeywordsHierarchicaltaskgraphtaskdependencegraphstaticschedulingdynamicschedulingoptimumdegreeofparallelism 　 　 编写 并行程序 是 一件 相当 复杂 和 困难 的 事情 自动 并行 编译 的 出现 为 充分 有效 地 利用 各种 形式 的 并行 体系结构 提供 了 强大 的 支持 在 进行 串行 程序 的 任务 并行性 分析 时 首先 要 将 整个 程序 划分 成 若干个 模块 或 任务 然后 分析 这些 任务 的 读写 集 判定 是否 存在 读写 冲突 若 无 冲突 则 二者 可以 并行执行 我们 根据 模块 的 自然 边界 进行 任务 的 划分 这种 划分 往往 可以 提供 较 好 的 数据 局部性 结果 得到 层次 任务 图 HTGhierarchicaltaskgraph 下 一步 的 工作 便是 在 并行 环境 中 调度 执行 HTG 中 的 任务 无论是 在 共享 存储 环境 还是 在 分布 存储 环境 都 常常 采用 动态 调度 和 静态 调度 相结合 的 方法 静态 调度 是 指 在 编译 时刻 所 进行 的 调度 有时 也 称为 预 调度 可以 利用 编译 时 得到 的 全局 信息 进行 调度 优化 动态 调度 是 指 在 程序执行 过程 中 所 进行 的 调度 具有 较 多 的 灵活性 图是 该 系统 的 框架结构 其中 数据 控制 依赖 关系 分析 分析程序 中 各个 模块 之间 的 依赖 关系 分析 结果 是 层次 任务 图 HTG 任务 粒度 和 通信 代价 预估 对 各个 任务 的 执行 时间 和 任务 间 的 通信量 进行 评估 并 确定 复合 任务 粒度 的 上限 UL 图 　 系统 框架 　 　 HTG 的 归一化 将 任务 粒度 大于 UL 的 复合 节点 的 HTG 图 嵌入 到 初始 HTG 中 最终 形成 一个 单一 的 任务 依赖图 TDGtaskdependencegraph 　 　 TDG 的 分层 化用 先广 搜索 的 方法 对 TDG 进行 分层 处理 使得 同层 任务 之间 没有 依赖 关系 可以 并行执行 有 依赖 关系 的 节点 分布 在 不同 层中 结果 形成 分层 任务 图 LTGlayouttaskgraph 　 　 任务 的 合并 由于 最佳 并行度 和 可用 的 处理 节点 的 限制 并且 为了 实现 任务 粒度 的 均衡化 对同 一层 中 的 某些 任务 进行 横向 合并 同时 为了 消除 不必要 的 通信 在 不同 层中 进行 纵向 合并 　 　 任务 的 包装 在 每个 任务 中 添加 必要 的 成分 使 之 成为 可以 独立 编译 和 运行 的 单位 　 　 处理 节点 预 分配 让 每个 任务 尽量 分配 在 其 前导 节点 所在 的 处理 节点 上 以便 压缩 通信 开销 　 　 分层 调度 在 程序运行 时刻 接受 前导 任务 发来 的 消息 将 下 一层 的 所有 任务调度 激活 　 　 从图 中 可以 看出 我们 采用 了 静态 调度 和 动态 调度 相结合 的 方法 静态 调度 预 调度 部分 包括 TDG 的 分层 化 、 任务 的 合并 和 处理 节点 预 分配 分层 调度 属于 动态 调度 　 相关 工作 　 　 一般 形式 的 优化 调度 问题 都 是 NP 难题 因此 实用 的 调度 算法 都 是 经验 算法 文献 给出 了 一些 算法 如 HLFhighlevelfirstCPcriticalpathLPTlargestprocessingtime 但是 这些 算法 都 基于 共享 存储 模式 不 考虑 通信 代价 不能 很 好 地 应用 于 分布 存储系统 　 　 文献 给出 了 一个 可 伸缩 的 调度 算法 SSSscalablescheduleschemeSSS 给出 一个 阈值 在 调度 长度 和 并行度 之间 取得 折衷 其中 的 处理 节点 竞争 算法 仅 考虑 一个 前导 任务 的 若干个 后继 任务 竞争 处理 节点 的 情况 而 没有 考虑 一组 前导 任务 的 若干个 后继 任务 相互竞争 的 情况 　 　 文献 给出 了 共享 存储 模式 下 任务 依赖图 的 调度 它 将 任务 分为 并行任务 和 串行 任务 两类 串行 任务 比 并行任务 具有 更 高 的 优先级 以便 于 消除 调度 中 的 瓶颈 但 在 分布 存储系统 中 动态 调度 并行任务 很 困难 　 　 本文 力图 解决 这样 一个 问题 如何 在 尽量 压缩 调度 长度 的 情况 下 节约 系统资源 本文 给出 最佳 并行度 的 概念 在 调度 及 通信 开销 与 程序 并行性 之间 取得 折衷 通过 合并 达到 任务 粒度 的 均衡化 通过 后继 任务 间 处理 节点 的 分配 算法 来 压缩 通信 开销 实验 表明 当 存在 大量 的 并行 小 任务 的 情况 下 本文 的 调度 方案 实现 了 上述 目标 　 预 调度 　 几个 约定 　 　 TDG 和 LTG 的 约定 　 　 TDG 和 LTG 均 是 无环 有向图 directedacirclicgraph 简称 DAG 　 　 前导 任务 与 后继 任务 之间 的 先后 或 依赖 关系 用 通信 来 表达 send 原语 为 非 阻塞 通信 原语 nonblockingreceive 原语 为 阻塞 通信 原语 blocking 　 　 任务 是非 严格 的 即 后继 任务 可以 在 前导 任务 结束 之前 被 调度 但 若 后继 任务 未 完全 获得 所 需要 的 依赖 信息 将 处于 通信 等待 状态 　 　 执行 环境 的 约定 　 　 分布 存储系统 中 的 各个 节点 同构 任意 两个 节点 之间 通信 速率 相同 　 　 任务模型 　 　 一个 任务 由 以下 个 部分 组成 如图所示 图 　 任务模型 　 　 receive 区 接受 来自 前导 任务 的 消息 　 　 计算 区 任务 的 主体 完成 本 任务 的 所有 计算 　 　 调度 区 向 调度 器 发出 消息 指示 调度 器 将 后继 任务调度 激活 　 　 send 区 向 其 后继 任务 发送 消息 　 　 并 不是 所有 的 任务 都 包含 这个 区 例如 TDG 的 首 任务 没有 接受 区尾 任务 没有 发送 区 LTG 中 的 每 一层 只 需 一个 任务 有 调度 区 因为 调度 器 一次 可以 将 下 一层 的 所有 任务 激活 　 　 调度 模型 　 　 采用 动态 调度 和 静态 调度 相接 合 的 策略 动态 调度 采用 集中式 方法 由 一个 调度 器 利用 静态 调度 的 结果 随时 接受 来自 某一 任务调度 区 的 消息 对 LTG 实施 调度 调度 器 每次 调度 LTG 的 一层 中 的 所有 任务 直至 尾 任务 执行 完毕 　 TDG 的 分层 化 　 　 为了 便于 进行 任务 的 合并 和 调度 等 后继 工作 首先 将 TDG 分层 化使 同层 中 的 任务 之间 没有 依赖 关系 进而 可以 并行执行 有 依赖 关系 的 节点 分布 在 不同 层中 节点 p 依赖于 q 则 称 q 为 p 的 前导 节点 p 为 q 的 后继 节点 没有 前导 节点 的 节点 为首 节点 没有 后继 节点 的 节点 为 尾 节点 算法 采用 先广 搜索 的 方法 对 TDG 遍历 给 每个 节点 一个 标记 该 标记 指出 节点 的 层 号 这样 就 完成 了 TDG 的 分层 化 结果 形成 分层 任务 图 　 　 算法 TDG 的 分层 化 　 　 procedureLTDG 　 　 　 Qnil 　 　 　 l 　 　 　 forIton 　 　 　 　 　 　 　 Lnil 　 　 　 QQ ∪ nfirst 　 　 　 Lnfirstl 　 　 　 whileQnil 　 　 　 　 　 　 　 　 　 　 　 ll 　 　 　 　 　 　 qanodefromQwithindgreeequal 　 　 　 　 　 　 QQq 　 　 　 　 　 　 forallnodesnadjacenttoq 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 LnmaxLn 　 　 　 　 　 　 　 　 　 QQ ∪ n 　 　 　 　 　 　 　 　 　 deleteallarcsincidenttothisnode 　 　 　 　 　 　 　 　 　 　 　 　 　 end 　 任务 的 合并 最佳 并行度 　 　 考察 如下 结构 的 简单 TDG 如图所示 Tiin 依赖于 TT 执行 完 之后 Ti 可以 并行执行 可以 申请 的 处理 节点 数 大于 等于 n 当 T 执行 到 调度 区时 向 调度 器 发送 消息 调度 器 接受 到 消息 将 Tiin 全部 调度 激活 然后 调度 器向 T 发送 消息 报告 Tiin 所在 的 位置 T 进入 发送 区 向 Tiin 发送 消息 Tiin 接受 到 消息 便 立即 开始 执行 TTiin 和 调度 器 执行 时 的 时序 关系 如图所示 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 图 　 简单 的 TDG 　 　 　 　 　 　 　 　 　 　 　 　 图 　 任务 执行 时序 图 　 　 T 与 Tiin 之间 的 通信 代价 CiISDiI 为 通信 启动 代价 S 为 发送 单位 数据量 的 通信 代价 Di 为 T 与 Tiin 之间 的 通信量 调度 一个 任务 的 平均 开销 为 SHT 与 Tiin 的 执行 开销 分别 为 t 与 tiin 为 简单 起 见 假定 Dti 分别 为 常数 DtCi 为 常数 CISDT 与 Tiin 之间 的 通信 开销 始终 存在 则 Tiin 的 调度 次序 不 对 TDG 的 执行 时间 产生 影响 在 这种 情况 下图 中 TDG 的 执行 时间 为 　 　 　 　 　 　 　 　 　 　 然后 将 T 的 n 个 后继 任务 Tiin 均匀 合并 为 m 个 任务 T ＇ iimmnmn 此时 每个 新 任务 T ＇ iim 包含 nm 个原 任务 因此 每个 新 任务 的 执行 时间 相同 均 为 t ＇ tnmT ＇ iim 与 T 的 通信 代价 C ＇ ISDnm 故 合并 后 TDG 的 完成 执行 时间 为 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 由式 可 得当 tSHImn 且 mn 时 　 　 　 　 　 　 　 　 　 　 　 　 　 CT ＇ CT 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 下面 求 使得 CT ＇ 最小 的 m 值 为此 先对式 针对 m 求导 CT ＇ ＇ SHItnm 当 CT ＇ ＇ 即 SHItnm 时 CT ＇ 最小 此时 结合 结论 我们 给出 如下 定义 满足 tSHImnmn 且 最 接近 的 m 为 最佳 并行度 记为 pm 同时 定义 最佳 粒度 ptntpm 以图 为例 若 n 任务 粒度 相等 均 为 t 平均 调度 开销 SH 任务 起动 时间 ItDs 求得 最佳 并行度 为 事实上 通过 表 也 可以 看出 当 mtSHI 时 CT ＇ CT 当 m 时 CT ＇ 最小 表 并行度 与 TDG 的 执行 时间 mCT ＇ 　 　 　 以上 为了 简单 、 方便 起 见 假定 任务 粒度 和 通信 开销 均 相同 在 实际 应用 中 情况 不会 是 这样 但 当 并行任务 数较 多且 通信 开销 小于 任务 执行 开销 时 仍然 可以 近似 地 认为 通信 开销 均 相同 让 t 取 任务 的 平均 粒度 简单 地 定义 最佳 并行度 pm 总之 最佳 并行度 给出 了 调度 、 通信 开销 与 并行性 之间 的 一个 折衷 　 　 需要 说明 的 是 最佳 并行度 指出 了 在 任务 可以 并行执行 情况 下 “ 最好 的 ” 并行任务 个数 它 不能 决定 任务 并行执行 是否 一定 比 串行 好 这 也 解释 了 pm 的 计算公式 中 没有 出现 任务 通信量 的 原因 任务 的 合并 　 　 由于 特定 执行 环境 中 调度 和 通信 开销 的 存在 使得 任务 粒度 不能 太小 而 在 原来 的 LTG 中 常常 存在 大量 的 小 任务 因此 有 必要 进行 任务 的 合并 我们 的 任务 合并 包括 两步 先 在 同层 内 进行 横向 合并 然后 在 不同 层间 进行 纵向 合并 　 　 横向 合并 时 对 LTG 中 的 每 一层 判定 该层 任务 是否 存在 最佳 并行度 pm 若 存在 则 按 pm 进行 任务 的 合并 如果 可 申请 到 的 处理 节点 数 ap 小于 pm 则 按 ap 进行 任务 的 合并 合并 后 的 任务 粒度 应 尽量 趋于 一致 使得 该层 中 的 任务 并行执行 时间 最短 由于 任务 的 均匀 合并 是 一个 NP 问题 因此 我们 给出 一个 简单 的 经验 化 算法 如 算法 所示 该 算法 对 LTG 进行 操作 任意 节点 v 的 权为 cw 表示 v 的 执行 开销 任意 边 e 的 权为 csd 其中 c 表示 通信 内容 s 为 消息 源 d 为 消息 目的 　 　 纵向 合并 时 对 LTG 中 任一 节点 若 其 出度 为 并且 与 之 相 联系 的 后继 节点 入度 为 则 将 这 两个 节点 合并 成 一个 节点 　 　 这种 合并 方法 具有 简单 、 可伸缩性 好 的 优点 并且 不会 破坏 原有 的 LTG 结构 　 　 任务 合并 的 一个 极端 情况 是 整个 LTG 图 被 合并 成 一个 节点 这 代表 了 如下 一种 情况 虽然 在 串行 程序 中 存在 着 并行性 但 由于 可 并行任务 粒度 太小 使得 在 特定 执行 环境 下 并行执行 没有 意义 因此 本 系统 指示 其 依然 按照 串行 方式 执行 　 　 在 进行 任务 横向 合并 时 需要 知道 每个 任务 的 粒度 在 编译 时刻 进行 任务 粒度 分析 已 成为 目前 的 研究 热点 但是 决定 任务 大小 的 一些 参数 并 不 都 能 在 编译 时刻 确定 在 这种 情况 下 我们 只能 进行 保守 估计 保守 估计 的 不精确性 表现 在 将 一些 实际上 的 小 任务 估计 为 大 任务 这 在 一定 程度 上 影响 了 合并 后 的 任务 均衡性 我们 采用 的 补救措施 是 为 LTG 中 某 一层 提供 若干个 可能 的 合并 方案 当 系统 将要 执行 该层 任务 时 在 大部分 情况 下 关于 该层 的 任务 大小 信息 已经 明朗 了 系统 可以 较为 容易 地 选择 更加 合适 的 合并 结果 去 执行 处理 节点 预 分配 　 　 LTG 在 被 执行 时 所 需 申请 的 处理 节点 的 个数 由 LTG 中 “ 宽度 ” 最大 的 层 中 的 并行任务 确定 设为 pnum 可 使用 的 处理 节点 的 集合 记为 P 当 任务 vi 与其 某个 前导 任务 vij 分配 在 同一个 处理 节点 pkkpnum 上时 记为 pvijvipvijpk 其 通信 开销 将 减少 因此 在 调度 时应 使 每 一个 任务 尽量 分配 在 其 前导 任务 所 处 节点 之上 称为 任务分配 的 亲近 性 由于 一个 后继 任务 可能 有 若干个 前导 任务 一个 前导 任务 可能 有 若干个 后继 任务 因此 在 给 LTG 中 某 一层 的 所有 任务分配 处理 节点 时 就 存在 选择 与 竞争 两种 情况 设 合并 后 的 分层 任务 图 的 第 t 层有 k 个 任务 vvvkviik 位于 t 层 的 前导 任务 集 PSvivijjni 称为 最近 前导 任务 集 算法 用 一种 简单 的 方式 解决 t 层中 任务 的 处理 节点 预 分配 问题 对 LTG 中 各层 依次 采用 算法 进行 任务 的 处理 节点 预 分配 图为 LTG 的 一部分 abcd 这个 节点 的 分配 方案 如表 所示 图 　 LTG 的 一部分 表处理 节点 预 分配 表 排序 PSdd ＇ PSaa ＇ b ＇ PSca ＇ b ＇ c ＇ PSbb ＇ c ＇ d ＇ pd ＇ dPSaa ＇ b ＇ PSca ＇ b ＇ c ＇ PSbb ＇ c ＇ 重 排序 PSaa ＇ b ＇ PSbb ＇ c ＇ PSca ＇ b ＇ c ＇ pb ＇ aPSbc ＇ PSca ＇ c ＇ pc ＇ bPSca ＇ pa ＇ c 　 　 分层 调度 　 　 分层 调度 部分 可以 在 编译 后 端 程序运行 前 进行 但 我们 将 它 推迟 到 运行 时刻 这有 以下 几个 原因 一 开始 将 执行 条件 得不到 满足 的 任务调度 到 各个 处理 节点 上去 浪费 大量 的 存储空间 在 程序执行 过程 中 尽管 这些 任务 被 激活 时 发现 执行 条件 得不到 满足 会 立即 放弃 对 CPU 的 占用 但 进程 间 的 反复 切换 开销 不容忽视 尤其 在 任务 很多 的 情况 下 由于 很多 信息 都 在 预 调度 部分 计算出来 因此 分层 调度 本身 的 开销 很小 　 　 算法 LTG 中 任务 的 合并 　 　 ProcedureLTGmerge 　 　 　 　 　 　 foritom 　 　 　 　 　 　 　 　 　 　 　 t 第 i 层 所有 任务 执行 开销 之 和 ac 第 i 层 任务 数 tn 　 　 　 　 　 　 pm 　 　 　 　 　 　 rpminappm 　 　 　 　 　 　 atacrp 　 　 　 　 　 　 iftnrp 　 　 　 　 　 　 　 　 　 　 　 　 Q 第 i 层 所有 任务 按 执行 开销 c 的 降序 排列 　 　 　 　 　 　 　 　 　 　 　 　 Q ＇ Q 的 末尾 的 tnrp 个 元素 　 　 　 　 　 　 　 　 　 　 　 　 QQQ ＇ 　 　 　 　 　 　 　 　 　 　 　 　 doqQ 的 首 元素 　 　 　 　 　 　 　 　 　 　 　 　 ifwqatQQq 　 　 　 　 　 　 　 　 　 　 　 　 　 　 elsebreak 　 　 　 　 　 　 　 　 　 　 whileQnil 　 　 　 　 　 　 　 　 　 　 whileQ ＇ nil 　 　 　 　 　 　 　 　 　 　 　 　 q ＇ Q ＇ 的 首 元素 　 　 　 　 　 　 　 　 　 　 　 　 Q ＇ Q ＇ q ＇ 　 　 　 　 　 　 　 　 　 　 　 　 lqQ 的 尾 元素 　 　 　 　 　 　 　 　 　 　 　 　 lqmergelqq ＇ 　 　 　 　 　 　 　 　 　 　 　 　 ifwlqat 　 　 　 　 　 　 　 　 　 　 　 　 　 　 将 lq 插入 Q 使 Q 保持 执行 开销 c 的 降序 排列 　 　 　 　 　 　 　 　 　 　 　 　 　 Functionmergevv ＇ 　 　 for 每 一个 指向 v ＇ 的 边 ecsv ＇ 　 　 　 　 　 让 e 指向 v 　 　 　 　 　 修改 e 的 权为 ecsv 　 　 for 由 v ￠ 发出 的 边 ecv ＇ d 　 　 　 　 　 让 e 由 v 发出 　 　 　 　 　 修改 e 的 权为 ecvd 　 　 修改 v 的 权为 vcvcv ＇ 　 　 从 LTG 中 删除 v ＇ 　 　 returnv 　 　 我们 的 调度 模型 采用 集中式 模式 因为 集中 式调度 器 的 设计 较为简单 调度 器 每次 调度 LTG 的 一层 中 的 所有 任务调度 时刻 由 上 一层 中 最先 结束 的 任务 决定 在 节中 提到 我们 的 任务 是非 严格 的 这 一点 允许 后继 任务 在 前导 任务 结束 前 得到 调度 无论是 集中 式调度 还是 分布 式调度 都 存在 着 瓶颈 问题 但是 可以 通过 仔细 的 设计 来 消除 这种 瓶颈 任务 合并 和 分层 调度 的 结合 可以 较 好 地 消除 这种 瓶颈 其中 任务 合并 实现 了 负载平衡 而 分层 调度 大大 压缩 了 LTG 与 调度 器 的 通信 次数 事实上 如果 LTG 有 m 层则 LTG 只 需向 调度 器 发出 m 次 调度 请求 　 　 算法 同层 任务 处理 节点 预 分配 　 　 Procedureproallocatet 　 　 　 　 　 Qvvvk 按 最近 前导 任务 集 数目 增序 的 对列 　 　 　 　 PPt 层中 使用 的 所有 处理 节点 　 　 　 　 whileQnil 　 　 　 　 　 　 　 vQ 的 首 元素 　 　 　 　 　 　 　 QQv 　 　 　 　 　 　 　 IfPSvnil 　 　 　 　 　 　 　 　 　 　 Ifvj ∈ PSvv 与 vj 之间 的 通信 开销 最大 　 　 　 　 　 　 　 　 　 　 　 Pvjv 　 　 　 　 elsepP 中 的 一个 空闲 处理 节点 　 　 　 　 　 　 　 PPp 　 　 　 　 　 　 　 　 pv 　 　 　 　 forQ 的 每个 元素 v ＇ 　 　 　 　 　 　 ifvj ∈ PSv ＇ 　 　 　 　 　 　 PSv ＇ PSv ＇ vj 　 　 　 　 对 Q 中 元素 按 最近 前导 任务 集 数目 增序 排队 　 实例 研究 　 　 为了 测试 以上 调度 算法 的 性能 需要 较 多 的 处理 节点 由于 条件 所 限 我们 主要 采用 模拟 的 方法 我们 在 一台 RS 工作站 上用 个 进程 模拟 个 处理 节点 每个 进程 具有 相同 的 优先级 为了 使 它们 能够 分 得 相同 个数 的 时间 片当 一个 进程 “ 空闲 ” 时即 未 被 调度 器 赋予 计算 任务 时 也 让 其 处于 计算 状态 借助 PVM 来 完成 节点 之间 的 通信 通过 这种 方式 来 模拟 一个 同构 的 计算环境 在 该 环境 中 调度 一个 任务 的 平均 开销 为 ms 通信 启动 时间 为 ms 我们 设计 了 两组 实验 第组 用来 对 最佳 并行度 进行 测试 第组 对 整个 调度 算法 的 性能 进行 评估 　 　 实验 两个 NN 的 浮点 矩阵 AB 差乘 floatmatrixmultiply 简称 FMM 并行执行 时 的 任务 图 如图所示 表 ～ 分别 是 的 矩阵 差乘 结果 时间 以 μ s 为 单位 取次 执行 结果 的 平均值 以下 均 同图 　 FMM 任务 图表 FMM 并行任务 个数 串行 执行 时间 加速 比 理论 pm 实际 pm 　 表 FMM 并行任务 个数 串行 执行 时间 加速 比 理论 pm 实际 pm 　 表 FMM 并行任务 个数 串行 执行 时间 加速 比 理论 pm 实际 pm 　 表 FMM 并行任务 个数 串行 执行 时间 加速 比 理论 pm 实际 pm 　 　 　 从 以上 几组 实验 可以 看出 理论 pm 和 实际 pm 吻合 得 较 好 说明 最佳 并行度 能够 反映 并行性 与 调度 及 通信 开销 的 折衷 这 一点 从图 可以 清楚 地看 出来 图 　 并行任务 数 与 加速 比 的 关系 　 　 实验 为了 对 整个 算法 的 性能 进行 评估 我们 设计 了 塔形 任务 依赖图 如图所示 图中 每 一层 均 比 上 一层 多 两个 任务 相邻 两层 形成 一个 完全 二分 图 任务 的 粒度 控制 在 ～ ms 之间 任务 间 的 通信量 控制 在 ～ kbyte 之间 整个 任务 依赖图 包括 层 共计 个 任务 对 该 任务 图 的 一种 简单 调度 方法 SS 是 尽量 利用 可以 得到 的 资源 即 为 每 一个 可以 执行 的 任务分配 一个 处理 节点 由于 处理 节点 数 一个 节点 被 调度 器 占用 大于 最大 的 任务 宽度 故该 条件 能够 得到 满足 我们 针对 该 任务 图 做 了 组 实验 表 给出 了 组 实验 结果 每组 实验 将 基于 最佳 并行度 的 调度 方法 optimumdegreeparallelismbasedscheduling 简称 OPBS 与 上述 的 简单 调度 方法 SS 作 了 比较 表中 可用 p 表示 允许 使用 的 处理 节点 数 实用 p 表示 实际 使用 的 处理 节点 数均 不 包括 调度 节点 任务 的 串行 执行 时间 等于 该 任务 图中 任务 粒度 之 和 从表中 可以 看出 OPBS 方法 要 比 SS 方法 效率高 并且 可以 尽可能 地 节约 处理器 资源 附带 说明 一下 两种 调度 算法 的 加速 比随 处理 节点 个数 的 增多 提高 不 大 主要 是因为 任务 粒度 不 均匀 某 一层 任务 的 完成 时刻 常常 由 最大 粒度 任务 的 完成 时刻 所 制约 而 在 实验 中 由于 任务 较为 均匀 所以 在 一定 范围 内 加速 比随 处理 节点 个数 的 增多 而 提高 很快 图 　 塔形 任务 图 （ 前层 ） 表 塔形 任务 图 的 调度 结果 实验组 别 串行 执行 并行执行 可用 p 实用 p 执行 时间 加速 比 OPBSSSOPBSSSOPBSSS 　 　 结束语 　 　 本文 提出 的 基于 最佳 并行度 的 任务 依赖图 调度 算法 首先 确定 并行任务 的 最佳 并行度 通过 合并 算法 达到 同层 任务 粒度 的 均衡化 通过 处理 节点 的 预 分配 压缩 通信 开销 实现 在 尽量 压缩 调度 长度 的 情况 下 尽量 节约 系统资源 的 目的 实验 表明 在 存在 大量 的 并行 小 任务 的 情况 下 本文 的 调度 方案 实现 了 预定 目标 注释 ： 本文 研究 得到 国家 高科技 项目 基金 资助 。 作者简介 ： 杜 建成 ： 年生 ， 博士 ， 主要 研究 领域 为 并行 编译 　 　 　 　 　 黄皓 ： 年生 ， 副教授 ， 主要 研究 领域 为 网络 计算 　 　 　 　 　 陈道 蓄 ： 年生 ， 教授 ， 主要 研究 领域 为 并行计算 ， 分布式 处理 　 　 　 　 　 谢立 ： 年 ， 教授 ， 博士生 导师 ， 主要 研究 领域 为 并行计算 ， 分布式 处理 作者 单位 南京大学 计算机软件 新 技术 国家 重点 实验室 南京 　 　 　 　 　 南京大学 计算机科学 与 技术 系 南京 参考文献 GrahamRLLawlerELRinnooyKanAHGOptimizationandapproximationindeterministicsequencingandschedulingasurveyInAnnalsDiscreteMathematicsAmsterdamNetherlandsNorthHollandPublishingCompany ～ WangQChengKHListschedulingandparalleltasksInformationProcessingLetters ～ PandeSAgrawalDRMauneyJAscalableschedulingschemeforfunctionalparallelismondistributedmemorymultiprocessorsystemsIEEETransactionsonParallelandDistributedSystems ～ PolychronopodlosCDParallelProgrammingandCompilersBostonKluwerAcademicPublishersGroup ～ LiuYAGomezGAutomaticaccuratetimeboundanalysisforhighlevellanguagesTechnicalReportTRIndianaUniversity 收稿 日期 ： 修稿 日期 ：