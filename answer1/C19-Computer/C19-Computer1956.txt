微型机 与 应用 MICROCOMPUTERITSAPPLICATIONS 年 第卷 第期 VolNoJAVA 的 安全 结构 冀振燕 　 程虎 　 　 摘 　 要 ： Java 的 安全 结构 — — “ 沙盒 ” 模型 的 个 组成部分 ： 内 建于 Java 虚拟机 和 语言 的 安全 特性 、 类 的 载入 结构 、 类 文件 校验 器 、 安全 管理器 和 JAVAAPI 。 　 　 关键词 ： Java 语言 　 安全性 　 沙盒 结构 　 　 JAVA 的 安全 模型 不同于 传统 的 安全 方法 ， 传统 的 安全 方法 中 ， 大多数 操作系统 允许 应用程序 充分 访问 系统资源 ， 在 操作系统 不 提供 安全 保护 的 机器 里 ， 运行 环境 不能 被 信任 。 为了 弥补 这个 缺陷 ， 安全策略 经常 要求 在 应用程序 执行 之前 对 应用程序 建立 信任 ， 例如 要求 程序员 在 执行 从 网上 获得 的 应用程序 前 ， 先 检查 病毒 和 源代码 中 不 安全 的 代码 。 这种 方法 有个 问题 ： 确定 程序 是否 安全 的 检查 很 复杂 很 浪费时间 ， 很少 有 程序员 愿意 花 时间 读 程序 的 源代码 ， 然后 再 将 它 编译成 本地 机器码 以 保证 程序 是 安全 的 。 病毒 检查 要 不断 维护 以 保证 有效性 。 　 　 JAVA 的 安全 模型 是 不同 的 ， 为了 防止 用户 系统 受到 通过 网络 下载 的 不 安全 程序 的 破坏 ， JAVA 提供 了 个 自定义 的 可以 在 里面 运行 JAVA 程序 的 “ 沙盒 ” 。 JAVA 的 安全 模型 使得 JAVA 成为 适合 于 网络 环境 的 技术 。 JAVA 的 安全性 允许 用户 从 Internet 或 Intranet 上 引入 或 运行 applet ， applet 的 行动 被 限制 于 它 的 “ 沙盒 ” ， applet 可以 在 沙 盒里 做 任何 事情 ， 但 不能 读 或 修改 沙盒 外 的 任何 数据 ， 沙盒 可以 禁止 不 安全 程序 的 很多 活动 ， 如 ： 　 　 对 硬盘 进行 读写 。 　 　 和 别的 主机 不 包括 程序 所在 的 主机 进行 网络连接 。 　 　 创建 个 新 过程 。 　 　 载入 个 新 的 动态 库 并 直接 调用 本地 方法 。 　 　 “ 沙盒 ” 模型 的 思想 是 在 信任 的 环境中运行 不 信任 的 代码 ， 这样 即使 用户 不 小心 引入 了 不 安全 的 applet ， applet 也 不会 对系统 造成 破坏 。 　 “ 沙盒 ” 模型 　 　 “ 沙盒 ” 安全 模型 是 内 建于 JAVA 结构 的 ， 它 主要 由 以下 几 部分 构成 ： 　 　 内 建于 JAVA 虚拟机 和 语言 的 安全 特性 。 　 　 类 的 载入 结构 。 　 　 类 文件 校验 器 。 　 　 安全 管理器 和 JAVAAPI 。 　 　 下面 分别 进行 阐述 。 　 内 建于 JAVA 虚拟机 和 语言 的 安全 特性 　 　 JAVA 语言 有 一些 机制 使得 JAVA 程序 很 稳健 ， 这些 机制 也 是 JAVA 虚拟机 JVM 的 特点 ， 它们 是 ： 　 　 安全 的 类型转换 。 在 C 、 C 中 ， 可以 通过 指针 进行 任意 的 类型转换 ， 但 常常 带来 不 安全性 ， 而 在 JAVA 中 ， 运行 时 系统对 对象 的 处理 要 进行 类型 相容性 检查 ， 以 防止 不 安全 的 转换 。 　 　 没有 指针 。 指针 是 C 和 C 中 最 灵活 、 也 最 容易 产生 错误 的 数据类型 。 由 指针 所 进行 的 内存地址 操作 常会 造成 不可 预知 的 错误 ， 同时 通过 指 针对 某个 内存地址 进行 显示 类型转换 后 ， 可以 访问 个 C 中 的 私有 成员 ， 从而 破坏 安全性 ， 造成 系统 的 崩溃 。 而 JAVA 对 指针 进行 完全 的 控制 ， 程序员 不能 直接 进行 任何 指针 操作 。 　 　 自动 的 垃圾 收集 。 在 C 中 ， 程序员 通过 库函数 malloc 和 free 来 分配 和 释放 内存 ， C 中则 通过 运算符 new 和 delete 来 分配 和 释放 内存 。 再次 释放 已 释放 的 内存 块 或 未 被 分配 的 内存 块 ， 会 造成 系统 的 崩溃 ； 同样 ， 忘记 释放 不再 使用 的 内存 块 也 会 逐渐 耗尽 系统资源 。 而 在 JAVA 中 ， 所有 的 数据结构 都 是 对象 ， 通过 运算符 new 为 它们 分配内存 堆 。 通过 new 得到 对象 的 处理权 ， 而 实际 分配 给 对象 的 内存 可能 随 程序运行 而 改变 ， JAVA 对此 自动 进行 管理 并且 进行 垃圾 收集 ， 有效 地 防止 了 由于 程序员 的 误操作 而 导致 的 错误 ， 并且 更好 地 利用 了 系统资源 。 　 　 数组 界限 检查 。 若 程序 中有 数组 访问 ， JVM 就 会 检查 数组 访问 是否 越界 ， 从而 防止 了 由 数组 越界 引起 的 错误 。 　 　 检查 null 引用 。 若 使用 的 引用 为 null ， JVM 就 会 抛出 个 例外 。 　 类 载入器 结构 　 　 类 载入器 结构 在 沙盒 模型 中起 了 重要 作用 。 在 虚拟机 中 ， 类 载入器 负责 引入 、 定义 运行 程序 的 类 和 接口 的 二进制 数据 。 在 虚拟机 中 可能 有 不止 个类 载入器 。 　 　 个 JAVA 程序 能 使用 种 类型 的 类 载入器 ： 原始 的 类 载入器 和 类 载入器 对象 。 原始 的 类 载入器 是 JVM 实现 的 部分 ， 它 通常 从 本地 硬盘 载入 安全 的 类 ， 包括 JAVAAPI 的 类 。 运行 时 ， JAVA 应用 程序安装 类 载入器 对象 ， 类 载入器 对象 使用 JAVA 语言 编写 ， 编译成 类 文件 后 ， 载入 到 虚拟机 ， 像 其他 的 对象 一样 初始化 。 类 载入器 对象 用于 以 自定义 的 方式 载入 类 ， 例如 通过 网络 下载 类 文件 。 JVM 把 通过 原始 的 类 载入器 载入 的 任何 类 都 视为 安全 的 ， 无论 这个 类 是否是 JAVAAPI 的 部分 。 而 将 通过 类 载入器 对象 载入 的 类 视为 可 怀疑 的 ， 缺省 情况 下 视为 不 安全 的 。 　 　 JAVA 的 结构 可以 在 个 应用程序 中 创建 多个 命名 空间 ， 命名 空间 是 由个 特定 的 类 载入器 载入 的 类名 的 集合 。 JVM 为 每个 类 载入器 维持 个 命名 空间 ， 这个 命名 空间 里 有 由 那个 类 载入器 载入 的 所有 类 的 名字 。 由 不同 类 载入器 载入 的 类 在 不同 的 命名 空间 里 ， 没有 程序 的 直接 允许 ， 这些 类 不能 彼此 访问 。 编写程序 时 ， 可以 将 来源 不同 的 类 放在 不同 的 命名 空间 里 ， 用 这种 方式 ， 就 可以 使用 JAVA 的 类 载入器 结构 控制 来源 不同 的 代码 间 的 相互作用 ， 就 可以 防止 不 安全 代码 访问 、 破坏 安全 代码 。 对于 Applet ， 也 是 同样 的 道理 ， 通过 将 来源 不同 的 Applet 类 文件 放在 不同 的 命名 空间 ， 防止 不 安全 代码 破坏 安全 代码 。 　 　 在 “ 沙盒 ” 结构 中 ， 类 载入器 结构 是 防止 不 安全 代码 的 第一道 围墙 ， 它 的 作用 主要 有 方面 ： 　 　 防止 不 安全 代码 访问 、 破坏 安全 代码 。 　 　 防止 不 安全 代码 冒充 安全 的 类 。 　 　 这方面 作用 是 通过 下述 方法 实现 的 ： 　 　 将 代码 分 放在 多个 命名 空间 中 ， 并 在 不同 命名 空间 的 代码 之间 设置 “ 屏障 ” 。 类 载入器 结构 是 通过 命名 空间 来 防止 不 安全 代码 访问 、 破坏 安全 代码 。 命名 空间 在 载入 到 不同 命名 空间 中 的 类 之间 设置 了 个 “ 屏障 ” 。 在 JVM 中 ， 同一 命名 空间 中 的 类 可以 直接 相互作用 ， 不同 命名 空间 中 的 类 甚至 不能 检测 到 对方 的 存在 ， 除非 程序 允许 它们 相互作用 。 　 　 保护 可 信任 类库 像 JAVAAPI 的 边界 。 如果 类 载入器 载入 个类 ， 这个 类用 它 的 名字 来 冒充 是 JAVAAPI 的 部分 例如 ， 类 名为 javalangvirus ， 类 载入器 就 传递 请求 给 原始 类 载入器 ， 如果 原始 类 载入器 不能 载入 这个 类 ， 类 载入器 就 抛出 安全 例外 ， 并 拒绝 载入 这个 类 。 　 类 文件 校验 器 　 　 每 一个 JVM 都 有 个 类 文件 校验 器 ， 用来 保证 载入 的 类 文件 具有 正确 的 内部结构 。 如果 类 文件 校验 器 发现 类 文件 有 错误 ， 它 就 抛出 个 例外 。 　 　 类 文件 校验 器能 帮助 检查 出类 使用 起来 是否 安全 。 因为 类 文件 是 由 二进制 数据 构成 的 ， JVM 不 知道 这个 类 文件 是否是 由 黑客 产生 的 ， 是否 有 可能 破坏 虚拟机 的 完整性 ， 所以 虚拟机 对 引入 的 字节 码 进行 校验 是 很 重要 的 。 类 文件 校验 器 校验 的 过程 可以 分为 个 阶段 ： 阶段 发生 在 类 刚 载入 以后 ， 类 文件 校验 器 检查 类 文件 的 内部结构 ， 包括 校验 所含 的 字节 码 的 完整性 ； 阶段 发生 在 字节 码 执行 的 时候 ， 字节 码 校验 器 确定 符号 引用 的 类 、 域 和 方法 是否 存在 。 内部 检查 　 　 在 阶段 ， 类 文件 校验 器 检查 类 文件 是否 正确 组成 、 内部 是否 一致 、 是否 遵循 JAVA 编程语言 的 限制 、 含有 的 字节 码 是否 能 由 JVM 安全 执行 ， 如果 类 文件 校验 器 检查 出 错误 ， 它 就 会 抛出 个 错误 ， 类 文件 就 不再 被 程序 使用 。 　 　 检查 格式 和 内部 一致性 　 　 在 阶段 ， 校验 器 除了 检查 字节 码 的 完整性 ， 还要 检查 类 文件 的 格式 和 内部 一致性 。 例如 ， 每 一个 类 文件 都 必须 以 同样 的 字节 数字 xCAFEBASE 开头 ， 这样 类 文件 校验 器 可能 检查 的 第一件 事 就是 引入 的 文件 是否 以 xCAFEBASE 开头 。 　 　 类 文件 校验 器 还要 校验 类 文件 的 长度 是否 与 类 文件 中 所 记录 的 长度 一致 ， 也 即 校验 类 文件 是否 完整 ， 是否 被 截去 一部分 或者 被 添加 。 类 文件 校验 器 还要 检查 类 是否 遵循 Java 语言 的 规定 ， 如 除了 Object 类 ， 所有 的 类 都 必须 有个 父类 等 。 　 　 字节 码 校验 　 　 一旦 类 文件 校验 器 成功 地 完成 格式 和 内部 一致性 的 检查 ， 就 开始 对 字节 码 进行 校验 。 通过 对 代表 类 方法 的 字节 码流 进行 数据流 分析 ， 进行 操作码 是否 有效 及 操作码 是否 有 有效 的 操作数 等 的 检查 ， 以 验证 字节 码流 是否 可以 由 虚拟机 安全 执行 。 符号 引用 的 校验 　 　 符号 引用 是 给出 了 引用 项 的 名字 和 其它 信息 的 字符串 ， 这些 信息 足以 用来 区 分类 、 域 或 方法 。 符号 引用 的 校验 用来 验证 引用 是否 有效 ， 如果 引用 无效 例如 ， 如果 类 不能 载入 ， 或者 类 存在 但 不 含有 要 引用 的 域 或 方法 ， 类 文件 校验 器 就 会 抛出 个 错误 。 　 安全 管理器 和 JAVAAPI 　 　 安全 管理器 定义 了 “ 沙盒 ” 的 外部边界 。 安全 管理器 是 类 javalangSecurityManager 的 子类 ， 它 是 自定义 的 。 　 　 JAVAAPI 类 在 采取 一些 行动 时 ， 通常 需要 安全 管理器 检查 这个 行动 是否 安全 ， 这些 行动 包括 ： 　 　 接受 来自 于 特定 主机 的 socket 连接 。 　 　 修改 线程 改变 线程 优先级 ， 结束 线程 等 。 　 　 开放 对于 特定 主机 的 socket 连接 。 　 　 创建 个 新 的 类 载入器 。 　 　 删除 特定 的 文件 。 　 　 创建 新 的 过程 。 　 　 程序 退出 。 　 　 调用 含有 本地 方法 的 动态 库 。 　 　 等待 连接 。 　 　 从 特定 的 包 载入 类 。 　 　 给 特定 的 包中 添加 个 新类 。 　 　 访问 或 修改 系统 特性 。 　 　 访问 特定 的 系统 特性 。 　 　 读 文件 。 　 　 写 文件 。 　 　 由于 在 执行 上述 动作 前 需要 安全 管理器 进行 检查 ， JAVAAPI 不 执行 安全 管理器 建立 的 安全措施 所 禁止 的 任何 动作 。 　 　 JAVAAPI 执行 个 可能 不 安全 活动 的 过程 ， 通常 分为 步 ： 首先 ， JAVAAPI 代码 检查 安全 管理器 是否 已 安装 。 如果 没有 安装 ， 就 无法 进行 第步 的 检查 ， 则 直接 执行 可能 不 安全 的 代码 ； 如果 安装 了 ， 就 继续执行 第步 的 检查 ， 调用 安全 管理器 中 合适 的 检查 方法 对 动作 进行 检查 ， 如果 动作 被 禁止 ， 检查 方法 就 抛出 个 安全 例外 ， 不再 执行 不 安全 的 活动 ； 如果 动作 被 允许 ， 检查 方法 返回 ， JAVAAPI 方法 继续执行 动作 。 　 结束语 　 　 安全 的 可靠性 是 和 代价 成正比 的 ， 安全 的 可靠性 越高 ， 为 安全 付出 的 代价 也 越 高 ， 因此 安全 的 可靠性 也 并 不是 越高越 好 ， 应该 与 被 保护 的 信息 的 价值 相当 。 计算机 或 网络 的 安全策略 应该 是 多方面 的 ， 仅仅 有个 运行 下载 的 JAVA 代码 的 “ 沙盒 ” 是 不够 的 ， 还应 包括 人员 、 机器 等 本身 的 安全 ， 例如 机器 是否 设置 有 口令 、 雇员 是否是 商业间谍 等 。 但是 JAVA 安全 模型 的 好处 在于 一旦 建立 ， 就 可以 为 程序员 做 很多 事情 ， 程序员 不必 担心 程序 是否 安全 ， JAVA 的 安全 结构 已经 对 程序 是否 安全 进行 了 确定 ， 如果 代码 不 安全 ， 利用 “ 沙盒 ” 结构 就 可以 保护 信息 免受 破坏 。 作者 单位 ： 北京 中国科学院 软件 研究所 参考文献 　 　 JaworkskiJJavaDevelopersGuideSimonSchusterpublishinghouse 　 　 SunMicrosystemsJavaSecurity ， SunsSecuritywhitepaper 　 　 LiGJavaSecurityPresentandNearFutureIEEEMicro 　 　 王克宏 Java 虚拟机 规范 北京 ： 清华大学出版社 ， 　 　 邱仲 潘译 Java 从 入门 到 精通 北京 ： 电子 工业 出版社 ， 收稿 日期 ：