软件 学报 JOURNALOFSOFTWARE 年 第期 No 程序调试 、 监测 与 性能 分析 的 一体化 工具 刘 　 强 　 张兆庆 　 乔如良 　 　 摘要 　 随着 高性能 芯片 及 高性能 计算 的 应用 ， 人们 对 调试器 的 要求 不再 仅 局限于 “ 正确性 调试 ” ， 而是 更进一步 要求 进行 “ 性能 调试 ” ， 即 在 正确性 的 基础 上 ， 通过 对 程序 的 细调 而 获得最佳 性能 正确性 调试 和 性能 调试 通常 由 独立 的 工具 支持 ， 这种 模式 已 不能 很 好 地 支持 高性能 计算 介绍 了 一个 为 高性能 SIMD 芯片 设计 的 同时 具有 正确性 调试 和 性能 调试 功能 的 可视化 工具 它集 程序调试 、 行为 监测 和 性能 分析 为 一体 ， 改善 了 高性能 程序 的 开发周期 ， 为 高性能 计算 提供 了 强有力 的 支持 　 　 关键词 　 调试 性能 分析 行为 监测 事件 采集 断点 程序 插桩 　 　 中图法 分类号 　 TPAnIntegratedToolforDebuggingMonitoringandPerformanceAnalysisLIUQiangZHANGZhaoqingQIAORuliang 　 　 Abstract 　 Asthedevelopmentofhighperformancecomputingtherequirementfordebuggingisnotonlylimitedin “ correctnessdebugging ” butalsofor “ performancedebugging ” whichmeanstoachievethebestperformancethroughprogramtuningThecorrectnessdebuggingandtheperformancedebuggingareusuallysupportedbytheseparatetoolswhichcouldntsufficientlysupporthighperformancecomputingAvisualizationtoolispresentedinthispaperthatsupportsboth “ correctnessdebugging ” and “ performancedebugging ” forahighperformanceSIMDchipThistoolincorporatesthefunctionalityofdebuggingthebehaviormonitoringandtheperformanceanalyzingItgreatlyimprovesthedevelopmentcycleofhighperformancecomputingprogramming 　 　 Keywords 　 Debuggingperformanceanalysisbehaviormonitoringeventscollectingbreakpointprograminstrumentation 　 　 程序调试 是 程序开发 中 最 基本 的 活动 之一 当 算法 设计 好 之后 ， 程序员 往往 进入 编辑 → 编译 → 调试 的 开发周期 几乎 所有 的 开发 环境 中均 有 功能 完备 的 源码 级 调试器 的 支持 另一方面 ， 随着 高性能 计算 日益 走向 成熟 ， 对 高性能 计算 中 性能 分析 工具 的 研制 则 成为 近年来 的 一个 研究 热点 这是 显而易见 的 ： 若 高性能 计算 没有 性能 分析 作为 基础 是 不可 想像 的 性能 分析 通常 采用 了 基于 事件 的 方法 ， 即 静态 时 对 源程序 或 运行库 插桩 运行 时 采集 感兴趣 的 事件 运行 后 根据 事件 对 程序 进行 性能 分析 当 性能 分析 结果 不 满意 时 ， 则 进一步 修改 程序 ， 再次 进入 编辑 → 编译 → 调试 周期 基于 以上 调试 和 性能 分析 的 模型 ， 高性能 计算 领域 中 程序 的 开发周期 如图所示 图 　 具有 性能 分析 的 开发周期 　 　 与 传统 的 开发周期 相比 ， 性能 分析 已 成为 高性能 开发 环境 中 重要 的 一部分 目前 流行 的 高性能 计算 平台 如 PVMEXPRESS 均 支持 以上 开发周期 笔者 在 我国 大规模 并行 计算机 曙光 的 研制 中为 曙光 研制 了 性能 可视化 工具 ParaVision 其 机制 与 上述 类似 然而 在 对 ParaVision 的 试用 过程 中 却 暴露 了 如图所示 的 开发周期 存在 的 问题 ： 该 开发周期 将 正确性 调试 和 性能 调试 割裂 为 两个 阶段 、 两个 工具 ， 而 实际 开发 过程 中 以上 两个 阶段 往往 是 并发 、 交互进行 的 性能 分析 在 程序执行 之后 进行 ， 缺乏 交互性 、 实时性 ， 尤其 对 运行 时间 长 的 程序 ， 开发 效率 低 ， 开发周期 长 　 　 以上 开发周期 的 不足之处 使 我们 认识 到 将 程序调试 和 性能 分析 结合 在 一起 的 重要性 在 为 一个 高性能 SIMD 芯片 研制开发 环境 的 项目 中 ， 我们 将 以上 想法 付诸 实现 ， 其 结果 是 一个 集成 了 程序调试 、 行为 监测 和 性能 分析 为 一体化 的 工具 — — VisualIDPvisualizedintegrateddebuggerandperformanceanalysistool ， 简称 IDP 本文 介绍 VisualIDP 的 设计 实现 以及 它 对 高性能 程序开发 周期 的 全新 支持 　 目标 机 结构 和 开发 环境 　 　 目标 机是 高性能 的 单 指令流 、 多数据流 SIMD 处理器 ， 其 结构 如图所示 图 　 目标 机 体系结构 　 　 从 体系结构 的 角度看 ， 目标 机由 控制 处理机 CE ， 处理单元 阵列 PE ， 局部 存储器 LM ， 全局 存储器 GM 和 高速 DMA 通道 五 部分 组成 从 性能 的 角度 考虑 ， 为 使 处理机 处于 高性能 运转 状态 ， 应 着重于 以下 两点 ： 　 　 PE 阵列 计算 因为 PE 阵列 是 用于 计算 的 主要 动力 ， 因此 使 PE 阵列 始终 处于 忙 状态 有利于 达到最佳 性能 PE 阵列 的 计算 需要 等待 数据 从 GM 传输 到 LM 　 　 LMGM 间 的 DMA 通信 应 尽量减少 通信 开销 　 　 对 目标 机 的 开发 采用 了 主机 目标 机 模型 ， 如图所示 主机 为 PC 工作站 ， 主机 和 目标 机 之间 通过 串行口 进行 通信联系 用户 在 PC机 上 编写程序 ， 用 交叉 编译器 生成 目标 机 的 执行 代码 ， 通过 串行口 将 目标 码 装载 至 目标 机 GM 中 而 执行程序 VisualIDP 通过 串行口 与 目标 机 通信 ， 实现 对 SIMD 程序 的 远程 调试 和 监测 图 　 主机 － 目标 机 模型 　 IDP 的 结构 和 实现 　 　 IDP 集成 了 调试器 、 程序 监测 和 性能 分析 的 功能 ， 结构 相对 复杂 我们 在 设计 中 充分利用 了 面向对象 的 原则 ， 注重 模块化 、 层次化 和 封装 性图 给出 了 IDP 的 总体 结构图 　 IDP 的 总体 结构 ClientServer 模型 　 　 开发 环境 的 主机 目标 机 模型 导致 了 IDP 的 ClientServer 结构 Client 端 运行 在 主机 上 ， Server 端 运行 在 目标 机上 ， 二者 通过 串行 进行 通信 交互 　 　 IDPClientClient 接受 用户 输入 ， 通过 串行口 与 目标 机 通信 ， 以 完成 特定 的 调试 、 监测 任务 IDPClient 在结构上 可以 分为 以下 个 层次 的 功能模块 ： ① GUI ： 图形 用户 接口 ， 并 以 可视化 的 形式 显示 程序 行为 和 性能 数据 ② 功能 层 ： IDP 的 主体 ， 由 调试器 、 监测器 和 性能 分析器 组成 它 由 GUI 驱动 ， 并 将 其 功能 最终 分解 为 对 IDPClientAPI 的 调用 ③ IDPClientAPI ： IDP 客户端 应用 程序接口 ClientAPI 是 对 目标 机 的 封装 和 抽象 ， 其 具体 实现 是 通过 对 目标 机 发出请求 而 完成 ClientAPI 封装 了 远程 调试 的 细节 ， 功能 层 可以 不 考虑 是 在 本地 调试 还是 在 远程 调试 ， 这 对 整个 系统 的 模块化 有 重要 的 贡献 ClientAPI 是 相对 比较 原始 的 操作 ， 主要 功能 包括 ： 目标 程序控制 和 对 目标 机状态 的 存取 ④ 通信 层 ： 对 串口 的 封装 ， 命令 和 数据 的 传递 ， 采用 简单 的 发送 应答 协议 通信 层 的 设计 封闭 了 所有 串口 操作 的 细节 　 　 IDPServer 对 目标 机 的 一切 操作 集中 在 ClientAPI 上 ， 由于 主机 上 无法 直接 对 目标 机 操作 ， 因此 ClientAPI 的 功能 由 目标 机上 的 IDPServer 代理 实现 IDPServer 等待 来自 串口 的 服务 请求 ， 通过 对 目标 机 寄存器 和 内存 的 直接 操作 而 对外 来 请求 提供 服务 目标 机 监控器 　 　 目标 机 监控器 在 IDP 中起 着 重要 的 作用 它 监测 目标 机 程序 的 运行 状态 ， 同时 为 调试器 和 程序 监测器 提供 相应 的 信息 目标 机 监控器 主要 监控 以下 两类 事件 ： ① 程序调试 事件 它 是 由 断点 命中 、 单步 运行 等 调试 功能 引起 的 目标 程序运行 状态 的 改变 目标 机 监控器 将 该类 事件 发送给 调试器 ， 调试器 接受 到 事件 后 作出 相应 的 调试 动作 ② 程序 行为 事件 与 调试 事件 不同 ， 该类 事件 是 由 事件 收集器 发出 的 与 程序 行为 和 性能 有关 的 事件 目标 机 监控器 收到 该类 事件 后 ， 将 事件 放入 主机 中 的 事件队列 并 进一步 通知 程序 行为 监测器 程序 行为 监测器 读取 事件队列 ， 可视化 程序 的 行为 调试器 　 　 图 显示 了 调试器 的 组成 结构 以及 它 与 相邻 模块 的 关系 调试器 包括 个 层次 的 逻辑 模块 ： 调试信息 、 调试信息 API 和 调试器 核心 功能 一方面 调试器 接受 GUI 的 命令 ， 通过 对 ClientAPI 的 调用 而 完成 核心 功能 的 实现 另一方面 ， 调试器 接受 目标 机 监控器 的 消息 而 获得 目标程序 的 状态 鉴于 调试器 设计 已经 是 一门 成熟 的 技术 ， 我们 这里 重点 解释 远程 调试 的 实现 图 　 调试器 结构 及 和 相邻 模块 的 关系 　 　 与 调试 本地 机 程序 不同 ， IDP 需要 处理 远程 调试 调试 功能 的 实现 是 由 Client 端 和 Server 端 共同 协作 完成 我们 以 对 断点 的 处理 为例 ： 　 　 ab 　 　 → 　 　 ldra 　 　 → 　 　 DebugTrap 　 　 　 　 　 　 　 　 stbr 　 　 　 　 　 stbr 　 　 在 上例 中 ， 设置 断点 时 ， 我们 将 断点 处 指令 改为 DebugTrapDebugTrap 是 一条 非法 指令 ， 当 程序运行 到 断点 而 执行 DebugTrap 时 ， 控制 处理器 CE 产生 非法 指令 例外 非法 指令 例外 处理程序 通知 IDPServer 在 主机 上 ， 目标 机 监控器 通过 与 IDPServer 的 交互 而 检测 到 该 例外 的 发生 目标 机 监控器 将 该 事件 通知 调试器 而 使 调试器 获得 控制 以作 进一步 的 处理程序 监测 　 　 相对 于 调试器 而言 ， 程序 监测 是 IDP 的 另 一个 重要 方面 程序 监测 一方面 用于 可视化 程序 行为 ， 一方面 为 性能 分析器 提供数据 程序 监测 和 性能 分析 的 基础 在于 程序 事件 ［ ］ ， 围绕 着 程序 事件 ， 我们 要 解决 事件 类型 的 划分 、 事件 产生 、 事件 检测 、 事件 传递 、 事件 显示 和 事件 分析 各 方面 的 问题 事件 类型 参考 第节 描述 的 目标 机 的 性能 特点 IDP 应 监测 对 程序 的 行为 、 性能 有 影响 的 事件 表 IDP 所 监测 的 几种 主要 事件 类型 事件 类型 描述 主要 数据 事件 范畴 FUNCENTRY 进入 一个 函数 体时 戳 ， 函数 编码 结构 事件 FUNCEXIT 退出 一个 函数 体时 戳 ， 函数 编码 结构 事件 SIMDSTARTPE 计算 开始 时 戳 计算 事件 SIMDENDPE 计算 结束 时 戳 计算 事件 WAITSTART 目标 机 开始 等待 通信 时 戳 通信 事件 WAITEND 目标 机 结束 等待 通信 时 戳 通信 事件 DMASTARTDMA 开始运行 时 戳 ， 通信 方向 通信 事件 DMAENDDMA 结束 运行 时 戳 通信 事件 表中 的 事件 分为 以下 几个 范畴 ： 　 　 程序结构 事件 ： 监测 程序 的 流程 和 位置 ， 为 性能 数据 提供 源程序 所 对应 的 信息 　 　 程序 计算 事件 ： 监测 程序 的 串行 计算 和 并行计算 ， 用于 统计 程序 的 并行性 　 　 程序 通信 事件 ： 监测 DMA 的 通信 开销 ， 如 DMASTART 　 　 以上 事件 与 程序 的 行为 、 性能 紧密 相关 对 上述 事件 的 分析 ， 程序员 能够 跟踪 程序 热点 ， 发现 程序 性能 瓶颈 事件 的 产生 、 检测 和 传递 　 　 事件 的 产生 、 检测 和 传递 机制 三者 之间 紧密联系 而 成为 一个 整体 在 图 的 IDP 总体 结构 中 ， 自上而下 ， 它 由 目标程序 、 事件 检测器 、 IDPServer 、 IDPClientAPI 和 目标 机 监测器 协同 完成 　 　 对 事件 的 产生 机制 我们 采用 了 对 用户程序 和 运行库 插桩 Instrumentation 的 方法 有 更加 精致 的 方法 跟踪 程序 事件 ， 例如 采用 总线 窃听 ［ ］ 这种 技术 的 突出 优点 在于 有利于 减少 对 用户程序 的 干扰 ， 但 需要 硬件 支持 且 获得 的 数据 过于 原始 ， 不利于 抽象 由于 我们 受到 硬件 的 限制 而 采用 插桩 方法 ， 这 对 用户程序 有 一定 影响 ， 但 实践证明 此 方法 行之有效 简言之 ， 我们 通过 在 用户程序 和 运行库 中 插入 模块 GenEvent （ EventTypeEventData ） 而 实现 事件 产生 GenEvent 在 实现 上 为 宏 ， 以 达到 高效率 例如 ， 当 DMA 开始 通信 时 ， 以下 代码 产生 该 事件 ： 　 　 Q → TypeDMASTART 　 　 Q → TimeClock 　 　 Q 　 　 IfLengthQMAXEVENTNotifyIDPClient 　 　 在 以上 代码 中 ， Q 是 目标 机中 的 事件队列 我们 在 全局 内存 GM 中 保留 了 一块 内存 区域 用来 存放 事件队列 MAXEVENT 是 队列 中 能够 容纳 事件 的 最大 个数 考察 以上 代码 的 执行 效率 ： 以上 代码 翻译成 汇编语言 只有 条 机器指令 ， 而 对于 函数调用 NotifyIDPClient ， If 语句 的 条件 决定 了 每 产生 MAXEVENT 条 事件 才 调用 一次 该 函数 ， 当 MAXEVENT 较大 时 ， 产生 每条 事件 的 开销 会 非常 小 （ 几个 机器 周期 ） ， 从而 对 用户程序 的 影响 也 非常 小 　 　 进一步 考察 事件 传递 当 事件队列 满时 ， 事件 信息 需要 从 目标 机 传送 给 主机 这 由 Client 端 和 Server 端 配合 完成 在 目标 机上 ， 事件队列 满时 执行 函数调用 NotifyIDPClient ， 该 函数 机制 如下 ： 　 　 NotifyIDPClient 　 　 　 　 　 EventFlag 　 　 　 　 　 DebugTrap 　 　 　 　 NotifyIDPClient 只有 两条 指令 DebugTrap 指令 使 用户程序 导致 异常 而 暂停 ， 这 与 断点 机制 一样 不同 的 是 ， NotifyIDPClient 在 自我 暂停 之前 设置 EventFlag 标志 值 ， 在 主机 上 目标 机 监测器 根据 该值 而 区分 程序 行为 事件 和 调试 事件 图 给出 了 事件 传递 、 调试 和 目标 机 监控器 三者 之间 的 交互 关系 在 图 中 ， 调试 断点 和 事件 传递 的 DebugTrap 指令 均 使 目标 机 产生 例外 而 停止 目标 机 监测器 根据 EventFlag 的 值 而 判断 目标 机 程序 停止 的 原因 当 判断 程序 停止 是 由 事件 传递 产生 时 ， 则 将 事件 信息 从 目标 机 队列 读取 到 主机 的 事件队列 中 ， 并 复位 EventFlag ， 之后 使 目标程序 继续 运行图 　 事件 传输 、 调试 和 目标 机 监控器 三者 之间 的 关系 　 　 以上 介绍 了 事件 的 产生 和 传递 机制 目标 机和 主机 之间 的 精巧 配合 ， 使 我们 以 很 低 的 开销 和 复杂性 实现 了 这 一 任务 程序 监测器 　 　 程序 监测器 以 两种 方式 工作 ： 后台 方式 和 可视化 方式 在 后台 方式 下 ， 程序 监测器 简单 地 将 事件队列 转储 到 磁盘 文件 中以 用于 事后 分析 可视化 方式 下 ， 程序 监测器 将 程序 的 运行 状态 以 图形 可视 的 方式 显示 给 用户 性能 分析器 　 　 性能 分析器 通过 对 事件 序列 的 分析 而 获得 性能 数据 有 事件 采集 作为 坚实 的 基础 ， 性能 分析器 的 设计 就 相对 容易 了 文献 中有 大量 的 基于 事件 的 性能 分析方法 ， 这里 不再 深入 简言之 ， IDP 分析 以下 性能 数据 ： 目标程序 的 并行性 以及 目标程序 的 有效 计算 时间 目标程序 计算 与 DMA 通信 之间 的 并行 以及 DMA 通信 的 通信 情况 　 IDP 所 支持 的 开发周期 　 　 第节 中 给出 的 IDP 设计 和 功能 支持 图 所示 的 开发周期 与 图 所示 的 开发周期 相比 ， IDP 所 支持 的 开发周期 具有 以下 特点 ： ① 调试 周期 与 性能 分析 周期 合成 为 一个 ， 而 不是 两个 独立 的 部分 ② IDP 支持 用户 同时 进行 程序调试 、 程序 行为 监测 和 性能 分析 图 　 IDP 所 支持 的 开发周期 　 　 图 所示 的 开发周期 对 传统 的 开发周期 的 改进 正是 IDP 设计 的 初衷 从 用户 使用 的 角度 来看 ， 用户 可以 将 IDP 看作 一个 调试器 ， 在 调试 时 可以 监测 程序 行为 、 观察 程序 性能 ； 另一方面 ， 用户 也 可以 将 IDP 看作 一个 程序 性能 行为 监测器 ， 在 监测 程序 时 ， 可以 利用 调试器 的 强大 功能 如 看值 、 看栈 和 单步 等 IDP 的 这种 灵活性 有力 地 支持 了 用户程序 的 开发 　 结束语 　 　 IDP 是 近年来 我们 从事 高性能 计算 开发 环境 研究 工作 中 的 成果 IDP 集成 了 程序调试 、 程序 行为 监测 及 性能 分析 功能 ， 有效 地 支持 了 高性能 程序 的 开发 高性能 计算 需要 良好 的 开发 环境 的 支持 IDP 是 我们 在 这方面 的 探索 IDP 的 想法 和 设计 原则 可 适用 于 MPP 大规模 并行处理 系统 ， 从而 此 技术 可 推广 到 更为 广阔 的 领域 本文 研究 得到 国家 高科技 项目 基金 资助 作者 介绍 ： 刘强 年生 博士 主要 研究 领域 为 编译系统 及 环境 工具 　 　 　 　 　 张兆庆女 ， 年生 研究员 ， 博士生 导师 主要 研究 领域 为 编译系统 及 环境 工具 　 　 　 　 　 乔如良 年生 研究员 ， 主要 研究 领域 为 编译系统 本文 通讯联系 人 刘强 ， 北京 北京市 海淀区 知春路 号翠宫 饭店 BBT 公司 作者 单位 ： 刘 　 强 　 张兆庆 　 乔如良 　 中国科学院计算技术研究所 高性能 中心 　 北京 　 Emailqliubbticomcn 参考文献 　 ［ ］ WorleyPatrickHANewPICLTraceFileFormatOakRidgeNationalLaboratoryMathematicalSciencesSection 　 ［ ］ TSAIJeffreyJPMEMBERIEEEetalAnoninterferencemonitoringandreplaymechanismforrealtimesoftwaretestinganddebuggingIEEETransactionsonSoftwareEngineering 　 ［ ］ DoddPaulSRacishankarChinyaVMonitoringanddebuggingdistributedrealtimeprogramsSoftwarePracticeandExperience 本文 收到 原稿 收到 修改稿