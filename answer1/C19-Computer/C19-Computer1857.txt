微型机 与 应用 MICROCOMPUTERITSAPPLICATIONSVolNoPWindows 串行 通信 的 几种 方式 及 编程 杨磊 　 　 摘 　 要 ： 详细 介绍 Windows 平台 下 串行口 通信 的 种 方式 和 部分 程序代码 并 对 应用 场合 提出 建议 。 　 　 关键词 ： Windows 串行 通信 工业 监控 系统 　 　 目前 Windows 在 工业生产 监控 管理系统 中 已 成为 主流 平台 Windows 环境 下 的 上位 机与 下位 机 之间 的 串行 通信 是 设计 与 开发 监控 管理系统 和 集散 控制系统 的 重要 组成部分 。 Windows 通信 一般 都 以 WOSA （ WindowsOpenServicesArchitecture 即 Windows 开放式 服务体系 ） 模型 为 基础 在 此 模型 中 位于 上层 的 应用程序 通过 调用 各种 通信 API （ ApplicationProgrammingInterfaces 即 应用 程序接口 ） 与 位于 下层 的 设备 驱动程序 进行 数据交换 。 Windows 对 串行口 的 读写 也 不 例外 通过 调用 Win 的 串口 通信 API 函数 即可 编写 串行 通信 程序 。 　 　 表为 Win 与 位 Windows 下 的 串行 通信 函数 的 差别 。 表 串行 通信 函数 的 差别 　 打开 串口 关闭 串口 读 串口 写 串口 WinOpenCommCloseCommReadCommWriteCommWinCreateFileCloseHandleReadFileWriteFile 　 　 在 Win 环境 下 对 串口 的 读写 就 像是 对个 文件 进行 读写 只不过 此时 的 文件 句柄 指向 个 串口 。 另外 可 充分利用 Win 的 多任务 的 特点 编写出 强壮 性较 高 、 实时性 较 好 的 通信 程序 。 本文 并 不 涉及 对 串行口 的 设置 而 主要 讨论 Windows 平台 下 串行 通信 的 种 主要 方式 即 同步 方式 、 异步 方式 、 查询 方式 、 事件驱动 方式 。 种读 串口 方式 同步 方式 　 　 同步 方式 中读 串口 的 函数 试图 在 串口 的 接收缓冲区 中 读取 规定 数目 的 数据 直到 规定 数目 的 数据 全部 被 读出 或 设定 的 超时 时间 已到 时 才 返回 。 例如 　 　 … … 　 　 COMMTIMEOUTStimeOver 　 　 memset （ timeOversizeof （ timeOver ） ） 　 　 DWORDtimeMultipliertimeConstant 　 　 timeOverReadTotalTimeoutMultipliertimeMultiplier 　 　 timeOverReadTotalTimeoutConstanttimeConstant 　 　 SetCommTimeouts （ hComporttimeOver ） 　 　 … … 　 　 ReadFile （ hComportinBuffernWantReadnRealRead 　 　 　 　 NULL ） 　 　 … … 　 　 COMMTIMEOUTS 结构 用于 设置 超时 指定 读写 函数 的 等待时间 。 　 　 在 ReadFile 函数 中 hComport 为 待读 串口 句柄 inBuffer 为 输入 缓冲区 大小 nWantRead 为 每次 调用 ReadFile 时 函数 试图 读出 的 字节数 nRealRead 为 实际 读出 的 字节数 最后 一个 参数值 NULL 代表 ReadFile 将 采用 同步 文件 读写 方式 。 　 　 如果 所 规定 的 待 读取数据 的 数目 nWantRead 较大 且 设定 的 超时 时间 （ 计算公式 为 timeMultiplier ＊ nWantReadtimeConstant ） 也 较大 而 接受 缓冲区 中 数据 较少 则 可能 引起 线程 阻塞 。 解决 这一 问题 的 方法 是 检查 COMSTAT 结构 的 cbInQue 成员 （ COMSTAT 结构 存放 端口 状态 信息 可以 通过 调用 ClearCommError 函数 获取 其值 ） 该 成员 的 大小 即 为 接受 缓冲区 中 处于 等待 状态 的 数据 的 实际 个数 。 如果 令 nWantRead 等于 COMSTATcbInQue 就 能 较 好 地 防止 线程 阻塞 。 查询 方式 　 　 查询 方式 即个 进程 中 的 某 一线 程 定时 地 查询 串口 的 接收缓冲区 如果 缓冲区 中有 数据 就 读取数据 若 缓冲区 中 没有 数据 该 线程 将 继续执行 因此 会 占用 大量 的 CPU 时间 它 实际上 是 同步 方式 的 一种 派生 。 例如 　 　 … … 　 　 COMMTIMEOUTStimeOver 　 　 memset （ timeOversizeof （ timeOver ） ） 　 　 timeOverReadIntervalTimeoutMAXWORD 　 　 SetCommTimeouts （ hComporttimeOver ） 　 　 … … 　 　 ReadFile （ hComportinBuffernWantReadnRealRead 　 　 　 　 　 　 　 NULL ） 　 　 … … 　 　 除了 COMMTIMEOUTS 结构 的 变量 timeOver 的 设置 不同 查询 方式 与 同步 方式 在 程序代码 方面 很 类似 但 二者 的 工作 方式 却 差别 很大 。 尽管 ReadFile 采用 的 也 是 同步 文件 读写 方式 但 由于 timeOver 的 区间 超过 时间 设置 为 MAXWORD 所以 ReadFile 每次 将 读出 接收 队列 中 的 所有 处于 等待 状态 的 数据 次 最 多 可 读出 nWantRead 个 字节 的 数据 。 异步 方式 　 　 异步 方式 中 利用 Win 的 多线程 结构 可以 让 串口 的 读写操作 在 后台 进行 而 应用程序 的 其它 部分 在 前台 执行 。 例如 　 　 … … 　 　 OVERLAPPEDwrOverlapped 　 　 COMMTIMEOUTStimeOver 　 　 memset （ timeOversizeof （ timeOver ） ） 　 　 DWORDtimeMultipliertimeConstant 　 　 timeOverReadTotalTimeoutMultipliertimeMultiplier 　 　 timeOverReadTotalTimeoutConstanttimeConstant 　 　 SetCommTimeouts （ hComporttimeOver ） 　 　 wrOverlappedhEventCreateEvent （ NULLTRUEFALSE 　 　 　 　 　 　 　 　 　 　 　 　 NULL ） 　 　 … … 　 　 ReadFile （ hComportinBuffernWantReadnRealRead 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 wrOverlapped ） 　 　 GetOverlappedResult （ hComportwrOverlappednRe 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 alReadTRUE ） 　 　 … … 　 　 ResetEvent （ wrOverlappedhEvent ） 　 　 … … 　 　 wrOverlapped 是 个 OVERLAPPED 结构 变量 OVERLAPPED 结构 用于 指出 读写操作 与 其它 操作 的 重叠 。 为了 实现 线程 间 同步 与 通信 上面 的 代码 中用 CreateEvent 函数 产生 个 人工 复位 事件 并 将 其 句柄 赋予 wrOverlapped 的 hEvent 成员 。 这样 在 异步 读写 完成 时 Windows 发送 该 事件 信号 。 　 　 上面 代码 中 的 ReadFile 由于 采用 了 异步 方式 所以 它 只 返回 数据 是否 已 开始 读入 并 不 返回 实际 的 读入 数据 即 ReadFile 中 的 nRealRead 无效 。 实际 读入 的 数据 是 由 GetOverlappedResult 函数 返回 的 该 函数 的 最后 个 参数值 为 TRUE 表示 它 等待 异步 操作 结束 后 才 返回 到 应用程序 。 此时 GetOverlappedResult 函数 与 WaitForSingleObject 函数 等效 。 　 　 当 采用 异步 方式 时 在 用 CreateFile 打开 串口 设备 时 CreateFile 函数 的 第个 参数 即 fdwAttrsAndFlags 必须 为 FILEFLAGOVERLAPPED 。 在 Windows 中 只有 在 串行 设备 上 才 支持 异步 文件 读写 并且 GetOverlappedResult 函数 也 只 支持 串行 设备 或用 DeviceloControl 函数 打开 的 文件 。 事件驱动 方式 　 　 事件驱动 方式 通过 设置 事件 通知 当所 希望 的 事件 发生 时 Windows 发出 该 事件 已 发生 的 通知 这 与 DOS 环境 下 的 中断 方式 很 相似 。 例如 　 　 … … 　 　 COMSTATcomStat 　 　 DWORDdwEvent 　 　 SetCommMask （ hComportEVRXCHAR ） 　 　 … … 　 　 if （ WaitCommEvent （ hComportdwEventNULL ） ） 　 　 　 　 　 if （ （ dwEventEVRXCHAR ） comstatcbInQue ） 　 　 　 　 　 　 　 　 　 ReadFile （ hComportinBuffercomstatcbInQue 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 nRealReadNULL ） 　 　 　 　 　 … … 　 　 ｝ ｝ 　 　 … … 　 　 首先 用 SetCommMask 函数 设置 事件 掩码 上面 的 代码 中为 EVRXCHAR 表示 接收 到 个字符 时 触发 这一 事件 然后 调用 WaitCommEvent 函数 等待 该 事件 的 发生 。 注意 WaitCommEvent 函数 第个 参数 pOverlapped 可以 是 个 OVERLAPPED 结构 的 变量 指针 也 可以 是 NULL 。 当用 NULL 时 表示 该 函数 是 同步 的 否则 表示 该 函数 是 异步 的 。 写 串口 方式 　 　 以上 对 读 串口 的 种 操作 方式 进行 了 介绍 写 操作 与 此 类似 只不过 调用 的 是 WriteFile 函数 。 与 写 操作 相关 的 函数 还有 SetCommBreak 函数 用于 将 写 操作 挂起 ClearCommBreak 函数 用于 恢复 写 操作 TransmitCommChar 函数 用于 在 发送 输出 缓冲区 中 的 数据 之前 先 发送 个字符 。 种 方式 的 选择 　 　 在 编写 主控 计算机 与 PLC 及 智能仪表 的 串口 通信 程序 时应 根据 实际 情况 选择 串口 读写 方式 。 建议 尽量 不要 采用 同步 方式 因为 一般 主控 计算机 除了 对 串口 进行 读写 外 还要 处理 其它 任务 如 数据库 的 管理 、 组态 软件 的 运行 等 。 而 采用 同步 方式 可能 会 引起 线程 阻塞 从而 造成 系统 性能 下降 。 　 　 在 一般 控制 要求 情况 下 对 PLC 及 智能仪表 的 数据 写 操作 并 不 频繁 发生 只 在 进行 参数设置 时 发生 而 对 PLC 及 智能仪表 内部 数据 及 它们 采集 来 的 数据 需 及时 获得 。 由于 查询 方式 是 一种 最 直接 的 读 串口 方式 所以 建议 采用 查询 方式 。 但 定时 查询 存在 一个 致命 弱点 即 查询 是 定时 发生 的 可能 发生 得 过早 或 过 晚 。 在 数据 变化 较 快 的 情况 下 特别 是 主控 计算机 的 串口 通过 扩展 板 扩展 至 多个 时需 定时 地 对 所有 串口 轮流 查询 此时 容易 发生 数据 的 丢失 。 虽然 定时 间隔 越小 数据 的 实时性 越高 但 系统 的 资源 也 被 占去 越 多 。 　 　 Win 中 提出 文件 读写 的 异步 方式 主要 是 针对 文件 IO 相对 较慢 的 速度 而 进行 的 改进 它 利用 了 Win 的 多线程 结构 。 虽然 在 Windows 中 没有 实现 任何 对 文件 IO 的 异步 操作 但 它 却 能 对 串口 进行 异步 操作 。 采用 异步 方式 可以 提高 系统 的 整体 性能 在 对系统 强壮 性 要求 较 高 的 场合 建议 采用 这种 方式 。 　 　 事件驱动 方式 是 一种 高效 的 串口 读 方式 。 这种 方式 的 实时性 较 高 特别 是 对于 扩展 了 多个 串口 的 情况 并 不 要求 像 查询 方式 那样 定时 地 对 所有 串口 轮流 查询 而是 像 中断 方式 那样 只有 当 设定 的 事件 发生 时 应用程序 得到 Windows 操作系统 发出 的 消息 后 才 进行 相应 处理 避免 了 数据 丢失 。 在 实时性 要求 较 高 的 场合 建议 采用 这种 方式 。 结束语 　 　 以上 简略 介绍 了 Windows 环境 下 串口 读写 的 种 方式 并 给出 了 部分 代码 。 在 Windows 环境 下 对 串口 读写 还 涉及 其它 许多 步骤 如对 串口 和 通信 参数 的 设置 有关 内容 可 参阅 MSDN 的 相关 文档 。 杨磊 （ 上海大学 机电 学院 ） 参考文献 ， RichterJWindowsWindowsNT 高级 编程技术 北京 清华大学出版社 ， 米尔豪 Windows 通信 编程 北京 清华大学出版社 收稿 日期 ：