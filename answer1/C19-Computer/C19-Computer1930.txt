微型机 与 应用 MICROCOMPUTERITSAPPLICATIONS 　 Vol 　 No 　 PJava 和 JavaScript 在 WWW 信息 服务 中 的 应用 （ 二 ） 刘东波 摘要 ： JavaScript 、 Javaapplets 和 JavaBeans 在 WWW 应用 开发 中 的 作用 及其 相互 关系 。 关键词 ： Java 语言 JavaAppletJavaBeansJavaScriptWWW 接上 期用 JavaScript 和 JavaApplets 开发 WWW 应用 　 　 Java 和 JavaScript 在 开发 交互式 WWW 应用 时所起 的 作用 既有 差别 ， 又 互为补充 。 NetscapeNavigator 以及 更高 版本 的 Web 浏览器 提供 了 一种 称为 LiveConnect 的 方法 ， 用来 实现 JavaScript 与 Javaapplets 之间 的 通信 。 因此 ， 在 必要 时 可以 同时 采用 这 二种 语言 来 开发 高效 的 Web 应用 。 用 JavaScript 访问 Java 　 　 在 JavaScript 脚本 中 可以 直接 调用 Java 包中 的 Java 方法 。 例如 ： 　 　 ＜ SCRIPTLANGUAGE ＝ ″ JavaScript ″ ＞ 　 　 javalangSystemoutprintln ″ DisplayaStringinJavaConsole ″ 　 　 ＜ ／ SCRIPT ＞ 　 　 以上 JavaScript 脚本 执行 的 结果 是 在 Java 控制台 窗口 中 显示 字符串 “ DisplayaStringinJavaConsole ” 。 　 　 当然 还 可以 在 JavaScript 脚本 中 访问 Javaapplets 方法 和 变量 。 为此 ， 应 注意 以下几点 ： 　 　 声明 公共 类 、 方法 和 变量 ： 要 访问 Javaapplet 定义 的 方法 和 变量 ， 必须 通过 public 关键字 把 方法 、 变量 以及 它们 所在 的 类 都 声明 为 公共 的 。 　 　 在 CLASSPATH 环境变量 中 指明 Netscapejava ＿ version ： 要 使用 LiveConnect ， 必须 为 applet 提供 适当 的 LiveConnect 类 ， 这些 类 定义 在 java ＿ version 文件 里 ， 其中 version 指 的 是 所用 的 Navigator 版本号 。 例如 ， Navigator 对应 于 Java ＿ ， Navigator 对应 于 Java ＿ 。 　 　 首先 装载 applet ： 要 访问 个 Javaapplet 的 变量 和 方法 ， 必须 首先 完全 装载 applet 。 　 　 通过 applet 对象 访问 Javaapplet ： JavaScript 通过 它 的 applet 对象 来 访问 Java 变量 和 方法 。 applet 对象 有 NAME 属性 ， 但 没有 方法 和 事件 处理器 。 事实上 ， applet 对象 是 document 对象 的 属性 ， 可以 通过 名称 来 访问 不同 的 Javaapplet 。 用 JavaApplet 访问 JavaScript 　 　 LiveConnect 同样 提供 了 Javaapplet 访问 JavaScript 对象 和 函数 的 方法 。 为此 ， 应 注意 以下几点 。 　 　 使用 ＜ APPLET ＞ 标记 的 MYSCRIPT 属性 ： 要 使 Javaapplet 能够 访问 JavaScript 脚本 ， 必须 在 ＜ APPLET ＞ 标记 中 设置 MYSCRIPT 属性 。 假如 没有 指定 MYSCRIPT 属性 ， 当 Javaapplet 试图 访问 JavaScript 时会 产生 异常 ， 显示 错误信息 ， 并 停止 运行 。 　 　 将 netscapejavascript 包 导入 Javaapplet ： 要 使 Javaapplet 能够 访问 JavaScript 对象 和 函数 ， 必须 把 netscapejavascript 包中 的 JSObject 和 JSException 类 导入 Javaapplet 中 。 　 　 用 JSObject 类 的 getWindow （ ） 方法 创建 JavaScript 窗口 句柄 ： 要用 Javaapplet 访问 JavaScript 方法 和 函数 ， 必须 首先 取得 与 加载 当前 Javaapplet 窗口 相关联 的 JavaScriptWindow 对象 的 访问 权 ， 然后 才 可以 访问 Navigator 层次结构 中 创建 的 其它 对象 。 　 　 通过 JSObject 类 的 getMember （ ） 方法 访问 JavaScript 对象 ： JSObject 类 的 getMember （ ） 方法 用来 访问 作为 JSO － bject 对象 属性 的 对象 和 数值 。 该 方法 取 一个 String 类 变元 ， 表示 要 访问 的 对象 或 数值 。 例如 ， 下 面条 语句 分别 把 windowdocument ， windowdocumentform 和 windowdocumentformtext 对象 赋给 变量 doc 、 form 和 text 。 　 　 doc ＝ （ JSObject ） wingetMember （ ″ document ″ ） 　 　 form ＝ （ JSObject ） docgetMember （ ″ form ″ ） 　 　 text ＝ （ JSObject ） formgetMember （ ″ text ″ ） 　 　 注意 doc 、 form 和 text 必须 事先 声明 为 JSObject 类型 的 变量 。 　 　 而 语句 ： 　 　 textvalue ＝ （ String ） textgetMember （ ″ value ″ ） 则 把 HTML 文本框 中 的 值 赋 给 Java 的 textvalue 变量 。 　 　 通过 JSObject 类 的 eval （ ） 方法 访问 JavaScript 方法 ： JSObject 类 的 eval （ ） 方法 用来 调用 JavaScript 对象 的 方法 ， 并 将 该 方法 返回 的 值 提供 给 Java 变量 。 例如 ， 下面 的 语句 ： 　 　 wineval （ ″ alert （ ＼ ″ 这是 一个 从 Javaapplet 发出 的 警告 ！ ＼ ″ ） ″ ） 将 显示 个 警告 对话框 。 　 　 JSObject 类 还有 许多 其它 的 方法 ， 这里 不再 介绍 。 用 JavaBeans 开发 WWW 应用 　 　 JavaBeans 是 Java 语言 软件 组件 结构 的 规范 。 编写 JavaBeans 与 编写 一般 的 Java 对象 并 无多大 差别 。 事实上 ， 当 一个 Java 对象 的 所有 数据 域 都 是 私有 的 ， 并且 只能 通过 所谓 的 访问者 方法 进行 访问 时 ， 这个 Java 对象 就是 一个 JavaBean 。 　 　 从 编写 Java 对象 到 编写 JavaBeans 只有 一步之遥 。 通过 让 Java 和 JVM 自动 处理 复杂性 ， JavaBeans 组件 结构 的 设计 显得 非常简单 。 不过 ， JavaBeans 必须 支持 如下 功能 ： 属性 ： JavaBeans 的 属性 相当于 Java 对象 中 的 数据 域 ， 只是 JavaBeans 的 属性 必须 声明 为 私有 数据 域 ， 并且 必须 通过 称为 访问者 方法 的 特殊 公共 方法 进行 访问 。 访问者 方法 又 分为 获取 方法 和 设置 方法 ， 分别 用来 获取 和 设置 JavaBeans 的 属性 值 。 事件 ： JavaBeans 在 内部 使用 Java 事件 模型 ， 同时 也 使用 事件 与 其它 JavaBeans 或 应用程序 进行 通信 。 正是 通过 事件 进行 的 通信 ， 使得 用户 能够 把 相互 独立 的 JavaBeans 连接成 应用程序 。 内查 ： JavaBeans 的 内查 introspection 是 外部 对象 分析 JavaBeans ， 以 展示 其 属性 、 公共 方法 和 事件 的 功能 。 定制 ： 用户 可 通过 定制 功能 来 修改 JavaBeans 的 属性 。 可以 通过 属性 编辑器 修改 属性 ， 也 可以 直接 调用 设置 者 方法 修改 属性 。 　 持续性 ： JavaBeans 的 属性 值 通常 应该 保持 不变 。 只有 通过 定制 机制 显式 地 修改 了 属性 值时 才 发生 改变 。 　 　 编译 JavaBeans 与 编译 Java 类 的 方式 一样 ， 所 不同 的 是 ， 作为 JavaBean 的 字节 代码 及其 数据文件 需要 压缩 存储 在 个 JAR 文件 中 。 　 　 JavaSoft 支持 把 已经 编写 好 的 所有 Javaapplets 转换 为 JavaBeans 。 下面 以 第节 的 PicAppletjava 为 例来 说明 如何 把 一个 Javaapplet 转换 为 JavaBean 。 　 　 与 PicAppletjava 对应 的 JavaBean 源 程序清单 （ PicBeanjava ） 如下 ： 　 　 packageldbapplet ； 　 　 importjavaawtGraphics ； 　 　 importjavaawtImage ； 　 　 importjavanetURL ； publicclassPicBeanextendsjavaappletApplet ｛ 　 　 privateImageimagePic ； 　 　 publicvoidinit （ ） ｛ 　 　 　 try ｛ 　 　 　 URLurl ＝ newURL （ getCodeBase （ ） ， ″ ldb ／ applet ／ picturejpg ″ ） ； 　 　 　 imagePic ＝ getImage （ url ） ； 　 　 　 ｝ 　 　 catch （ Exceptione ） ｛ 　 　 　 ｝ 　 　 　 ｝ 　 　 publicvoidpaint （ Graphicsg ） ｛ 　 　 　 gdrawImage （ imagePic ， ， ， this ） ； 　 　 　 ｝ 　 ｝ 　 　 上述 源程序 经过 编译 即可 得到 字节 代码 PicBeanclass 。 而 PicBeanclass 要 和 图像文件 picturejpg 一起 打包 进到 个 JAR 文件 （ 如 picbeanjar ） 中 。 　 　 PicApplet 和 PicBean 除了 前者 是 JavaApplet ， 后者 是 JavaBean 以外 ， 还有 个 主要 差别 ： 首先 ， PicApplet 通过 简单 调用 Applet 类 的 getImage 方法 来 加载 图像 ， 而 PicBean 必须 设置 getImage 方法 的 参数 以便 在 JAR 中 读取 图像文件 ； 其次 ， PicApplet 缺少 设置 大小 的 方法 。 如 第节 的 picapplethtml 源代码 所示 ， applet 的 窗口 大小 在 显示 该 applet 的 HTML 代码 中 的 ＜ APPLET ＞ 标记 中 设置 。 　 　 用于 显示 PicBean 的 HTML 文档 picbeanhtml 也 要 作 相应 的 修改 。 　 　 ＜ HTML ＞ 　 　 ＜ HEAD ＞ 　 　 ＜ TITLE ＞ JavaBean ＜ ／ TITLE ＞ 　 　 ＜ ／ HEAD ＞ 　 　 ＜ BODY ＞ 　 　 ＜ APPLETCODE ＝ ″ ldbappletPicBeanclass ″ ARCHIVE ＝ 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 picbeanjar 　 　 WITH ＝ HEIGHT ＝ ＞ 　 　 ＜ ／ APPLET ＞ 　 　 ＜ ／ BODY ＞ 　 　 ＜ ／ HTML ＞ 结束语 　 　 仅仅 能 在 Java 与 JavaScript 之间 交互 是 不够 的 ， 应该 学会 在 什么 场合 选用 什么 工具 。 Java 通常 适用 于 以下 场合 ： 　 　 当 需要 进行 网络 访问 时 ， Java 可以 用 多种 协议 工作 ， 如 HTTP 、 FTP 等 。 JavaScript 在 这方面 受到 一些 限制 。 　 　 当 HTML 、 窗口 和 图像 映像 提供 的 交互 能力 不够 时 ， Java 可 用于 实现 编辑器 、 电子表格 、 动画 和 图形 操纵 等 工具 。 　 　 当 任务 中 的 算法 需要 一个 更为 完善 、 健壮 、 面向对象 的 编程 和 开发 环境 时 ， 选择 Java 是 明智 的 。 　 　 相比之下 ， JavaScript 更 适合 于 为 网页 元素 （ 如 Links 、 Forms 、 图像 等 ） 增加 交互性 。 由于 JavaScript 能够 直接 访问 HTML 文档 大部分 元素 的 对象 和 方法 ， 故 适用 于 以下 场合 ： 　 　 向 窗口 加入 客户端 的 交互性 。 因为 Java 不能 直接 和 FORM 等 网页 元素 进行 交互 ， 所以 无法 实现 窗口 验证 、 动态 更新 等 交互性 操作 。 而 这 恰恰 是 JavaScript 的 长处 。 　 　 快速 实现 简单 算法 。 由于 客户端 JavaScript 不 要求 完整 的 编码 、 编译 、 测试 、 调试 、 再 编译 的 开发周期 ， 用 它 来 实现 简单 算法 比较 容易 。 　 　 另外 ， 是否 把 所有 的 Javaapplets 都 转换 为 JavaBeans ， 这要 根据 具体情况 而定 。 不过 ， 转换 后 的 applets 只能 在 Java 兼容 的 浏览器 中 运行 。 笔者 认为 ， JavaBeans 是 今后 Java 程序设计 的 发展 方向 ， 新 的 浏览器 几乎 都 兼容 Java ， 假如 不 需要 花费 太 多 精力 ， 还是 把 applets 转换 为 JavaBeans 更好 。 — 全文完 — 刘东波 （ 中国 电子设备 系统工程 公司 研究所 ） 收稿 日期 ： － －