计算机 工程 ComputerEngineering 年 　 第卷 　 第期 　 Vol 　 No 　 WCSR 一个 弱 一致性 的 复制 数据库系统 李霖 　 周兴铭 摘 　 要 　 介绍 了 一个 弱 一致性 的 复制 数据库系统 WCSR 。 系统 支持 服务器 的 移动性 与 断接 ， 采用 ReadAnyWriteAny 复制 范型 ， 通过 周期 同步 方式 维护 系统 的 一致性 （ 并发 事务 的 Epsilin 可串性 ） ， 并且 支持 可变 一致性 的 事务处理 ， 因此 非常适合 移动 计算机 环境 。 关键词 　 移动 计算机 复制 弱 一致性 Epsilin 可串性 WCSR ： AWeaklyConsistentReplicatedDatabaseSystemLiLingZhouXinmin （ DeptofComputerNationalUnivofDefenceTechChangeAbstarctThispaperpresentsaweaklyconsistentreplicateddatabasesystemcalledWCSRWCSRsupportsmobileserveranditsdisconnectionprovidesReadAnyWriteAnyreplicationfordatabasesandmaintainscomsistencyEpsilonserializabilitybyperiodicpairwisesynchronizationWCSRcanalsosupportvariableconsistencytransactionprocessingFinallywearguethatWCSRissuitableformobilecomputingenvironmentsKeywordsMobilecomputingReplicationWeakconsistencyEpsilonserializabilitys 　 　 数据 复制 是 指 在 多个 结点 上 维护 数据库 的 备份 ， 其 主要 目的 是 提高 分布式 数据库系统 的 可用性 、 可靠性 或 访问 性能 。 在 移动 计算环境 中 ， 可 移动 的 数据库 服务器 可能 与 其它 服务器 暂时 断接 ， 而 严格 一致性 复制 协议 不能 有效 地 支持 这种 需求 ； 另一方面 ， 与 可用性 相比 ， 许多 应用 宁可 放弃 严格 的 一致性 。 因此 ， 针对 移动 计算环境 ， 我们 设计 了 一个 弱 一致性 复制 数据库系统 ， 称作 WCSR 。 WCSR 系统 的 主要 设计 目标 为 ： 支持 服务器 的 移动性 与 暂时 断接 ； 采用 ReadAnyWriteAny 复制 机制 ； 保证 整个 系统 的 彻底 收敛性 ； 维护 并发 事务 的 Epsilon 可串性 ； 支持 用户 事务 的 弱 一致性 与 可变 一致性 等 。 　 WCSR 系统 概述 　 　 WCSR 系统 采用 关系 数据模型 。 所有 复制 服务器 的 总和 构成 一个 复制 集合 ， 其中 每 一个 复制 服务器 S 都 拥有 一个 全局 唯一 的 标识符 ， 记作 Sid 。 每个 复制 服务器 都 可以 与 其他 任意 服务器 直接 通信 。 假设 网络通信 是 面向 连接 的 ， 那么 消息传递 保持 正确 的 次序 。 WCSR 服务器 可以 建立 在 移动 计算机 上 ， 因此 可能 与 其他 服务器 暂时 断接 。 　 　 用户 对 复制 服务器 的 访问 以 事务 为 基本 单位 。 事务 由 一系列 读写操作 组成 。 我们 把 只 含有 读 操作 的 事务 称作 查询 事务 只读 事务 ， 含有 写 操作 的 事务 称作 更新 事务 。 服务器 保留 更新 事务 的 Undo 与 Redo 日志 ， 因此 可以 回滚 或 重 做 已 完成 的 更新 事务 。 　 　 WCSR 系统 采用 ReadAnyWriteAny 的 弱 一致性 复制 策略 ， 即 每个 复制 服务器 都 支持 查询 与 更新 操作 ， 并且 允许 各个 复制 之间 存在 暂时 的 不 一致 。 因此 ， 一个 用户 在 访问 数据库 时 ， 只 需要 访问 一个 复制 服务器 即可 。 复制 服务器 接到 一个 查询 事务 之后 ， 根据 本地 数据库 的 状态 返回 查询 结果 ； 对于 更新 事务 ， 服务器 则 将 其 记入 暂时 事务 日志 中 ， 在 本地 数据库 上 执行 ， 并 立即 返回 给 用户 其 标识符 和 结果 ， 用户 不必 等待 服务器 将 该 事务 的 结果 传递 给 其他 复制 服务器 ， 因此 具有 较 短 的 响应 时间 。 　 WCSR 系统 复制 一致性 的 维护 　 　 在 WCSR 系统 中 ， 用户 对 复制 数据库 的 更新 均 以 事务 为 基本 单位 。 因此 ， 维护 WCSR 系统 的 一致性 ， 实际上 就是 维护 不同 服务器 上 并发 更新 事务 之间 的 一致性 。 　 WCSR 服务器 的 事务处理 　 　 由于 WCSR 系统 中 查询 事务 的 执行 不 影响 复制 数据库 之间 的 一致性 ， 因此 我们 在 后面 的 讨论 中 忽略 查询 事务 的 存在 ； 如 无 特殊 说明 ， 文中 提到 的 事务 均 指 更新 事务 。 　 　 WCSR 系统 允许 任意 一个 复制 服务器 单独 接收 并 执行 更新 事务 ， 并 在 随后 的 时间 里 将 其 传播 给 其他 的 服务器 ， 这时 不同 服务器 上 的 事务 之间 可能 会 因为 发生冲突 而 使 某些 事务 的 结果 被 取消 Undo 。 因此 ， 与 严格 一致性 复制 系统 不同 ， WCSR 中 事务 的 执行 结果 是 暂时性 的 ， 即 暂未 永久化 ， 我们 把 这些 事务 称作 暂时 事务 ， 而 把 永久化 的 事务 称作 已 提交 事务 。 相应 地 ， 数据库 中 每个 记录 都 包含 两个 版本 ： 提交 版本 与 暂时 版本 。 提交 版本 反映 了 所有 已 提交 事务 执行 的 最新 结果 ， 而 暂时 版本 则 是 本地 所有 暂时 事务 执行 的 最新 结果 。 　 　 WCSR 系统 采用 基于 时间 戳 的 并发 事务 控制技术 ： 每个 服务器 维护 一个 本地 逻辑 时钟 各个 服务器 逻辑 时钟 之间 的 同步 采用 Lamport 分布 时钟 同步 算法 来 维护 。 当 服务器 S 接到 一个 更新 事务 t 时 ， S 根据 本地 逻辑 时钟 为 t 指定 一个 时间 戳 ts ， 并 更新 逻辑 时钟 ， 然后 将 事务 t 记入 本地 暂时 事务 日志 TTL 中 。 最后 ， 服务器 S 将 t 的 执行 结果 记录 到 本地 复制 数据库 的 暂时 版本 中 。 　 　 设 首先 接收 事务 t 的 服务器 称作 t 的 始发 服务器 的 标识符 为 tsid ， 定义 t 在 WCSR 系统 中 全局 唯一 的 事务 标识符 为 tidttstsid 。 WCSR 系统 按照 事务 id 对 所有 暂时 事务 进行 排序 。 任意 两个 暂时 事务 t 与 t 标识符 之间 的 序 关系 定义 如下 ： 　 　 WCSR 服务器 的 暂时 事务 日志 TTL 记录 了 所有 本地 服务器 已知 的 暂时 事务 ， 这 其中 不仅 包括 用户 直接 发给 本地 服务器 的 事务 ， 还 包括 从 其他 复制 服务器 上 传播 过来 的 暂时 事务 。 日志 中 的 所有 暂时 事务 都 按照 事务 id 的 次序 排列 。 　 WCSR 系统 的 成 对 同步 过程 　 　 WCSR 系统 采用 周期性 的 成 对 同步 方式 来 完成 暂时 事务 的 传播 和 不同 复制 服务器之间 的 同步 ， 即 ： 每个 同步 周期 内 ， 服务器 随机 地 选择 另 一个 服务器进行 同步 ， 互相交换 未知 的 暂时 事务 ， 使 两者 的 数据库 状态 达成 一致 。 这种 成 对 同步 方法 已经 在 一些 弱 一致性 复制 系统 中 得到 应用 如 Bayou 系统 ， 其 优点 是 ： 网络 开销 较 低 ； 可靠性 高 ， 即使 发生 网络故障 ， 在 故障 恢复 后 同步 过程 将 继续 把 未知 的 事务 传送 给 其它 服务器 。 　 　 WCSR 系统 中 的 服务器 在 成 对 同步 过程 中 ， 总是 按照 事务 id 即 tssid 的 次序 向 另 一个 服务器发送 本地 的 暂时 事务 日志 ； 接收 服务器 则 将 收到 的 暂时 事务 日志 与 本地 暂时 事务 日志 合并 ， 并 重新 按照 事务 id 的 次序 排列 。 根据 暂时 事务 传送 的 这种 有序性 ， 每个 服务器 维护 一个 时间 戳 向量 NTSV ， 用于 记录 本地 暂时 事务 日志 中 已知 的 始发 于 各个 复制 服务器 的 暂时 事务 的 最新 时间 戳 。 这样 ， 在 成 对 同步 过程 中 ， 通过 比较 两个 服务器 的 NTSV 向量 ， 一个 服务器 可以 只 向 另 一个 服务器 传送 其 未知 的 暂时 事务 ， 而 不必 传送 整个 暂时 事务 日志 ， 大大 节约 了 网络 开销 。 　 　 成 对 同步 中 的 接收 服务器 接到 新 的 暂时 事务 之后 ， 将 接收 到 的 每个 暂时 事务 t 插入 到 本地 暂时 事务 日志 TTL 中 ， 同时 根据 t 的 标识符 tssid 更新 本地 的 NTSV 向量 。 由于 这些 暂时 事务 的 时间 戳 可能 与 本地 TTL 中 的 原有 暂时 事务 发生 交叉 ， 因此 接收 服务器 需要 回滚排 在 新 事务 之后 的 暂时 事务 ， 并 在 新 事务 插入 TTL 完毕 之后 按照 新 的 次序 重新 执行 暂时 事务 ， 得到 更新 的 数据库 暂时 版本 。 最后 ， 服务器 还要 根据 新 得到 的 事务 时间 戳 判断 是否 需要 调整 本地 的 逻辑 时钟 。 　 　 WCSR 成对 同步 过程 中 的 事务 日志 传递 是 一种 单向 的 渐进式 过程 ， 它 只 需 传送 对方 未知 的 事务 日志 部分 ， 因此 对 可能 发生 的 网络故障 具有 很 好 的 容错性 。 　 成 对 同步 过程 中 的 事务 冲突 　 　 服务器 在 接收 其它 服务器 传播 来 的 更新 事务 日志 时 ， 需要 回滚 并重 做 本地 的 部分 暂时 事务 。 由于 不同 服务器 始发 的 暂时 事务 之间 的 并发 性 ， 这些 重做 事务 可能 与 其它 事务 产生 冲突 ， 此时 系统 必须 选择 夭折 某个 事务 以 消解 冲突 。 　 　 为了 降低 暂时 事务 重做 时 的 夭折 率 ， WCSR 系统 采用 一种 基于 应用 语义 的 冲突检测 与 消解 方法 。 该 方法 允许 应用程序 指定 暂时 事务 的 冲突 条件 以及 发生冲突 后 的 消解 方法 ， 因此 能够 大大 改善 事务 重做 时 的 成功率 。 由于 篇幅 所 限 ， 我们 将 在 其它 专题论文 中 详细 介绍 WCSR 系统 中 基于 应用 语义 的 事务 冲突检测 与 消解 方法 。 　 WCSR 并发 事务 的 Epsilon 可串性 　 　 严格 一致性 复制 系统 中 的 并发 事务 满足 单 拷贝 可串性 SR 准则 ， 而 对于 采用 弱 一致性 复制 协议 的 WCSR 系统 ， 其 并发 事务 的 执行 不能 用 SR 描述 。 为此 我们 借鉴 CaltonPu 等 针对 弱 一致性 复制 系统 提出 的 Epsilon 可串性 的 概念 ， 作为 WCSR 并发 事务 的 执行 准则 。 下面 我们 简单 介绍 一下 Epsilon 可串性 的 概念 。 　 　 Epsilon 可串性 Epsilonserializability ， 简称 ESR 准则 允许 复制 系统 采用 异步 的 方式 维护 各个 复制 结点 间 的 一致性 即弱 一致性 。 支持 ESR 准则 的 分布式 复制 系统 允许 在 不同 的 复制 结点 之间 存在 暂时 的 和 有限 的 差别 ， 但是 在 所有 更新 事务 传播 到 每个 复制 结点 之后 ， 所有 复制 结点 的 状态 将 收敛 于 SR 的 一致 状态 。 　 　 并发 事务 执行 时 产生 的 数据 操作 序列 称作 这些 事务 的 一个 执行 调度 schedule 。 如果 一个 执行 调度 中 的 操作 序列 都 是 由 顺序 执行 的 事务 构成 ， 即 不 含有 交叉 的 现象 ， 则 称 该 调度 是 一个 串行 serial 调度 。 对于 一个 包含 查询 事务 和 更新 事务 的 执行 调度 s ， 如果 从 该 调度 中 删除 所有 查询 事务 的 操作 之后 ， 剩下 由 更新 事务 操作 组成 的 执行 调度 s 是 一个 串行 调度 ， 则 称 s 是 一个 Epsilon 串行 调度 。 如果 一个 执行 调度 的 执行 结果 等价 于 一个 Epsilon 串行 调度 ， 则 称 该 调度 是 Epsilon 可串 serializable 的 ， 即 ESR 调度 。 　 　 ESR 调度 允许 查询 事务 与 其它 更新 事务 的 执行 任意 交叉 ， 因此 查询 事务 可能 会 访问 到 不 一致 的 数据 。 但是 ， 因为 查询 事务 并 不 改变 数据库 的 状态 ， 所以 ESR 调度 仍然 能够 保证 维护 复制 数据库 的 一致性 。 　 　 WCSR 是 一个 弱 一致性 复制 系统 ， 它 允许 各个 复制 服务器 上 数据库 的 状态 存在 暂时 的 不 一致 。 但是 ， 通过 周期性 的 成 对 同步 过程 ， WCSR 系统 总是 致力于 消除 不同 服务器之间 的 不一致性 ， 使 整个 复制 系统 收敛 于 一致 的 状态 。 同样 ， 在 各个 服务器 上 执行 的 并发 更新 事务 也 将 收敛 于 一个 串行 的 调度 序列 。 可以 证明 证明 过程 略 ， 在 没有 新 的 更新 事务 产生 时 ， WCSR 复制 系统 中 的 所有 服务器 上 的 数据库 状态 将 最终 收敛 于 一致 状态 ， 并且 所有 服务器 始发 的 并发 事务 之间 满足 Epsilon 可串性 。 暂时 事务 的 永久化 　 　 在 上述 讨论 中 ， 我们 假定 事务 的 执行 都 是 暂时 的 ， 即 事务 结果 尚未 永久化 ， 可能 在 成 对 同步 过程 中回 滚 与 重 做 。 而 事务处理 的 最终 目的 是 使 事务 的 结果 永久化 ， 因此 这些 暂时 事务 需要 在 适当 的 时候 永久化 ， 转变 为 真正 的 已 提交 事务 。 WCSR 系统 可以 采用 两种 暂时 事务 永久化 即 提交 算法 ， 它们 分别 是 自然 收敛 NaturalConverge 简称 NC 提交 算法 和 主 服务器 PrimaryServer ， 简称 PS 提交 算法 。 这 两种 算法 各有 优缺点 ， 因而 适用 于 不同 的 环境 。 限于 篇幅 ， 本文 只 简单 介绍 一下 主 服务器 提交 算法 。 　 主 服务器 提交 算法 　 　 主 服务器 提交 算法 在 WCSR 系统 中 指定 一个 服务器 作为 主 服务器 ， 由主 服务器 负责 提交 所有 暂时 事务 。 具体地说 ， 当主 服务器 PS 在 与 某个 服务器 成 对 同步 之后 ， 由 PS 将 接收 到 的 暂时 事务 按照 id 的 次序 提交 ， 同时 给 每个 已 提交 事务 分配 一个 单调 递增 的 提交 序列号 记作 csn 。 随后 ， 这些 已 提交 事务 将 和 暂时 事务 一样 ， 在 成 对 同步 过程 中 传播 给 其它 的 服务器 。 除了 负责 提交 暂时 事务 之外 ， 主 服务器 与 其它 服务器 的 功能 完全相同 。 　 　 由于 WCSR 系统 中 始发 于 某 一个 服务器 的 暂时 事务 总是 按照 id 的 顺序 传播 到 其它 服务器 ， 主 服务器 也 不 例外 ， 因此 在 主 服务器 提交 算法 中 ， 对于 始发 于 同一个 服务器 的 暂时 事务 ， 其 提交 次序 完全 是 按 事务 id 排序 的 。 但是 ， 主 服务器 提交 算法 并 不 保证 所有 事务 的 提交 顺序 等同于 事务 id 的 次序 ： 始发 于 不同 服务器 的 事务 提交 次序 完全 取决于 这些 事务 通过 成 对 同步 过程 到达 主 服务器 的 顺序 ， 因此 某些 事务 的 提交 可能 会落 在 始发 于 其它 服务器 而 id 更大 的 事务 之后 。 为了 确保 复制 系统 的 最终 一致性 ， 主 服务器 提交 算法 必须 保证 在 每个 服务器 上 已 提交 事务 执行 的 次序 都 是 一样 的 ， 为此 需要 对 WCSR 系统 中 事务 日志 的 组织 以及 成 对 同步 过程 加以 修改 。 　 　 在 采用 主 服务器 提交 算法 的 WCSR 系统 中 ， 服务器 的 事务 日志 由 两个 部分 组成 ， 即 已 提交 事务 部分 和 暂时 事务 部分 。 由于 已 提交 事务 的 结果 已经 永久化 ， 因此 其 执行 次序 以及 结果 不会 再 发生变化 ， 而 暂时 事务 部分 却 可能 在 稍后 的 成 对 同步 中回 滚 、 重排 与 重 做 ， 所以 在 事务 日志 中 ， 所有 已 提交 事务 必须 排列 在 任意 暂时 事务 之前 。 但是 ， 主 服务器 提交 算法 中 事务 的 提交 次序 不同于 事务 id 的 次序 ， 因此 我们 改为 根据 csnid 的 次序 对 事务 日志 排序 ， 并 将 暂时 事务 的 csn 设为 无穷大 。 事务 的 csnid 次序 关系 定义 为 ： 　 　 于是 ， 服务器之间 的 成 对 同步 过程 不仅 要 交换 未知 的 暂时 事务 ， 还 需要 交换 未知 的 已 提交 事务 。 与 暂时 事务 类似 ， 为了 在 同步 过程 中 判断 哪些 已 提交 事务 是 对方 未知 的 ， 每个 服务器 S 都 要 维护 一个 变量 SLCSN ， 即 S 的 事务 日志 中 已 提交 事务 csn 的 最大值 ， 用以 表示 S 已知 的 已 提交 事务 部分 。 　 　 容易 证明 ， 虽然 主 服务器 提交 算法 不 保证 事务 提交 的 顺序 等同于 事务 id 的 顺序 ， 但 在 使用 主 服务器 提交 算法 的 WCSR 系统 中 ， 每个 服务器 上 的 事务 提交 顺序 仍然 是 一致 的 ， 因此 其 并发 事务 的 执行 仍 是 满足 Epsilon 可串性 的 。 　 可变 一致性 事务 　 　 WCSR 系统 主要 面对 的 是 强调 可用性 的 弱 一致性 应用 。 但是 ， 即使 是 弱 一致性 应用 也 可能 在 必要 的 时候 要求 严格 的 一致性 ， 即 一个 更新 事务 发给 服务器 之后 要求 立即 提交 ， 而且 其 结果 也 立即 永久化 ， 不会 再 发生 回滚 与 重 做 的 现象 。 　 　 在 WCSR 系统 中 ， 我们 把 需要 立即 提交 的 更新 事务 称作 强 事务 StrictTransaction ， 简称 ST ， 相应 地 ， 把 前面 讨论 的 一般 更新 事务 称作 弱 事务 WeakTransaction ， 简称 WT 。 为 保持 叙述 的 连贯性 ， 在 下面 的 讨论 中 ， 我们 仍然 沿用 前面 的 提法 ， 即 未 提交 的 弱 事务 称为 暂时 事务 ， 而 提交 之后 的 弱 事务 称作 已 提交 事务 。 　 　 我们 规定 强 事务 的 读写操作 只能 对 整个 复制 系统 中 最新 的 数据库 提交 版本 进行 ， 而 暂时 事务 只能 读写 本地 数据库 最新 的 暂时 版本 ， 因此 强 事务 的 执行 不会 与 本地 服务器 现有 的 暂时 事务 发生冲突 。 为了 便于 支持 强 事务 与 弱 事务 的 共存 ， 也 就是 支持 应用 的 可变 一致性 ， WCSR 系统 采用 主 服务器 暂时 事务 提交 算法 。 这时 ， 主 服务器 的 数据库 提交 版本 就是 整个 复制 系统 中 数据库 的 最新 提交 版本 。 　 　 服务器 S 接到 用户 的 一个 强 事务 请求 st 后 ， 为 st 分配 一个 本地 唯一 的 强 事务 序号 ， 记作 sno ， 并 将 st 的 时间 戳 设为 。 然后 ， S 立即 将 st 发送给 主 服务器 PS ， 如果 PS 没有响应 或 返回 事务 失败 信息 ， 则 S 向 用户 返回 一个 失败 信息 ， 强 事务 st 夭折 ； 否则 ， 主 服务器 PS 接到 st 后 ， 执行 st 并 提交 ， 并 分配 给 已 提交 的 st 一个 提交 序列号 csn ， 将 st 以 csnS 的 次序 插入 到 PS 的 事务 日志 中 已 提交 事务 日志 部分 ， 最后 将 事务 执行 结果 以及 stcsn 返回 给 服务器 S 。 接到 主 服务器 的 返回 信息 后 ， S 向 用户 报告 成功 信息 以及 该 事务 的 执行 结果 。 至此 ， 强 事务 st 已经 顺利 地 在 主 服务器 上 提交 ， 并 将 在 随后 的 成 对 同步 过程 中 传播 到 其它 的 服务器 上 。 　 　 可以 证明 ， 强 事务 的 引入 并 不会 影响 原来 WCSR 系统 的 正确性 ， 即 ： 在 支持 强 事务 的 可变 一致性 WCSR 系统 中 ， 各个 复制 服务器 上 的 事务 提交 次序 仍 是 一致 的 ， 其 并发 事务 包括 查询 事务 与 更新 事务 的 执行 仍然 是 Epsilon 可串 的 。 　 WCSR 系统 评价 　 　 为了 验证 WCSR 复制 数据库系统 的 正确性 ， 我们 在 局域网 环境 中 实现 了 一个 原型 验证 系统 WCSRSP ， 并 对 复制 结点 数较 多 的 WCSR 系统 进行 了 模拟 。 　 　 实验 与 模拟 结果表明 ， WCSR 系统 的 复制 一致性 可以 得到 保证 ， 而且 其 复制 维护 开销 是 可以 承受 的 ， 同步 开销 与 复制 结点 数 基本 成 线性关系 ； 暂时 事务 的 提交 速度 也 比较 快 ， 一般 在 几个 同步 周期 之内 即可 提交 ， 因此 系统 的 收敛性 也 比较 好 。 　 　 在 用户 的 访问 性能 方面 ， 由于 WCSR 系统 采用 ReadAnyWriteAny 的 复制 机制 ， 因此 用户 可以 立即 从 本地 服务器 得到 事务 执行 的 结果 ， 即 具有 较 快 的 访问 性能 。 　 　 由于 WCSR 采用 的 弱 一致性 复制 协议 以及 周期性地 成 对 同步 收敛 方法 ， 在 复制 集合 中 部分 结点 的 故障 不会 影响 整个 系统 的 正确 收敛 ， 因此 WCSR 系统 具有 很 高 的 可靠性 ； 而且 ， 只要 用户 能够 访问 到 任意 一个 WCSR 复制 服务器 ， 即使 该 服务器 与 其它 服务器 都 失去 联系 网络连接 中断 ， 用户 仍然 能够 访问 复制 数据库 ， 在 网络故障 恢复 之后 该 服务器 将 继续 保持 与 其它 服务器 的 同步 ， 并 将 用户 的 事务 传播 给 其它 服务器 ， 因此 ， WCSR 系统 具有 非常 好 的 可用性 ， 特别 适合 于 移动 计算环境 。 　 小结 　 　 WCSR 弱 一致性 复制 数据库系统 能 实现 所有 复制 服务器 的 同步 ， 支持 事务处理 的 Epsilon 可串性 一致性 ， 并 在 适当 的 时候 将 事务 的 结果 永久化 ， 支持 应用 的 可变 一致性 ， 提高 服务器 同步 时 暂时 事务 的 成功率 ， 因而 能 很 好 地 支持 移动 计算环境 。 作者简介 ： 李霖 　 男 ， 岁 ， 博士生 ， 主研 移动 计算机 与 移动 数据库系统 作者 单位 国防科技大学 计算机 学院 长沙 　 参考文献 　 　 ImielinskiT ， BadrinathBRMobileWirelessComputing ： ChallengesinDataManagementCommunicationsoftheACM ， ， ： 　 　 李霖 ， 周兴铭 移动 数据库 技术 机遇 和 挑战 计算机科学 ， ， 　 　 LamportLTimes ， Clocks ， andtheOrderingofEventsinaDistributedSystemCommunicationsoftheACM ， ， ： 　 　 DemersATheBayouArchitectureSupportforDataSharingAmongMobileUsersIn ： ProcIEEEWorkshoponMobileComputingSystemsandApplications ， SantaCruz ， California ： 　 　 BernsteinPAConcurrencyControlandRecoveryinDatabaseSystemsAddisonWesleyPublishingcompany ， 　 　 RamamrithanK ， PuCAFormalCharacterizationofEpsilonSerializabilityIEEETransactionsonKnowledgeandDataEngineering ， 收稿 日期