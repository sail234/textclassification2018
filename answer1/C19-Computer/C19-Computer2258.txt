计算机 应用 研究 APPLICATIONRESEARCHOFCOMPUTERS 　 Vol 　 No 　 P 一种 并发 系统 的 规约 方法 刘剑 　 李彤 摘要 　 提出 了 并发 系统 的 一种 规约 方法 。 这一 方法 可 用于 对 并发 系统 进行 建模 和 对模型 的 验证 。 将 形式化 工具 融入 到 一种 二维 的 规约 方法 中 ， 这样 就 能 使 形式化 工具 更 易于 应用 到 并发 软件 的 开发 过程 中 。 此外 ， 还 提出 了 一种 并发 系统 的 形式化 抽象 模型 。 关键词 　 并发 系统 　 形式化 规约 　 面向对象 模式 　 Unity 逻辑 　 软件开发 方法 引言 　 　 对 形式化 方法 而言 ， 许多 计算机 科学家 都 认为 它 在 软件开发 过程 中 具有 重要 意义 。 但 在 实际 的 软件开发 过程 中 该类 方法 过于 琐碎 而 不能 有效 地 处理 大规模 、 复杂 系统 的 开发 。 文献 就 如何 更 有效 地 使用 形式化 方法 提出 了 如下 建议 。 　 　 ． 强调 形式化 模型 和 面向 特定 应用 域 的 形式化 方法 ； 　 　 ． 应 将 形式化 方法 作为 计算机辅助 软件 进化 的 基础 ； 　 　 ． 应 注意 使用 大 粒度 的 软件 复合 技术 ， 而 要 避免 使用 细粒度 的 、 面向 语句 的 方法 。 在 本文 中 ， 我们 采用 一种 二维 方法 来 规约 并发 系统 。 该 二维 方法 采用 一种 图形化 表示 工具 来 表达 一个 实际 系统 的 结构 和 行为 ， 同时 采用 一种 形式化 的 时序 逻辑 来 表达 和 验证 系统 的 功能 和 性质 。 将 两种 表示 方法 融合 在 一起 具有 如下 优点 。 　 　 ． 可 使用 不同 的 表示 方法 来 表达 一个 并发 系统 的 不同 侧面 ； 　 　 ． 在 开发 过程 中 可 针对 不同 抽象层次 来 建立 系统 的 模型 ； 　 　 ． 将 该 方法 建立 在 一个 良好 的 理论 基础 上 即 形式化 的 时序 逻辑 ， 这样 将 有利于 继承 使用 已有 的 工具 。 面向对象 模式 　 　 为了 形式化 地 描述 规约 方法 ， 我们 采用 文献 中 面向对象 模式 的 概念 来 表达 该 方法 。 一个 面向对象 模式 Objectorientedpattern 是 一系列 具有 相互 关系 的 对象 的 集合 ， 各个 对象 具有 特定 的 功能 和 接口 。 对象 可用 来 描述 某一 方法 中 的 各个 部件 这里 指 规约 工具 、 部件 间 的 关系 及 约束 。 这样 多个 对象 将 形成 一个 完整 的 、 严格 的 系统 。 一种 基于 逐步求精 的 开发 过程 　 　 一个 并发 系统 包含 一系列 相互作用 的 模块 ， 这些 模块 间 具有 特定 的 同步 、 互斥 关系 。 各 模块 在 同一 地址 空间 中 交互作用 从而 完成 系统 功能 。 就 某 一 模块 而言 ， 它 本身 可能 就是 一 并发 系统 ， 即 它 可能 就是 一系列 相互作用 的 子 模块 的 集合 ； 或者 它 是 一个 不可 中断 的 原子 程序 ， 在 这样 的 原子 程序 中 可 包含 顺序 、 条件 和 循环 控制结构 。 　 　 基于 以上 的 计算 模型 ， 并发 系统 的 开发 过程 可 具体 地 分为 两个 步骤 ： 性质 求精 阶段 和 程序 求精 阶段 。 在 性质 求精 阶段 ， 是 将 一 性质 集 S 求 精为 一 更 强 的 性质 集 T ， T 比 S 更 具体 、 更 易于 实现 。 在 这样 的 求 精 过程 中要 将 系统 分解 为 低 一级 的 并发 模块 ， 这些 模块 交互 在 一起 要 实现 的 S 性质 ， 而 对 每 一 模块 仅 需 实现 分配 给 自己 的 T 的 一部分 性质 。 在 分解 的 过程 中应 定义 好 各 模块 的 界面 和 行为 限制 ， 分解 得到 的 低 一级 的 系统 要 保证 满足 高 一级 的 系统 所 具有 的 良好 性质 。 性质 求精 过程 一直 进行 ， 直到 得到 一 模块 规模 适中 的 系统 模型 。 接着 对 得到 的 抽象 的 系统 模型 进行 程序 求精 ， 程序 求精 的 目的 是 用 某种 编程语言 在 具体 的 计算机 体系 上 实现 该 抽象 模型 。 程序 求精 必须 保证 所 得到 的 各 程序模块 完全 实现 相对 应 的 抽象 模块 的 性质 规约 。 在 性质 求精 过程 中 我们 关心 的 是 语义 或 逻辑 的 正确性 保证 ； 而 在 程序 求精 阶段 我们 则 要 保证 将 语义 用 正确 的 语法 或 编程语言 实现 。 在 本文 中 我们 只 讨论 对 性质 的 求 精 。 Unity 逻辑 　 　 Unity 是 一种 用来 规约 和 验证 并发程序 的 理论 系统 。 该 理论 包括 三个 主要 部分 ： 一种 简单 的 编程语言 用来 书写 程序 ； 一种 逻辑 表示法 用来 表达 程序 所 满足 的 性质 ； 一个 验证 系统 用来 验证 程序 满足 特定 的 性质 。 通常 地 ， 一个 Unity 程序 由 三个 部分 构成 ： Declare 部分 用来 声明 该 程序 所用 到 的 变量 ； Initially 部分 用来 给 变量 赋 初值 ； Assign 部分 是 一非空 赋值 语句 集 。 　 　 但是 用 传统 的 Unity 逻辑 来 规约 并发 系统 有 两个 不 适应 的 方面 。 一是 该 逻辑 缺少 控制流 ， Unity 程序 是 一 多重 赋值 语句 组成 的 集合 ， 在 程序 内部 各 语句 间 仅 存在 并发 关系 而 没有 通常 顺序程序 所 具有 的 顺序 、 条件 和 循环 控制结构 。 其次 Unity 逻辑 是 面向 语句 的 即 它 所 描述 的 是 一种 细粒度 的 并发 系统 ， 这一 特点 使得 用该 逻辑 来 规约 、 验证 过于 琐碎 而 不能 有效 地 处理 大型 复杂 系统 。 因此 本文 中 ， 我们 将 新 的 特征 引入 Unity ， 从而 得到 一种 并发 系统 的 形式化 抽象 模型 以 用来 规约 并发 系统 。 我们 的 工作 如下 。 　 　 ． 将 Unity 程序 的 粒度 扩大 为 面向 模块 级 ； 　 　 ． 在 模块 内 引入 控制结构 。 并发 系统 的 形式化 抽象 模型 　 　 定义 ： 并发 系统 的 抽象 模型 是 四元组 sysVpVsIsS ， 其中 Vp 表示 由 有限 个 私有 变元集 所 组成 的 类 ， 称 私有 变元类 ， 其 元素 和 固定 的 并发 模块 相关 ， 仅供 该 模块 作 读写访问 ； 　 　 Vs 表示 由 有限 个 共享 变元 所 组成 的 集 ， 称 共享 变元集 ， 其 元素 允许 多于 一个 模块 作 读写访问 ； 　 　 Is 称 变量 初始化 例程 ， 它 对系统 中 部分 共享 变元 给定 初值 ， Is 在 系统 运行 前仅 执行 一次 ； 　 　 S 表示 由 有限 个 并发 模块 组成 的 集合 ， 称 并发 模块 集 ， 它 是 并发 系统 的 核心 部分 。 　 　 定义 ： 并发 模块 的 形式化 规约 是 四元组 modVmodImodENBFB ， 其中 　 　 Vmod 是 模块 的 私有 变元集 ， Vmod 可以 是 空集 ； 　 　 Imod 是 该 模块 的 初始化 例程 ， 它 对 Vmod 中 的 变元 给定 每次 运行 时 的 初值 。 　 　 ENB 是 Vs 上 的 逻辑 谓词 ， 称该 模块 的 触发 条件 ， 它 表达 要 触发 该 并发 模块 应 满足 的 系统 状态 。 　 　 FB 是 VsVmod 上 的 逻辑 谓词 ， 称该 模块 一次 执行 完成 时 的 后 断言 ， 它 表示 模块 一次 执行 完成 时 系统 所处 的 状态 。 　 　 注意 ， 并发 模块 必须 是 在 有限 时间 内 可 执行 完成 的 原子 模块 ， 即 它 不能 在 执行 过程 中 被 中断 。 一个 并发 系统 模型 sys 运行 结束 或 到达 不动点 当且 仅 当 sys 运行 到达 这样 的 状态 ： 在 该 状态 下 sysS 中 的 任一 模块 mod 的 ENB 为 假 。 时序 操作 算符 　 　 对 一个 并发 系统 模型 而言 ， 我们 通常 考虑 两种 重要 的 性质 ： 安全性 ， 这 类 性质 要求 在 系统 的 整个 运行 过程 中 都 保持 为 真 ； 进展 性 ， 这 类 性质 要求 在 系统 运行 结束 或 到达 不动点 时为 真 。 Unity 中有 三个 主要 的 逻辑 运算符 ： unless ， ensures 和 leadsto 。 前面 一个 是 用来 表达 安全性 的 ， 后 两个 是 用来 表达 进展 性 的 。 对 以上 三个 时序 运算符 ， 我们 都 针对 前面 的 系统 模型 给出 相应 的 定义 。 unless 　 　 对 一个 给定 的 系统 模型 syspunlessq 指 的 是 一旦 谓词 p 为 真 ， 则 p 一直 为 真 直到 谓词 q 为 真 。 即 ： ensures 　 　 对 一个 给定 的 系统 模型 sys ， pensuresq 指 的 是 punlessq 对 该 系统 成立 ， 同时 若 谓词 p 在 一个 模块 执行 前为 真则 在 该 模块 执行 结束 时 q 为 真 。 即 ： leadsto 　 　 对 一个 给定 的 系统 模型 ， pleadstoq 指 的 是 谓词 p 为 真 ， 则 能 导致 谓词 q 为 真 。 但 leadsto 和 ensures 不同 ， 即 在 q 为 真前 谓词 p 可能 为 真 也 可能 为 假 。 并发 系统 的 二维 规约 方法 　 　 二维 的 系统 规约 方法 包括 一种 图形 规约 工具 ， 用来 表达 系统 的 行为 和 结构 ， 一种 形式化 规约 工具 ， 用来 具体 地 描述 系统 的 功能 和 性质 。 如图所示 ， 该 方法 包括 七个 对象 。 　 　 ． 图形 表示 工具 ： 用来 描述 规约 系统 行为 、 结构 的 图形 规约 工具 。 在 我们 的 规约 方法 中 ， 我们 用 状态图 作为 图形 工具 来 规约 系统 的 行为 和 结构 。 状态图 StateChart 是 一种 常用 的 图形化 的 系统 表示 方法 ， 之所以 选择 它 是因为 状态图 有助于 软件 开发人员 从 图形化 到 形式化 、 从 抽象 到 具体 的 过渡 。 　 　 ． 逻辑 表示 工具 ： 用来 描述 规约 系统 模型 、 性质 的 形式化 规约 工具 。 这里 ， 形式化 的 规约 工具 就 使用 以上 所述 的 系统 模型 及 验证 方法 。 　 　 ． 系统 状态 图示 ： 包括 用 图形 规约 工具 表示 的 某 一 并发 应用 系统 的 行为 、 结构 图示 。 　 　 ． 系统 抽象 模型 ： 是 用 形式化 规约 工具 表示 的 某 一 并发 应用 系统 的 形式化 抽象 模型 。 　 　 ． 系统 性质 ： 包括 用 形式化 规约 工具 表示 的 某 一 并发 应用 系统 应该 满足 的 逻辑 谓词 。 系统 性质 包括 ： 命题 、 带 变量 的 谓词 和 时序 逻辑 谓词 。 　 　 ． 映射 关系 ： 描述 某一 具体 并发 系统 的 状态 图示 和 形式化 的 系统 模型 之间 的 对应 关系 。 　 　 ． 性质 证明 器 用来 证明 某一 具体 并发 系统 的 抽象 模型 满足 所 要求 的 性质 。 若 所用 的 逻辑系统 有 现成 的 机器 证明 系统 ， 否则 指 人工 证明 。 图 一种 并发 系统 的 规约 方法 　 　 图中 最 上 的 两个 框 表示 图形 表示 工具 和 逻辑 表示 工具 ， 它们 是 在 方法 一级 上 对 所用 的 规约 工具 进行 描述 ； 中间 的 三个 框 表示 系统 的 状态 图示 、 抽象 模型 和 性质 ， 它们 是 针对 某一 具体 的 应用 系统 使用 两类 工具 分别 表示 其 行为 图示 、 模型 和 性质 ； 最下 的 两个 框 表示 某一 具体 的 应用 系统 的 行为 图示 、 模型 和 性质 之间 的 关系 。 规约 方法 的 形式化 表示 　 　 下面 通过 面向对象 模式 来 描述 以上 的 规约 方法 。 在 模式 的 描述 中 采用 了 文献 Gamma 等 的 表示 方法 。 模式 ： DiagramSpec 图形 规约 　 　 图形 表示 类 ： classDiagramNotation 　 　 attributes 　 　 atomicelementsPToken 　 　 compoundelementsPToken 　 　 startelementToken 　 　 structuralrulesPcompoundelements → Patomicelementscompoundelementoperationsrestrictionsthestartelementmustbeacompoundelement 　 　 状态图 ： objectStateChartinstanceofDiagramNotationattributesatomicelementsinitialstatetriggereffectcompoundelementssystemactiondiagram 　 　 classentitystartelementsystem 　 　 structurerulessystemactiondiagram 　 　 actiondiagram → PclassPentity 　 　 entity → initialstatePaction 　 　 action → triggereffect 　 　 说明 ： system ： 被 规约 的 整个 系统 ； actiondiagram ： 系统 的 状态 图示 ， 包括 各个 实体 行为 及其 之间 的 关系 ； class ： 系统 中 某类 实体 的 抽象 表示 entity ： 系统 中 具体 实体 的 描述 ， 它类 的 实例 化 initialstate 系统 中 各个 实体 的 初始状态 描述 ； action ： 实体 的 一个 行为 描述 trigger ： 用来 表示 action 的 触发 条件 effect ： 用来 表达 action 的 行为 结果 。 PatternLogicSpec 逻辑 规约 　 　 逻辑 表示 类 ： class ： LogicNotationattributersatomicelementsPTokencompoundelementsPTokenstructuralrulesPcompoundelements → PatomicelementscompoundelementsoperatorsPTokentheoremsPrewritingruleoperationsrestrictions 　 　 系统 抽象 模型 ： objectAbstractmodelinstanceofLogicNotationattributesatomicelementstruthvaluevariableconstantcompoundelementssystemmodelmoduleENBFPpredicatequantifiedpredicatepropositionrelationexpressionstructuralrulessystemmodel → Pmodulemodel → ENBFPENB → PpredicateFP → Ppredicatepredicate → propositionquantifiedpredicateproposition → relationexpressionrelationexpression → variableconstantoperatorsvariableconstantoperatorsrelationoperators ≤ ≥ logicalconnectivesquantifierstemporaloperatorunlessstableinvariantensuresandleadsto 　 　 Theorems 自反性 反自 反性 弱 后件 推导 合取 定理 析取 定理 PSP 定理 etc 说明 ： systemmodel ： 整个 系统 的 抽象 模型 ； module ： 通过 ENB 和 FP 来 描述 系统 中 各个 模块 的 行为 约束 ； predicate ： 系统 中 模块 行为 功能 限制 的 逻辑 表示 ； quantifiedpredicate ： 带 全称 量词 或 存在 量词 的 谓词 ； proposition 命题 ： 对 一个 事实 的 逻辑 陈述 ； relationexpression 关系 表达式 ： 用来 表达 变量 、 常量 之间 的 关系 ； truevalue 真值 ： true 或 false ； operators ： 包括 关系 操作符 relationoperators 、 谓词 逻辑 操作符 　 logicconnectives 和 时序 逻辑 操作符 temporaloperators ； 结束语 　 　 本文 提出 了 一种 二元 的 并发 系统 规约 方法 ， 它 将 图形化 工具 和 形式化 工具 紧密 的 结合 在 一起 ， 使该 方法 能 更好 地 应用 到 实际 的 开发 过程 中 。 本 项目 获得 云南省 自然科学 基金 资助 FG 获 云南省 中青年 科技 带头人 培养 基金 资助 刘剑 云南大学 计算机科学 系 昆明 李彤 云南大学 计算机科学 系 昆明 参考文献 ， MaryShawDavidGarlanSoftwareArchitecturePerspectivesofanEmergingDisciplinePrenticeHall ， ErichGammaRichardHelmRalphJohnsonJohnVlissidesDesignPatternsElementsofReusableObjectorientedSoftwareAddisonWesley ， RWirfsBrockObjectorientedFrameworksAmericanProgrammer ， KMChandyandJMisraParallelProgramDesignAFoundationReadingMAAddisonWesley ， YingLiuAmbujKSinghandRajiveLBagrodiaADecompositionalApproachtotheDesignofParallelProgramsIEEETransitionsonSoftwareEngineeringVolNo ， BoutheinaChetaliFormalVerificationofConcurrentProgramsUsingtheLarchProverIEEETransactiononSoftwareEngineeringVolNo ， LuQiJosephGoguenFormalMethodsPromisesandProblemsIEEESoftware ， ColinFidgePeterKearneyMarkUttingAFormalMethodforBuildingConcurrentRealTimeSoftwareIEEESoftware ， BoSandenModelingConcurrentSoftwareIEEESoftware ， 李玉茜 ， 杨宗源 并行程序 设计 上海 ： 上海 科技 文献 出版社 收稿 日期 ：