微型机 与 应用 MICROCOMPUTERITSAPPLICATIONS 　 Vol 　 No 　 P 利用 Ｖ ｉ ｓ ｕ ａ ｌ Ｂ ａ ｓ ｉ ｃ 进行 Ａ ｕ ｔ ｏ Ｃ Ａ Ｄ 二次开发 欧阳 付成 柳荣 梦 摘要 ： 利用 Ｖ ｉ ｓ ｕ ａ ｌ Ｂ ａ ｓ ｉ ｃ 进行 Ａ ｕ ｔ ｏ Ｃ Ａ Ｄ 二次开发 的 关键 — — 建立 应用程序 与 Ａ ｕ ｔ ｏ Ｃ Ａ Ｄ 之间 的 通信 ， 给出 了 示例 程序 。 关键词 ： Ｖ ｉ ｓ ｕ ａ ｌ Ｂ ａ ｓ ｉ ｃ Ａ ｕ ｔ ｏ Ｃ Ａ Ｄ 二次开发 Ａ ｃ ｔ ｉ ｖ ｅ Ｘ 　 　 AutoCAD 可以 说 是 当今 国内外 最为 流行 的 计算机辅助 绘图 软件 ， 成为 绘图 和 设计 人员 的 有力 工具 ， 特别 是 以 它 为 平台 二次开发 图形 绘制 软件 显得 简单 而 有效 。 年 发布 的 AutoCADR 无论是 在 界面 、 速度 还是 在 图形 编辑 方面 都 作 了 不少 的 改进 ； 更 重要 的 是 R 版 提供 了 对 ActiveX 自动化 技术 的 支持 ， 使得 熟悉 支持 ActiveX 语言 的 开发人员 可以 在 AutoCAD 平台 上 开发 出 高效 实用 的 应用程序 。 而 VisualBasic 以其 简单 易学 和 方便 设计 交互 界面 的 诸多 特点 成为 许多 开发人员 的 首选 语言 。 本文 在 总体 介绍 AutoCADActiveXAutomation 技术 的 基础 上 ， 结合 实例 讲述 如何 运用 VisualBasic 编程 控制 AutoCAD 进行 有关 绘图 操作 。 　 相关 术语 　 　 上面 已经 提到 从 VisualBasic 应用 程序控制 AutoCAD ， 显然 这 两者之间 的 地位 并 不是 平等 的 ， 即 VisualBasic 应用程序 与 AutoCAD 之间 的 通信 并 不是 双向 进行 的 。 其中 VisualBasic 被 称为 客户机 （ Client ） ， 是 首先 开始 对话 的 应用程序 ； AutoCAD 被 称为 ActiveX 服务器 （ Server ） ， 是 响应 客户机 的 应用程序 。 　 　 通过 使用 自动化 AutoCAD 就 暴露 其 可编程 对象 ， 这些 暴露 对象 称为 自动化 对象 。 自动化 对象 主要 暴露 二个 方面 ： 属性 （ properties ） 和 方法 （ methods ） 。 属性 是 设置 或 返回 对象 特征 信息 的 功能 ， 而 方法 是 针对 对象 执行 的 各种 操作 。 AutoCAD 可以 选择 所 选中 对象 上 的 一些 属性 和 方法 ， 通过 ActiveXAutomation 来 使用 它 。 例如 Line （ 线 ） 体是 AutoCAD 所有 对象 中 的 一种 ， 它 也 具有 属性 （ 颜色 、 层 、 始点 、 终点 和 线宽 ） 和 方法 （ 拷贝 、 剪切 、 旋转 、 平移 和 重画 等 ） 。 　 AutoCAD 对象 模型 （ ObjectModel ） 　 　 VisualBasic 总共 可 取得 AutoCAD 约个 对象 ， 这些 对象 共有 五百多个 方法 和 属性 。 AutoCAD 按 层次 来 组织 这些 对象 ， 其中 Application 对象 处于 该 层次 的 顶端 ， 所有 其它 对象 都 是 Application 对象 的 “ 孩子 ” 。 操作 一个 特定 的 对象 必须 从 Application 对象 开始 ， 再 到 它 的 子 对象 （ Document 对象 和 Preferences 对象 ） ， 一直 下去 直到 要 操作 的 特定 对象 。 接下来 就 可以 用该 对象 的 属性 和 方法 来 创建 或 修改 对象 的 属性 特征 。 　 　 下面 着重 介绍 二次开发 经常 用到 的 几个 重要 的 对象 及其 方法 、 属性 。 　 　 Application 对象 是 编写 代码 时 第个 使用 的 对象 。 代表 AutoCAD 本身 。 Application 对象 是 通过 个 重要 语句 GetObject 和 CreateObject 来 与 之 连接 。 其中 GetObject 语句 用于 连接 已经 装入 到 内存 的 AutoCAD 实例 ， 而 CreateObject 语句 则 是 将 AutoCAD 装入 内存 ， 创建 个 新 的 AutoCAD 实例 ， 并 与 之 连接 。 　 　 Document 对象 是 AutoCAD 当前 的 绘图 文档 ， 活动 绘图 文档 就是 通过 Document 对象 的 ActiveDocument 属性 取得 的 。 它 为 AutoCAD 图形 及 非 图形 对象 操作 提供 入口 ， 因为 每个 特定 对象 的 操作 都 是 在 AutoCAD 某个 绘图 文档 中 进行 的 。 Document 的 ModelSpace 和 PaperSpace 属性 为 图形 对象 （ 如 Line 、 Point 、 Circle 等等 ） 提供 入口 ； 而 非 图形 对象 （ 如 Layers 、 Linetypes 等等 ） 的 入口 则 是 通过 Document 其它 相应 属性 （ 如 Layers 、 Linetypes 等等 ） 提供 。 　 　 Graphical （ 图形 ） 对象 即 实体 是 可见 的 对象 ， 如 Line 、 Point 、 Circle 等等 ， 都 是 在 图形 文档 中所能 见到 的 具体 图形 元素 。 创建 这些 对象 是 通过 它们 的 相应 方法 AddEntiname 来 实现 ； 也 允许 使用 如 Copy 、 Erase 、 Move 等等 的 方法 来 实现 对 实体 的 编辑 。 Nongraphical （ 非 图形 ） 对象 是 图形 附带 的 诸如 Layers 、 Linetypes 、 Dimstyle 等 不 可见 属性 特征 。 　 　 还有 Collection 、 Preferences 、 Plot 、 Utility 等等 许多 对象 ， 这里 就 不 一一 介绍 了 。 如果 需要 它们 的 详细信息 ， 可 在 AutoCAD 的 在线 帮助 中 找到 。 　 配置 系统 　 　 大家 知道 ， 个 应用程序 支持 的 对象 、 方法 和 属性 通常 定义 在 应用程序 的 对象 库中 。 AutoCAD 也 有 个 文件 acad ． tlb 存储 了 类 的 信息 。 为了 使 VisualBasic 能 “ 认识 ” 代码 中 的 对象 ， 在 编写 代码 之前 还要 做 的 一步 工作 是 在 VisualBasic 中 引用 AutoCAD 对象 库 ： 　 　 （ ） 运行 VisualBasic 之后 ， 选择 工程 → 引用 ； 　 　 （ ） 在 引用 对话框 中将 AutoCADRObjectLibary 前 的 方框 选中 。 如果 在 “ 可 使用 的 引用 ” 列表 中 没有 找到 AutoCADRObjectLibary ， 可 单击 “ 浏览 ” 到 AutoCADR 的 安装 目录 ， 找到 acad ． tlb 文件 并 选中 ， 确定 之后 列表 中 就 有 AutoCADRObjectLibary 项 了 ； 选中 即可 。 　 　 下面 就 可以 开始 编写 程序代码 了 。 　 编写 代码 　 　 首先 ， 定义 一些 必要 的 对象 变量 ， 为 后面 方便 可定义 为 Public 型 。 　 　 PublicacadAppExAsObject ′ 定义 Application 对 ′ 象 变量 　 　 PublicacadDocExAsObject ′ 定义 Document 对象 ′ 变量 　 　 PublicmoSpaceExAsObject ′ 定义 ModelSpace 对 ′ 象 变量 　 　 PublicpaSpaceExAsObject ′ 定义 PaperSpace 对 ′ 象 变量 　 　 然后 ， 连接 到 AutoCAD 。 一般 是 先试 着 连接 已 运行 的 AutoCAD 。 如果 没有 已 在 运行 的 AutoCAD ， 则 试 着 去 打开 AutoCAD 并 与 之 连接 。 如果 系统 没有 AutoCAD ， 则 会 报告 个 错误 。 下面 的 代码 其实 可 作为 一段 连接 AutoCAD 的 通用 代码 ， 也 可 加上 其它 错误处理 代码 ， 使 之 更 完善 。 　 　 OnErrorResumeNext 　 　 SetacadAppEx ＝ GetObject （ ， ″ AutoCAD ． Application ″ ） 　 　 IfErrThen 　 　 　 　 Err ． Clear 　 　 　 　 SetacadAppEx ＝ CreateObject （ ″ AutoCAD ． Application ″ ） 　 　 　 　 IfErrThen 　 　 　 　 　 　 MsgBoxErr ． Description ′ 报告 错误 并 　 　 　 　 　 　 ExitSub ′ 退出 　 　 　 　 EndIf 　 　 EndIf 　 　 acadAppEx ． Visible ＝ True ′ 使 AutoCAD 可见 ， 缺省 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ′ 是 不 可见 　 　 再次 ， 就是 使用 Document 对象 取得 绘图 文档 并定 好 图纸 空间 或 模型 空间 。 　 　 SetacadDocEx ＝ acadAppEx ． ActiveDocument 　 　 SetmoSpaceEx ＝ acadDocEx ． ModelSpace （ 或者 Pa － perSpace ） 　 　 到 此 就 连接 好 AutoCAD 、 打开 绘图 文档 并 设定 好 模型 空间 ， 接着就是 操作 具体 的 对象 绘制 图形 。 举 一个 绘点 的 例子 代码 ： 　 　 DimLandPoint （ To ） AsDouble 　 　 DimpointObjAsObject 　 　 SetpointObj ＝ acadAppEx ． ActiveDocument ． ModelSpace ． AddPoint （ LandPoint ） 　 程序 示例 　 　 在 绘制 测量 图时 ， 经常 需要 在 图 中 标示 控制点 的 位置 和 它 的 高程 。 如果 采用 直接 输入 坐标 绘制 点 ， 然后 在 点 旁用 文字 标注 其 高程 的话 ， 则 文字 标注 定位 不好 ， 而且 命令 切换 频繁 ， 速度 非常 慢 。 针对 这一 问题 ， 本人 编写 了 段程序 来 解决 。 只 需 将 测量 控制点 的 维 坐标 在 一 文字 处理器 （ 如 记事本 ） 中 按 行个 点 的 数据 全部 输入 并存 为 文本文件 ， 之后 运行 这 段程序 即可 将 所有 控制点 全部 很 好 地 标注 在 图 中 。 还 可 在 本 程序 中 加入 代码 接受 用户 输入 数据 来 控制字符 大小 ， 使 程序 更 具有 通用性 。 （ 为 简单 起 见 ， 该 程序 要求 事先 运行 AutoCAD ） 。 　 　 本 程序 在 VisualBasic ． 企业 版上 （ 操作系统 为 Windows ） 调试 通过 。 　 　 先 在 工程 中 加入 个 标准 窗体 ， 将 它们 的 Name 属性 分别 设为 frmMain 和 frmFileName 。 在 frmMain 窗体 上 加入 个 Commandbutton ， 它们 的 Name 属性 分别 为 cmdToACAD 、 cmdBigin 和 cmdClose ， Caption 属性 分别 设 为 “ 连接 AutoCAD ” 、 “ 开始 绘制 ” 和 “ 关闭程序 ” 。 在 frmFileName 窗体 上 也 加入 个 Commandbutton （ 其 Name 属性 分别 为 cmdOK 和 cmdChooseFile ； Caption 属性 分别 为 “ 确定 ” 和 “ 选择 文件 ” ） 、 个 TextBox （ Name 为 text ） 用于 显示 所 选择 的 数据文件 和 个 CommonDialoge （ Name 属性 为 cdlg ） 。 　 　 在 frmMain 代码 模块 中 写入 代码 ： 　 　 PrivateSubForm ＿ Load （ ） 　 　 　 　 PublicacadAppAsObject 　 　 　 　 PublicacadDocAsObject 　 　 　 　 PublicmoSpaceAsObject 　 　 　 cmdbegin ． Enabled ＝ False 　 　 　 Left ＝ （ Screen ． Width － Width ） ＼ ′ 设置 装入 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 ′ 时 窗体 最初 位置 　 　 　 Top ＝ （ Screen ． Height － Height ） ＼ 　 　 EndSub 　 　 PrivateSubcmdToACAD ＿ Click （ ） 　 　 　 　 OnErrorResumeNext 　 　 　 　 SetacadApp ＝ GetObject （ ， ″ AutoCAD ． Application ″ ） 　 　 　 　 acadApp ． Visible ＝ True 　 　 　 　 SetacadDoc ＝ acadApp ． ActiveDocument 　 　 　 　 SetmoSpace ＝ acadDoc ． ModelSpace 　 　 　 　 MsgBox （ ″ 本 软件 和 AutoCAD 已经 连接 成功 ！ ） ″ ， 　 　 　 　 cmdBegin ． Enabled ＝ True 　 　 　 　 frmMain ． Visible ＝ True 　 　 EndSub 　 　 PrivateSubcmdBegin ＿ Click （ ） 　 　 　 　 frmMain ． Visible ＝ True 　 　 　 　 LoadfrmFileName 　 　 　 　 frmFileName ． Show 　 　 EndSub 　 　 PrivateSubcmdClose ＿ Click （ ） 　 　 　 UnloadMe 　 　 EndSub 　 　 在 cmdFileName 的 代码 模块 中 写入 代码 ： 　 　 　 OptionExplicit 　 　 　 DimFileAsString 　 　 　 PrivateSubForm ＿ Load （ ） 　 　 　 　 Left ＝ （ Screen ． Width － Width ） ＼ 　 　 　 　 Top ＝ （ Screen ． Height － Height ） ＼ 　 　 EndSub 　 　 PrivateSubcmdOK ＿ Click （ ） 　 　 　 　 DimLandPoint （ To ） AsDouble 　 　 　 　 DimpointObjAsObject 　 　 　 　 DimPointCaseAsVariant 　 　 　 　 DimTextHeightAsDouble 　 　 　 　 DimLandPointT （ To ） AsDouble 　 　 　 　 DimTextElevaValAsObject 　 　 　 　 IfText ． Text ＝ ″ ″ Then 　 　 　 　 　 　 MsgBox （ ″ 你 必须 选择 一个 数据文件 ″ ） ， 　 　 　 　 Else 　 　 　 　 　 　 File ＝ Text ． Text 　 　 　 　 　 　 OpenFileForInputAs ＃ 　 　 　 　 　 　 DoWhileNotEOF （ ） 　 　 　 　 　 Input ＃ ， LandPoint （ ） ， LandPoint （ ） ， Land － Point （ ） 　 　 　 　 　 SetpointObj ＝ moSpace ． AddPoint （ LandPoint ） 　 　 　 　 　 TextHeight ＝ ． 　 　 　 　 　 LandPointT （ ） ＝ LandPoint （ ） ＋ ． 　 　 　 　 　 LandPointT （ ） ＝ LandPoint （ ） 　 　 　 　 　 LandPointT （ ） ＝ LandPoint （ ） 　 　 　 　 　 SetTextElevaVal ＝ moSpace ． AddText （ Str （ LandPoint （ ） ） ， ＿ LandPointTTextHeight ） 　 　 　 　 　 Loop 　 　 　 　 　 UnloadfrmFileName 　 　 EndIf 　 　 　 Close ＃ 　 　 EndSub 　 　 PrivateSubcmdChooseFile ＿ Click （ ） 　 　 cdlg ． Filter ＝ ″ TextFile （ ． txt ） ｜ ． txt ｜ AllFiles ″ ＆ ″ （ ． ） ｜ ． ″ 　 　 　 　 cdlg ． filename ＝ ″ ″ 　 　 　 　 cdlg ． ShowOpen 　 　 　 　 Ifcdlg ． filename ＜ ＞ ″ ″ Then 　 　 　 　 　 　 Text ． Text ＝ cdlg ． filename 　 　 　 　 EndIf 　 　 EndSub 欧阳 付成 （ 广州 海洋 地质 调查局 研究所 图形 数据 研究室 ） 柳荣 梦 （ 广州 海洋 地质 调查局 研究所 图形 数据 研究室 ） 参考文献 １ ， Ｏ ｍ ｕ ｒ ａ Ｇ 著 ， 徐有 光译 ． Ａ ｕ ｔ ｏ Ｃ Ａ Ｄ １ ４ 从 入门 到 精通 ． 北京 ： 电子 工业 出版社 ， １ ９ ９ ８ ２ ， Ｍ ａ ｎ ｓ ｆ ｉ ｅ ｌ ｄ Ｒ 著 廖 卫东 译 ． Ｖ ｉ ｓ ｕ ａ ｌ Ｂ ａ ｓ ｉ ｃ ４ ． ０ ． 北京 机械 工业 出版社 １ ９ ９ ６ 收稿 日期 ： １ ９ ９ ９ － １ ０ － １ ９