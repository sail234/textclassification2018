计算机 应用 COMPUTERAPPLICATIONS 年 第卷 第期 VolNo 使用 VxD 实现 Windows 的 中断 处理 王勇 　 盖 江南 　 付长 冬 　 　 摘 　 要 　 本文 主要 说明 在 Windows 系统 平台 下 虚拟 设备 驱动程序 （ VxD ） 如何 处理 中断 ， 包括 申请 、 占有 、 释放 ， 并 给出 VxD 处理 中断 的 流程 和 具体 实例 。 　 　 关键词 　 VxD ， 硬件 中断 ， VPICD ， VMM ， 虚拟 设备 　 　 在 某些 系统 的 开发 中 ， 常需 实时 采集 一些 状态 信息 ， 将 信号 通过 接口板 传送 给 主机 ， 主机 则 通过 中断 方式 接收数据 来 实现 实时 的 测量 和 控制 。 由于 系统 通常 都 是 在 Windows 系统 下 开发 的 ， 所以 需 解决 Windows 下 的 中断 实现 问题 。 　 Windows 的 中断 原理 　 　 Intel 的 XCPU 系列 芯片 规定 了 、 、 和 四个 级别 的 执行 代码 可信度 ， Windows 中 只用 到 了 级 和 级 。 执行 于 第级 的 代码 具有 最高 的 可信度 ， 可 直接 对 硬件 、 中断 和 文件系统 进行 物理 访问 ， 仅 有 操作系统 及其 部件 被 允许 在 第级 内 执行 。 而 应用程序 的 代码 只 在 可信度 最低 的 第级 内 执行 ， 其 访问 硬件 和 接触 自身 进程 空间 以外 的 内存 的 能力 受到限制 。 　 　 在 Windows 下 可以 用 两种 方法 实现 中断 ， 一种 是 编写 DLL 程序 ， 另 一种 是 使用 虚拟 设备 驱动程序 （ VxD ） 。 两者 的 区别 在于 ： VxD 是 作为 操作系统 的 组件 运行 于 第级 的 ， 而 DLL 程序 却 运行 于 第级 。 　 　 VxD 的 运行 在 虚拟机 管理器 （ VMM ） 的 监控 之下 ， VMM 是 位于 最底层 的 操作系统 部件 。 VMM 的 任务 是 将 构成 系统 的 硬件 虚拟化 ， 分配 应用程序 执行 的 时间 片 并 管理 虚拟内存 的 内务 ， 对 用户 而言 是 不 可见 的 。 硬件 设备 在 数据 准备 好 之后 就 发 中断 信号 ， 但 VxD 并 不 直接 截获 这些 中断 ， 而是 依赖于 虚拟 可编程 中断 控制器 （ VPICD ） 来 处理 硬件 中断 。 　 　 VPICD 虚拟化 可编程 中断 控制器 （ PIC ） 硬件 ， 允许 其它 VxD 支持 自己 的 硬件 设备 ， 譬如 磁盘驱动器 和 通信 端口 ， 它们 使用 硬件 中断 去 通知 主机 输入 数据 或 状态 的 改变 。 VPICD 可以 映象 硬件 中断 到 其它 设备 ， 向 其它 设备 提供 一些 服务 ， 通过 这些 服务 允许 虚拟 设备 请求 中断 ， 并 可 在 虚拟机 中 模拟 硬件 中断 ， 称为 虚拟 中断 。 并且 它 还 可以 处理 PIC 硬件 的 IO 操作 。 它 的 处理 结构图 如图所示 。 图 　 VPICD 的 处理 结构图 　 　 VPICD 提供 的 基本 服务 如下 ： 　 　 （ ） VPICD — Vrtualize — IRQ 　 　 （ ） VPICD — Set — Int — Request 　 　 （ ） VPICD — Phys — EOI 　 　 （ ） VPICD — Virtual — EOI 　 　 （ ） VPICD — Clear — Int — Request 　 　 （ ） VPICD — Force — Default — Behavior 　 　 （ ） VPICD — Force — Default — Owner 　 　 VPICD — Virtualze — IRQ 负责 向 VMM 申请 硬件 中断 IRQ 。 如果 此 IRQ 没有 被 其它 硬件 所 占用 ， 则 得到 一个 中断 句柄 ， 可以 设置 新 的 中断 处理程序 ， 并 清除 进位 寄存器 。 如果 IRQ 被 别的 硬件 所 占用 ， 则 进位 寄存器 置位 。 　 　 VPICD — Set — Int — Request 设置 一个 指定 的 中断 和 虚拟机 的 虚拟 中断请求 ， 导致 虚拟机 系统 产生 一个 虚拟 中断 。 　 　 VPICD — Clear — Int — Request 则 消除 在 指定 虚拟机 中 设置 的 虚拟 中断 。 　 　 VPICD — Pyhs — EOI 结束 一个 硬件 中断 ， 允许 下 一次 的 硬件 中断 。 　 　 VPICD — Virtual — EOI 允许 其它 的 VxD 向 VPICD 发送 虚拟 EOI 命令 ， 结束 一个 虚拟 中断 。 　 　 VPICD — Force — Default — Behavior 释放 此 设备 向 VMM 申请 的 IRQ ， 允许 其它 设备 占用 此 IRQ 。 VPICD — Force — Default — Owner 则 重新 设置 此 IRQ 对应 的 默认 的 中断 处理程序 。 　 虚拟 设备 的 中断 控制 　 　 在 阐述 虚拟 设备 的 中断 控制 前 ， 首先 说明 一个 非常 关键 的 数据结构 ， 定义 如下 ： 　 VPICD — IRQ — DescriptorSTRUC 　 　 　 VID — IRQ — Number 　 　 　 　 dw 　 ？ 　 　 　 VID — Optionsdw 　 　 　 VID — Hw — Int — Procdd ？ 　 　 　 VID — Virt — Int — Procdd 　 　 　 VID — EOI — Procdd 　 　 　 VID — Mask — Change — Procdd 　 　 　 VID — Iret — Procdd 　 　 　 VID — IRET — Time — Outdd 　 　 　 VID — Hw — Int — Refdd ？ 　 　 　 VPICD — IRQ — Descriptor 　 　 ENDS 　 　 此 数据结构 中 的 域 含义 如下 ： VID — IRQ — Number 定义 虚拟 设备 申请 的 IRQ 数 ， VID — Options 必须 为 ， VID — Hw — Int — Proc 是 用户 中断 处理程序 的 地址 ， 在 虚拟化 成功 后 ， 它 将 替代 系统 默认 的 中断 处理程序 地址 。 以上 三个 域 是 必须 填写 的 。 　 　 VID — Virt — Int — Proc 是 虚拟 中断 处理程序 地址 ， 而 VID — EOI — Proc 是 物理 中断 结束 后 调用函数 的 指针 。 　 　 虚拟 设备 中断 控制 的 处理过程 如下 ： （ ） 当 用户 通过 CreateFile 函数 装载 VxD 时 ， 系统 向 VxD 发送 DEVICE — DYNAMIC — INIT 消息 ， VxD 消息 控制 处理程序 调用 对应 的 初始化 程序 。 在 此 程序 中 如下 处理 ： 　 　 MOVEDI ， OFFSETVIDVxDCallVPICD — Virtualize — IRQ 　 　 而 VID 可以 如下 定义 ： 假设 申请 IRQ 为 ， 中断 处理程序 为 hw — int — proc 　 VIDVPICD — IRQ — Descriptor ， ， hw — int — proc ， 　 　 （ ） 中断 处理程序 在 处理 中断 时 必须 按 以下 的 步骤 进行 ： 　 　 调用 VPICD — Pyhs — EOI 结束 物理 中断 。 　 　 调用 VPICD — Set — Int — Request 设置 虚拟 中断 。 　 　 （ ） 在 虚拟 中断 处理程序 中作 如下 处理 ： 　 　 真正 的 中断 处理 。 　 　 调用 VPICD — Clear — Int — Request 清除 虚拟 中断 。 　 　 调用 VPICD — Virtual — EOI 结束 虚拟 中断 。 　 　 （ ） 当 用户 通过 CLOSEHANDLE 函数 卸载 VxD 时 ， 系统 向 VxD 发送 DEVICE — DYNAMIC — EXIT 消息 ， VxD 消息 控制 处理程序 调用 对应 的 退出 处理程序 。 在 此 程序 中作 如下 处理 ： 　 MOVEDI ， IRQHANDLEVxDCALLVPICD — Force — Default — BehaviorVxDCALLVPICD — Force — Default — Owner 　 VxD 实现 中断 处理 的 实例 　 　 本节 以 一个 具体 实例 说明 VxD 中 如何 处理 中断 ， 给出 的 实例 略有 删节 。 pxlistincludevmmincincludedebugincincludeshellincincludevpicdinclistCVXDSAMP — DYNAMICEQU 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 申明 是 一个 动态 VxD 。 CVXD — DEVICE — IDEQUABH 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 定义 虚拟 设备 标识号 VxD — LOCKED — DATA — SEG 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 定义 IRQ 结构 内容 　 　 CVXD — IRQ — DescVPICD — IRQ — Descriptorh ， ， OFFSET — 　 CVXD — HW — INT ， OFFSET — 　 CVXD — VIRTirqhandleddVxD — LOCKED — DATA — ENDS 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 定义 VxD 参数 DECLARE — VIRTUAL — DEVICECVXDSAMP ， ， ， CVXD — Control ， CVXD — DEVICE — ID ， UNDEFINED — INIT — ORDERVxD — CODE — SEGBeginProcCVXD — Dynamic — Initmovedi ， offsetCVXD — IRQ — DescVxDcallVPICD — Virtualize — IRQjcerrorhandlemovirqhandle ， eax 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 保存 IRQ 句柄 moveax ， VXD — SUCCESSreterrorhandle ： 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 出错 处理 moveax ， retEndProcCVXD — Dynamic — InitBeginProcCVXD — Dynamic — Exitmoveax ， irqhandle 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 返回 IRQ 句柄 VxDcallVPICD — Force — Default — Behaviormoveax ， VXD — SUCCESSretEndProcCVXD — Dynamic — ExitVxD — CODE — ENDSVxD — LOCKED — CODE — SEGBeginProcCVXD — Control 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 消息 控制 函数 例程 Control — DispatchSYS — DYNAMIC — DEVICE — INIT ， CVXD — Dynamic — InitControl — DispatchSYS — DYNAMIC — DEVICE — EXIT ， CVXD — Dynamic — ExitclcretEndProcCVXD — ControlBeginProcCVXD — HW — INT ， PUBLIC 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 物理 中断 处理函数 例程 climoveax ， irqhandleVxDcallVPICD — Phys — EOI 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 结束 本次 硬件 中断 VxDcallVPICD — Set — Int — Request 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 设置 一个 虚拟 中断请求 clcret 　 　 EndProcCVXD — HW — INTBeginProcCVXD — VIRT ， PUBLIC 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 虚拟 中断 处理函数 例程 ； ； 处理 中断 事务 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 具体 的 中断 处理 应 在 此 处理 moveax ， irqhandleVxDcallVPICD — Clear — Int — Request 　 　 　 　 　 　 　 　 　 　 　 消除 指定 虚拟机 中 的 虚拟 中断 VxDcallVPICD — Virtual — EOI 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 发送 虚拟 EOI 命令 sti 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 开 中断 clc 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 清除 进位 标志 retEndProcCVXD — VIRTVxD — LOCKED — CODE — ENDSEND 　 结束语 　 　 从 以上 的 分析 和 实例 可以 看出 ， 使用 虚拟 设备 驱动程序 实现 Windows 的 中断 处理 ， 可靠性 更高 ， 速度 也 更 快 ， 一般 比 使用 DLL 程序 快 — 倍 ， 并且 在 每秒 次 中断 的 情况 下 也 能 可靠 稳定 地 运行 ， 确实 给 开发 Windows 下 的 中断 程序 带来 了 极大 的 方便 。 作者简介 ： 王勇 　 助理 讲师 。 主要 从事 技术开发 、 系统管理 与 维护 等 工作 。 盖 江南 　 硕士 研究生 。 研究 方向 ： 计算机 图形图像 处理 。 付长 冬 　 硕士 研究生 。 研究 方向 ： 操作系统 的 设计 与 实现 。 作者 单位 ： 总装备部 指挥 技术 学院 　 北京 （ ） 参考文献 ［ ］ 　 ABakerWindowsNT 设备 驱动程序 设计 指南 北京 机械 工业 出版社 ［ ］ 　 AKingWindows 技术 内幕 北京 清华大学出版社 ［ ］ 　 HClusterWindowsNT 技术 内幕 北京 清华大学出版社 ［ ］ 　 木 　 子 等 UNIX 设备 驱动程序 北京 学苑 出版社 ［ ］ 　 彭 向东 等 使用 VtoolsD 开发 Windows 中断 程序 电脑 与 信息技术 收稿 日期 修改稿