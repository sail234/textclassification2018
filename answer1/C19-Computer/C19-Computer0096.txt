计算机 工程 COMPUTERENGINEERING 年 第卷 第期 VolNoUnix 和 WindowsNT 之间 实现 远程 过程 调用 孙春艳 ， 项钦 之 摘要 ： 介绍 了 利用 Socket 机制 ， 实现 跨 Unix 和 WindowsNT 系统 的 远程 过程 调用 方法 、 实现 机制 ， 并 简介 编程 要点 。 关键词 ： 远程 过程 调用 ； 套 接字 ； WinSockTheImplementationofPRCBetweenUnixandWindowsNTSunChunyanxiangQinzhiCADCAMSoftwareDevelopmentandTrainingCenterofChinaAerospaceCorpBeijing 【 Abstract 】 ThispaperintroducesthemethodandmechanismthattakeadvantageofSockettorealizeRPCbetweenUnixandWindowsNTInadditionitshowsmainpointsofprogramming 【 Keywords 】 RPCsocketWinSock 　 　 网络 程序开发 中常 要 激活 分布 在 网络 中远 地 机器 上 的 过程 ， 即 远程 过程 调用 RPCRemoteProcedureCall ， 现有 的 很多 成熟 的 操作系统 都 有 各自 的 RPC 应用软件 ， 用户 在 调用 远程 过程 时 ， 可 直接 利用 库函数 给予 支持 。 然而 ， 对于 多种 操作系统 共存 的 网络 环境 ， 远程 调用 程序 在 不同 的 系统 上时 ， 要 实现 远程 过程 调用 就 不能 直接 使用 现有 的 RPC 软件 。 Unix 和 NT 之间 的 跨平台 不带 参数 的 远程 过程 调用 已经 在 包括 SUN 工作站 以 Solaris 为 操作系统 和 PC机 以 WindowsNT 为 操作系统 的 网络 环境 上 实现 。 实现 原理 和 实现 机制 实现 原理 　 　 TCPIP 作为 应用 最 广泛 的 网络协议 ， 已 成为 计算机行业 中 开放系统 互联 的 既成事实 的 标准 ， 大多数 版本 包括 Solaris 的 Unix 已 把 TCPIP 作为 操作系统 的 一部分 ， Microsoft 公司 的 WindowsNT 也 包含 了 TCPIP 协议 。 套 接字 Socket 作为 在 传送 层上 提供 给 应用程序 的 接口 之一 ， 在 互连网 域 支持 TPCIP 协议 ， 为此 Socket 便 成为 两种 操作系统 之间 实现 通信 的 基础 。 Socket 首先 是 由 BSDUnix 提出 ， 它 采用 ClientServer 模式 的 通信 机制 ， 解决 了 网络 之间 连接 和 数据通信 问题 。 Solaris 系统 的 Socket 在 这样 的 机制 下 ， 提供 了 一系列 系统 调用 ， 实现 进程 间通信 。 WindowsNT 提供 的 WinSock 借用 BSDUnix 中套 接字 的 概念 ， 同时 又 对 Windows 的 几种 特点 增加 了 扩充 ， 它 的 实现 与 Socket 既有 共同点 又 有 本身 的 特点 。 利用 两者 的 共同点 实现 两种 操作系统 之间 的 通信 ； 由于 两者 的 差别 ， 编程 实现 又 有 很大 不同 。 实现 机制 　 　 一般 的 RPC 通常 采用 所谓 的 ClientServer 工作 方式 ， 这是 一种 非对称 的 工作 方式 ， RPC 的 调用者 处在 Client 方 ， 而 远程 过程 即 被 调用者 处在 Server 方 。 如图所示 。 　 　 发 往 网络 的 信息 ， 由 网络 中库 例程 处理 　 　 使用 面向 连接 或非 连接 协议 传送 信息 　 　 Server 进程 等待 客户 请求 ， 并 激活 远程 过程 　 　 远程 过程 执行 完毕 ， 将 结果 交给 网络 　 　 网络 将 结果 信息 传送 到 Client 方 　 　 Client 接受 结果 信息 图 一般 RPC 模型 　 　 在 两种 不同 的 操作系统 之间 实现 RPC 调用 ， 所 采用 的 工作 机制 和 单一 系统 的 基本一致 ， 但 由于 系统 的 不同 ， 运行 在 其 上 的 进程 也 不同 。 如图所示 ： 图 跨平台 RPC 模型 　 　 图中 ， ′ ′ 和 图 中 实现 相同 的 功能 ， 即 Unix 系统 上 的 调用者 通过 Client 进程 既 可 经过 、 、 、 、 、 调用 本 系统 内 远程 过程 ， 也 可 经过 、 ′ 、 ′ 、 ′ 、 ′ 、 实现 WindowsNT 系统 上 的 远程 过程 调用 。 同样 WindowsNT 系统 上 的 调用者 通过 Client 进程 经过 ′ 、 ′ 、 ′ 、 ′ 、 ′ 、 ′ 和 ′ 、 、 、 、 、 ′ 调用 本 系统 及 Unix 系统 的 远 地 过程 。 　 　 由于 系统 的 差异 ， Unix 系统 和 NT 系统 的 服务 进程 的 实现 是 不同 的 ， 图中 Client 与 Client ′ ， Server 与 Server ′ 进程 实现 功能 一样 ， 但 实现 方法 不同 。 具体 细节 在 程序 介绍 中 说明 。 函数 介绍 　 　 用户 可见 的 函数 有个 ， 调用 方 Client 的 CallRemoteProc ， 不论是 在 Unix 还是 WindowsNT 上 ， 用户 都 用 此 函数调用 异地 过程 。 被 调用 方 Server 的 两个 函数 ： ① RegisterRemoteProc 为 每个 需要 被 异地 调用 的 过程 ， 在 调用 前 在 本机 的 远程 调用 过程 表内 注册 ； ② DelRegistration 用于 取消 本机 的 远程 调用 过程 表内 已 注册 的 过程 。 　 　 不论 在 Unix 还是 在 WindowsNT 上 ， 如 一个 进程 需要 被 异地 调用 时 ， 必须 使用 RegisterRemoteProc 注册 ， 之后 此 过程 可 被 任意 系统 上 的 CallRemoteProc 调用 。 当 此 进程 不再 被 调用 时 ， 使用 DelRegistration 在 远程 调用 过程 表内 注销 此 过程 ， 以免 浪费资源 。 　 　 此外 ， 还有 一些 对 用户 不 可见 的 函数 集中 在 Server 方 ， 主要 的 两个 函数 是 ： 为 注册 服务 的 RegisteredProc 和 为 Client 端 远程 过程 调用 服务 的 CallProc 。 它们 是 必须 在 使用 远程 调用 的 功能 前 ， 被 启动 的 后台 守护 服务 进程 。 前 一个 等待 本 机上 由 RegisterRemoteProc 和 DelRegistration 发出请求 ， 以 维护 远程 调用 过程 表 记录 当前 最新 信息 。 后者 等待 网上 任一 机器 上 的 进程 发出 调用 本 机 过程 的 申请 ， 通过 检索 远程 调用 过程 表 ， 确定 此 过程 是否 可 调用 ， 并 将 调用 结果 或 不可 调用 信息 返回 发出 申请 的 进程 。 程序 简介 Server 方 服务程序 　 　 据 上 所述 Server 方 的 个 主要 函数 实现 两个 功能 ： 注册 和 监控 Client 方 调用 进程 申请 。 RegisteredProc ， RegisterRemoteProc 和 DelRegistration 实现 注册 功能 ； CallProc 反应 Client 方 调用 进程 的 申请 。 无论 Unix 还是 NT 系统 ， 这种 函数 的 功能 划分 是 一致 的 。 下面 分别 介绍 实现 方法 。 　 　 Unix 系统 上 的 Server 方 程序 　 　 注册 主要 用到 同一 台 机器 上 进程 间 的 信息 交换 技术 。 Unix 提供 消息 队列 实现 进程 间 消息 传送 ， 所有 的 消息 都 放在 内核 并且 都 有 一个 相应 的 消息 队列 号 ， 标志 号 记作 msgid 用来 标识 某一 特定 的 消息 队列 ， 进程 可 通过 所知 msgid 读写 此 队列 中 的 某些 消息 。 系统 调用 msgget 可 创建 一个 新 的 消息 或 访问 一个 已 存在 的 消息 队列 ， 一旦 通过 msgget 打开 一 消息 队列 ， 便 可 通过 msgsnd 调用 把 一个 消息 挂 在 队列 上 。 其它 进程 可 通过 系统 调用 msgrcv 从 队列 中 读取 此 消息 。 　 　 Client 方 的 监控 程序 主要 用到 网络 间 进程 通信 。 Unix 提供 API 之一 的 Berkeley 套 接字 Socket 提供 多个 由 应用程序 维护 的 系统 调用 来 建立 进程 间 的 网络连接 。 图 说明 这部分 程序 利用 面向 连接 的 Socket 系统 调用 的 实现 过程 。 　 　 监控 程序 的 主要 部分 如图 中 Server 部分 所示 ， 完成 对 Client 方 的 申请 反应 ， 并 调用 所 需 进程 。 　 　 WindowsNT 上 的 Server 方 程序 图 监控 程序 socker 结构 　 　 注册 部分 的 实现 与 Unix 完全 不同 ， 由于 NT 没有 消息 队列 的 机制 ， 使用 命名 管道 的 方法 传送 信息 。 命名 管道 是 服务 进程 　 　 一个 或 多个 客户 进程 之间 通信 的 单向 或 双向 管道 。 registeredProc 进程 作为 此处 的 服务 进程 在 调用 CreateNamePipe 函数 建立 一个 命名 管道 实例 时 指定 名字 ， 所有 命名 管道 实例 共享 相同 的 管道 名 ， 作为 客户 进程 的 RegisterRemoteProc 和 DelRegistration ， 在 调用 CreateFile 和 CallNamePipe 函数 时 指定 同样 的 管道 名 ， 连接 到 一个 管道 实例 上 。 这样 ， 进程 使用 相同 名字 的 管道 进行 通信 ， 完成 对 远程 调用 过程 表 的 管理 。 　 　 NT 上 的 监控 部分 应用 WinSock 编写 ， WinSock 由 BerkeleySocket 发展 来 的 ， 它们 的 基本原理 一致 ， 所以 这部分 的 实现 核心 及 结构 与 Unix 上 一致 ， 如图所示 。 但 由于 WinSock 的 特点 ， 程序实现 细节 仍 存在 差异 。 首先 ， 由于 WindowsSockets 的 服务 是 以 动态 连接 库 WinSockDLL 形式 实现 的 ， 所以 必须 要 先 调用 WSAStartup 函数 对 WindowsSocketsDLL 进行 初始化 ， 协商 WinSock 的 版本 支持 ， 并 分配 必要 的 资源 。 在 应用程序 关闭 套 接字 后 ， 还应 调用 WSACleanup 终止 WindowsSocketsDLL 的 使用 ， 并 释放 资源 ， 以备 下次 使用 。 其次 ， NT 产生 子 进程 的 函数 CreateProcess 实现 机制 与 Unix 系统 中 的 fork 不同 ， Socket 号 不能 直接 传给 子 进程 ， 所以 父 进程 须 调用函数 WSADuplicateSocket 获得 套 接字 描述符 ， 使得 子 进程 调用函数 WSASocket 之后 ， 与 父 进程 共享 相同 的 套 接字 描述符 。 其余部分 基本 与 Unix 相同 。 Client 方 程序 　 　 Unix 系统 和 WindowsNT 上 Client 方 程序 在 实现 方法 及 程序结构 上 差别 不 大 ， 所以 不 分别 说明 。 　 　 调用 方 的 CallRemoteProc 函数 主要 应用 Socket 应用软件 中 的 Client 方 的 系统 调用 ， 实现 与 远程 机器间 的 通信 ， 完成 对 其 上 过程 的 调用 ， 并 返回 结果 。 程序实现 如图 中 Client 部分 所示 。 作者 单位 ： 中国 航天工业 总公司 CADCAM 开发 与 培训中心 ， 北京 参考文献 全民 ， 张倪 工作站 系统结构 、 软件开发 及 应用 北京 ： 国防工业 出版社 ， 钟皓 ， 陈 淑珍 Windows 环境 下 的 TCPIP 网络 编程 及 应用 计算机 工程 ， ， ： MicrosoftCorporationMicrosoftWin 程序员 参考 大全 二 北京 ： 清华大学出版社 ，