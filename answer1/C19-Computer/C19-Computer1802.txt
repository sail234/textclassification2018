微型机 与 应用 MICROCOMPUTERITSAPPLICATIONS 　 No 　 No 　 P ， 用 VRML 语言 构造 动态 虚拟现实 模型 张宁 　 袁宏春 摘要 ： 用 VRML ． 语言 构造 动态 虚拟现实 模型 的 几种 方法 ， 针对 每种 方法 给出 了 VRML 语法 实例 ， 并 着重 介绍 了 插值 器 在 制作 对象 动画 中 的 重要 作用 。 关键词 ： 插值 器 路由 虚拟现实 模型 VRML 语言 　 　 在 虚拟现实 技术 中 ， 建模 构造 虚拟现实 模型 是 最 基础 也 是 最 重要 的 一个 环节 ， 只有 在 个 生动 逼真 的 虚拟世界 中 ， 用户 才能 愉快 地 进行 人机交互 、 世界 漫游 等 活动 。 VRML （ VirtualRealityMarkupLanguage ） 语言 就是 为了 在 WWW 上 构造 虚拟现实 模型 而 诞生 的 ， 它 是 个 DWeb 标准 。 到 目前为止 VRML 有个 版本 ： VRML ． 和 VRML ． 。 这个 版本 最大 的 不同 在于 ， VRML ． 没有 包括 高级 交互 和 动画 性能 ， 因此 它 展现 的 仍然 是 一个 静态 的 世界 ， 而 VRML ． 在 这方面 获得 了 重大突破 ， 它 把 目前为止 的 各项 多媒体技术 融合 进去 ， 使 构造 出 的 三维 虚拟世界 具有 声音 、 动画 、 人机交互 等 功能 ， 从而 使 计算机 生动 逼真 地 模拟 了 真实 的 世界 。 VRML ． 提供 了 多种 构造 动态 虚拟现实 模型 的 方法 ， 以下 将 予以 介绍 。 （ 在 实现 中所举 例子 读者 可以 在 机器 上 自己 实验 ， 可用 如 Microsoft 的 WordPad 编辑器 创建 VRML 文件 ， 文件 必须 以 ． wrl 作为 扩展名 ， 只要 所用 浏览器 NetscapeNavigator 或 InternetExplorer 安装 了 VRML 的 插件 ， 双击 自己 的 文件 ， 就 能 显示 出所 构造 的 虚拟现实 环境 ） 。 构造 动态 虚拟现实 模型 的 几种 方法 　 　 ． 使用 插值 器 改变 对象 　 　 插值 器 节点 有 很 多种 ， 各自 完成 不同 的 功能 ， 如 改变 对象 在 场景 中 方向 的 OrientationInterpolator 节点 ， 用于 移动 的 PositionInterpolator 节点 ， 用于 变体 的 CoordinateInterpolator 节点 ， 还有 ColorInterpolator 可以 修改 Material 节点 的 颜色 ， NormalInterpolator 可以 改变 法向 节点 中 的 值 等等 。 另外 ， ScalarInterpolator 是 个 基本 的 构造 模块 ， 由 它 可以 建造 其它 许多 插值 。 使用 插值 器 改变 对象 的 原理 大致 是 相同 的 ， 这里 以 OrientationInterpolator 节点 实现 旋转 对象 为例 。 　 　 下面 是 OrientationInterpolator 节点 的 定义 ： 　 　 OrientationInterpolator ｛ 　 　 eventIn 　 　 　 　 SFFloat 　 　 　 　 setfraction 　 　 exposedField 　 MFFloat 　 　 　 key 　 　 　 　 　 　 　 exposedField 　 MFRotation 　 keyValue 　 　 　 eventOut 　 　 　 SFRotation 　 valuechanged 　 　 ｝ 　 　 它 通常 路由 到 个 Transform 节点 的 rotationexposedField 。 其中 的 keyValue 是 个 SFRotation ， 用来 设置 对象 所 期望 的 方向 。 　 　 在 驱动 插值 器 过程 中 ， 由 TimeSensor 节点 随 时间 的 流逝 产生 ～ 之间 递增 的 SFFloat 值 ， 每 产生 个值 ， 经过 路由 ， OrientationInterpolator 节点 接收 这个 值 ， 并 把 它 的 值 与 关键码 进行 匹配 ， 一旦 匹配 成功 ， 则 对应 于 这个 关键码 （ key ） 的 关键码 值 （ keyValue ） 被 发送 出去 ， 如果 这个 值 处于 个 相邻 的 关键码 之间 ， 则 产生 个 在 与 个 关键码 相对 应 的 关键码 值 之间 进行 插值 的 事件 ， 得到 的 关键码 值 又 通过 第条 路由 ， 使 Transform 节点 接收 到 这个 值 ， 从而 改变 立体 的 位置 。 　 　 简单 地 讲 ， 使用 插值 器 改变 对象 形成 动画 ， 用户 只 需 给出 一系列 运动 轨迹 的 中间 态势 ， 由 VRML 解释器 自动 平滑 对象 在 这些 中间 态势 间 的 过渡 ， 从而 得到 使 对象 按 所 给 路线 变化 的 动态效果 。 　 　 ． 在 对象 上 包装 电影 文件 　 　 把 电影 作为 一个 移动 的 纹理 施加 到 对象 上 ， 能 使 虚拟世界 呈现 一种 动态效果 。 例如 在 个 虚拟 房间 中 放置 了 台 电视机 ， 当 漫游者 进入 房间 时 ， 看见 电视机 屏幕 上 正在 放映 电视 或 电影 ， 而 并非 一副 静止 死板 的 图像 ， 显然 就 大大 地 增强 了 虚拟世界 的 逼真 程度 。 由 MovieTexture 节点 完成 对 对象 的 包装 ， MovieTexture 节点 中 的 url 域 包含 个 电影 格式 的 文件 ， 而 不是 个 静态 图像文件 ， 电影 的 播放 可以 有 开始 、 停止 、 继续 、 循环 以及 以 非正常 的 速度 进行 播映 。 　 　 ． 使用 角色 进行 对象 切换 来 构造 动画 效果 　 　 所谓 角色 是 指个 平坦 的 始终 面向 阅读器 的 图像 ， 它 是 一种 在 虚拟世界 中 的 D 对象 ， 可以 渲染 得 更 快 ， 但 它 是 平面 的 ， 如果 从 侧面 看 ， 它们 就 会 消失掉 ， 为了 得到 满意 的 效果 ， 角色 需要 始终 面向 观众 。 　 　 角色 的 切换 是 由 MySwitch 节点 完成 的 ， 该 节点 可以 根据 变化 的 whichchoice 的 值 选择 相应 的 节点 显示 。 由 TimeSensor 节点 给出 动画 开始 时间 ， 把 fractionchanged 事件 的 值 传递 到 MyScript 节点 ， 并 被 该 节点 的 fraction 函数 处理 ， 得到 whichChoice 事件 的 值 ， 最后 把 whichChoice 事件 的 值 传递 到 MySwich 节点 ， 从而 随 时间 的 流逝 依次 选择 个 角色 显示 出来 ， 直至 时间 结束 完成 整个 动画 过程 。 　 　 ． 视点 动画 　 　 假想 用户 站 在 铁路 旁 ， 用户 看到 的 路边 的 房子 是 静止 的 ， 当 用户 跳上 火车 ， 火车 开动 后 ， 用户 发现 路边 的 房子 开始 运动 起来 ， 这 是因为 用户 的 视点 不断 移动 的 原因 。 由于 VRML 提供 视点 Viewpoint 节点 ， 这个 节点 允许 为 用户 设置 个 有趣 的 理想 点 的 位置 和 方向 ， 通过 不断 改变 视点 的 位置 和 方向 可以 达到 和 不断 改变 对象 位置 和 方向 相似 的 动画 效果 。 　 　 把 fractionchanged 事件 （ 产生 的 时间 ） 值 传递 到 旋转 节点 （ OrientationInterpolator ） 和 位置 节点 （ PositionInterpolator ） 以 产生 新 的 视点 方向 和 位置 ， 分别 把 新 产生 的 视点 方向 位置 传递 到 视点 （ Viewpoint ） 节点 中以 改变 原先 的 值 ， 从而 产生 动画 效果 。 　 　 ． 使用 纹理 坐标 的 动画 　 　 如果 把 幅 二维 图像 包裹 在 对象 上来 进行 着色 ， 就 如同 在 墙上 贴墙纸 一样 ， 也 能 得到 很 好 的 效果 ， 这种 二维 图像 叫做 纹理 。 节点 ImageTexture 负责 添加 纹理 ， 纹理 图像 一般 是 JPEG 文件 ， 有时 也 可以 是 GIF 文件 。 　 　 假设 要 虚拟 个 瀑布 ， 可以 在 个 几何体 上 施加 一种 水 的 纹理 ， 但是 这种 纹理 是 静止 的 ， 要 让 它动 起来 ， 有 一种 比较简单 的 方法 ： 设置 对 纹理 与 对象 之间 的 映射 所 进行 的 变换 ， 即 通过 TextureTransform 节点 移动 或 旋转 纹理 ， 以 产生 动画 效果 。 在 水 的 纹理 变换 上 ， 可以 使 纹理 在 纵向 坐标 上 按 时间 循环 地 移动 ， 用户 就 会 看到 瀑布 落水 的 动画 了 。 VRML 构造 动态 虚拟现实 模型 的 实现 　 　 以下 给出 几种 构造 动态 虚拟现实 模型 方法 的 实例 。 　 　 ． 完整 的 “ T ” 形 立体 旋转 落下 的 动画 代码 。 　 　 ＃ VRMLV ． utf 　 　 DEFTTransform ｛ 　 　 center － 　 　 children 　 　 　 　 Shape ｛ 　 　 　 　 　 　 geometryBox ｛ size ｝ 　 　 　 　 　 　 appearanceAppearance ｛ 　 　 　 　 　 　 　 　 materialMaterial ｛ 　 　 　 　 　 　 　 　 　 　 diffuseColor 　 　 　 　 　 　 　 ｝ 　 　 　 　 　 　 ｝ 　 　 　 　 ｝ 　 　 　 　 Transform ｛ 　 　 　 　 　 　 translation 　 　 　 　 　 　 children 　 　 　 　 　 　 　 　 Shape ｛ 　 　 　 　 　 　 　 　 　 　 geometryBox ｛ size ｝ 　 　 　 　 　 　 　 　 　 　 appearanceAppearance ｛ 　 　 　 　 　 　 　 　 　 　 　 　 materialMaterial ｛ 　 　 　 　 　 　 　 　 　 　 　 　 　 　 diffuseColor 　 　 　 　 　 　 　 　 　 　 　 ｝ 　 　 　 　 　 　 　 　 　 ｝ 　 　 　 　 　 　 　 ｝ 　 　 　 　 　 　 　 　 ｝ 　 　 　 　 ｝ 　 　 DEFPOrientationInterpolator ｛ 　 　 key ， ． ， ． 　 　 keyValue ， － ， － 　 　 DEFTSTimeSensor 　 　 stopTime － 　 　 loopTRUE 　 　 cycleInterval 　 　 ｝ 　 　 ROUTETS ． fractionchangedTOP ． set 　 　 ROUTEP ． valuechangedTOT ． setrotation 　 　 本例 中 ， 立体 从 位置 开始 启动 ， 当 时间 达到 一半 的 时候 （ ． ） ， 立体 完成 绕 Y 轴 逆时针 ° 旋转 （ ． ） ， 当 时间 达到 ． 处 的 时候 ， 立体 完成 绕 Z 轴 顺时针 ° 旋转 （ ． ． － ． ． ） ， 然后 稳定 到 时间 满 （ ） ， 其中 整个 过程 所用 时间 由 TimeSensor 节点 中 的 cycleInterval 的 值来 控制 ， 本例 中 整个 旋转 倒下 过程 耗时 为 s 。 　 　 ． 在 个 简单 的 立方体 上 放映 一段 电影 。 　 　 Shape ｛ 　 　 　 　 AppearanceAppearance ｛ 　 　 　 　 　 　 MaterialMaterial ｛ ｝ 　 　 　 　 textureDEFMMovieTexture ｛ 　 　 　 　 　 　 url ″ test ． mpg ″ 　 　 　 　 　 　 stopTime － 　 　 　 　 　 　 loopTRUE 　 　 　 　 　 　 ｝ 　 　 ｝ 　 　 geometryBox ｝ 　 　 ． 以 视觉 游戏 DOOM 中 的 个 怪物 为例 ， 当 用 鼠标 点击 它 （ 代表 用 枪击 中 它 时 ， 怪物 进入 个 动画 的 死去 序列 过程 ， 最后 再也 看不到 它 。 整个 动画 由幅 静态 图片 构成 ， 每个 图片 是 个 角色 。 要 达到 预期 动画 效果 ， 需要 第一幅 图像 感知 到 用户 鼠标 的 点击 动作 ， 然后 在 一定 时间 内 逐个 切换 角色 ， 直到 最后 一幅 图像 ， 这样 用户 就 能 在 屏幕 上 看到 怪物 中 枪 死去 的 整个 动画 。 VRML 文件 代码 如下 ： 　 　 DEFTSTouchSensor 　 　 DEFMySwitchSwich 　 　 　 　 whichChoice 　 　 　 　 choice 　 　 　 　 　 　 　 　 Shape ｛ 　 　 　 　 　 　 　 　 　 AppearanceAppearance ｛ 　 　 　 　 　 　 　 　 　 textureImageTexture ｛ 　 　 　 　 　 　 　 　 　 　 　 url ″ monsterl ． gif ″ 　 　 　 　 　 　 　 　 　 　 　 ｝ 　 　 　 　 　 　 　 　 　 　 ｝ 　 　 　 　 　 　 　 　 　 　 geometryDEFIFSIndexedFaceSet ｛ 　 　 　 　 　 　 　 　 　 　 coordCoordinate ｛ 　 　 　 　 　 　 　 　 　 　 　 　 　 point － － ， － ， ， － 　 　 　 　 　 　 　 　 　 　 ｝ 　 　 　 　 　 　 　 　 　 　 coordIndex ， ， ， 　 　 　 　 　 　 　 　 　 ｝ 　 　 　 　 　 　 　 　 ｝ 　 　 　 　 　 　 　 　 … … … … … … （ 同上 Shape 节点 ， url 域 依次 为 其它 图片 文件 monster ． gif 到 monster ． gif ） … … … … … … 　 　 　 　 　 　 　 　 ｝ 　 　 DEFTimeTimeSensor ｛ 　 　 　 　 cycleInterval 　 　 　 　 　 　 　 　 ｝ 　 　 DEFMyScriptScript ｛ 　 　 eventInSFFloatfraction 　 　 eventOutSFIntwhichChoice 　 　 url ″ vrmlscript ： 　 　 　 　 　 　 functionfraction （ value ） ｛ 　 　 　 　 　 　 　 　 　 whichChoice ＝ value ； 　 　 　 　 　 　 ｝ ″ 　 　 ｝ 　 　 ROUTETS ． touchTimeTOTime ． startTime 　 　 ROUTETime ． fractionchangedTOMyScript ． fraction 　 　 ROUTEMyScript ． whichChoiceTOMySwich ． whichChoice 　 　 ． 使用 纹理 虚拟 瀑布 的 简单 的 框架 代码 　 　 Group ｛ 　 　 clildrenShape ｛ 　 　 　 　 　 　 appearanceAppearance ｛ 　 　 　 　 　 　 　 　 textureImageTexture ｛ url ″ water ． jpg ″ ｝ 　 　 　 　 　 　 　 　 textureTransformDEFTTTexture － 　 　 　 　 　 　 　 　 　 　 　 　 　 　 Transform ｛ … … … … ｝ 　 　 　 　 　 　 ｝ 　 　 　 　 　 　 geometryExtrusion ｛ … … ｝ 　 　 　 　 ｝ 　 　 ｝ 　 　 DEFTSTimeSensor ｛ ｝ 　 　 DEFSScript ｛ … … … … ｝ 　 　 ROUTETS ． fractionchangedTOS ． fraction 　 　 ROUTES ． translationTOTT ． settranslation 结束语 　 　 VRML ． 提供 的 几种 构造 动态 虚拟 模型 的 方法 ， 分别 适用 于 不同 场合 ， 例如 在 漫游 时 使用 视点 移动 来 产生 动态效果 ； 在 绘制 波光粼粼 的 湖面 时用 纹理 坐标 的 移动 来 虚拟现实 等 。 　 　 从 上面 的 例子 可以 看出 ， 对象 动画 的 开始 和 结束 往往 由 节点 Timesensor 决定 。 而 对象 动画 的 轨迹 是 由 插值 器来 决定 的 ， 无论是 对象 移动 还是 视点 移动 （ 其中 在 对象 上 包装 电影 、 使用 角色 进行 场景 切换 、 纹理 坐标 动画 这种 仅仅 是 使 虚拟世界 具有 动态效果 ， 而 并非 真实 的 对象 位置 变换 ） 。 因此 ， 可以 说 ， 各种 插值 器为 用户 设计 千姿百态 的 动画 效果 提供 了 基础 ， 对 插值 器 的 灵活 使用 可以 使 构造 出 的 虚拟世界 充满生机 和 活力 。 张宁 （ 成都电子科技大学 微型机 研究所 ） 袁宏春 （ 成都电子科技大学 微型机 研究所 ） 收稿 日期 ： － －