信息 与 控制 InformationandControl 年 　 第卷 　 第期 　 Vol 　 No 　 工控 软件设计 中 的 复用技术 研究 贾宏宇 　 施 　 仁 　 　 摘 　 要 ： 本文 通过 分析 工控 软件设计 的 特点 和 发展趋势 ， 指出 采用 软件 复用技术 是 解决目前 工控 软件设计 过程 中 效率 低 ， 重复劳动 多 ， 软件 灵活性 差 的 一条 很 好 的 途径 ， 并 提出 了 一种 全新 的 工控 软件设计 体系 — — 部件 化 结构 ， 作为 工控 软件设计 过程 中 复用技术 的 一种 解决方案 ． 　 　 关键词 ： 工控 软件 ， 复用 ， 部件 ， 包容 件 ， 被 包容 件 　 　 中 图 分类号 ： TP 　 　 　 　 　 　 文献 标识码 ： BRESEARCHONTHEREUSETECHNOLOGYININDUSTRYSOFTWAREDESIGNJIAHongyuSHIRenAutomaticControlDepartmentXianJiaotongUniversityAbstract 　 ByanalyzingthecharacteristicsanddevelopmenttrendoftheindustrysoftwaredesignthispaperpointsoutthatreuseisthewaytosolvetheproblemsoflowefficiencyrepetitionandbadflexibilityinindustrysoftwaredesignAnditputsforwardanewarchitectureComponentArchitectureinindustrysoftwaredesignasananswertothereuseKeywords 　 industrysoftwarereusecomponentcontainingcomponentcontainedcomponent 　 前言 　 　 从 首次 开始 采用 计算机 进行 工业 控制 至今 ， 特别 是 年代 中期 集散 控制系统 （ DCS ） 出现 以来 ， 工控 软件 的 设计 取得 了 长足 的 进步 ， 也 先后 出现 了 许多 著名 的 工控 软件 ， 如 Honeywell 、 Yokogawa 等 各大 DCS 厂家 开发 的 DCS 配套 软件 ， Wonderware 等 公司 开发 的 工业 控制 组态 软件 Intouch 等 ， 然而 一套 功能完善 的 工控 软件设计 是 自动控制 、 计算机 和 通信 （ 即 C ） 技术 的 融合 ， 涉及 的 知识 领域 宽广 ， 软件 规模 庞大 ， 开发周期 长 ， 上述 软件产品 虽然 大多数 性能优越 ， 但 终归 各有千秋 ， 没有 任何 一套 软件 在 各 方面 都 是 最优 的 ． 国内 工控 软件 的 开发 目前 也 比较 多 ， 大多数 与 工业 控制 有关 的 研究所 、 大专院校 、 公司 企业 都 组织 人员 进行 过 工控 软件 的 研究 与 开发 工作 ， 其中 虽然 有 不少 出色 的 作品 ， 然而 同 国外同类 软件 相比 ， 差距 仍然 很大 ， 究其原因 ， 我们 不难 发现 ， 在 工控 软件 的 开发 过程 中 存在 有 大量 的 重复 开发 ， 甚至于 同一个 单位 在 接到 不同 的 工控 软件设计 任务 时 都 要 从头开始 ， 造成 了 人力 、 物力 资源 的 严重 浪费 ， 软件 成本 升高 ， 市场 竞争力 削弱 ． 本文 的 目的 在于 说明 通过 采用 有效 的 软件 复用技术 来 解决目前 这种 工控 软件设计 过程 中 效率 低 ， 重复劳动 多 ， 软件 灵活性 差 的 问题 ， 并 提出 了 一种 切实可行 的 工控 软件设计 新 体系 — 部件 化 结构 ， 以 实现 跨越 时间 和 地域 限制 的 高度 形散 神凝 的 高效 软件 复用 ， 从而 将 国内 甚至于 国外 的 各种 工控 软件 的 优点 大 范围 地 集成 到 一起 ， 实现 从 手工 编程 到 软件 生产 的 转变 ， 促进 全面 最优 的 工控 软件 的 诞生 ． 　 软件 复用 的 基本概念 　 　 软件 复用 始于 年代 的 软件 危机 ． 从 软件工程 的 角度看 ， 软件 复用 不是 在 程序执行 期间 重复 调用 某段 源代码 ， 也 不是 程序 的 重复 运行 或 为了 完成 分布 处理 而 进行 的 拷贝 ， 软件 复用 指 的 是 在 开发新 的 软件系统 时 ， 对 已有 软件 的 重新 使用 ， 该软件 可能 是 已 存在 的 软件 ， 也 可能 是 专门 设计 的 可 重用 组件 ． 之所以 可以 进行 软件 复用 ， 是 由于 软件 本身 具有 在 某种程度 上 的 一致性 和 不变性 ． 如果 软件 不 具有 一致性 ， 则 很 难 进行 分析 和 综合 复用 ， 也 很 难 实现 软件开发 的 自动化 ． 而 不变性 指 的 是 软件 在 演化过程 中 具有 的 相似性 ， 对于 软件 的 维护 极为重要 ． 　 　 软件 复用 的 关键 是 抽象 ． 抽象 是 指 对 可 复用 对象 的 提炼 概括 ， 即将 对 对象 的 基本操作 和 处理 从 语言 、 机器 和 其它 环境 细节 中 提炼 出来 ， 每 一个 抽象 可以 描述 相关 的 可 复用 对象 集 ， 而 每 一 相关 的 可 复用 对象 集 决定 了 一个 对象 ． 能否 在 软件工程 中 成功 地 应用 某 一种 复用技术 ， 取决于 复用技术 所 具有 的 抽象层次 ． 抽象层次 越高 ， 复用 的 可能性 越大 ． 整个 软件 复用 的 体系结构 是 一种 非 循环 的 有向图 结构 ． 　 工控 软件设计 的 特点 与 发展趋势 　 　 工控 软件 的 设计 ， 乍 看起来 千头万绪 ， 涉及面 过于 宽广 ， 有 复杂 的 数据流 向 ， 有 趋势 、 工位 等 复杂 的 模块 ， 有 实时性 、 可靠性 等 严格要求 ， 然而 ， 通过 仔细 的 分析 ， 不难 发现 ： 一个 完整 的 工控 软件 不外乎 由 以下 几个 大 的 子系统 ， 总控 模块 、 数据 输入 输出模块 、 控制算法 模块 和 包括 画面 显示 、 报表 打印 、 文件 记录 （ 报警 记录 、 趋势 记录 等 ） 等 在内 的 人机接口 模块 所 构成 ， 这些 子系统 之间 的 耦合 作用 全部 集中 于 系统 的 实时 数据库 ． 由于 这些 子系统 在 各种类型 的 工控 软件 中 所 体现 出来 的 在 很大 程度 上 的 一致性 和 不变性 ， 奠定 了 它们 的 可 抽象性 从而 可 复用 性 的 基础 ． 通过 良好 地 定义 这些 子系统 访问 数据库 的 接口 ， 我们 完全 可以 将 这些 子系统 或 将 它们 进一步 细分 以后 形成 的 更 小 的 子系统 进行 抽象 ， 从而 在 工控 软件 的 开发 过程 中 加以 复用 ． 　 　 从 工控 软件设计 的 发展趋势 来看 ， 打破 “ 孤岛 ” 式 的 割据 状态 ， 实现 系统 的 开放性 、 通用性 的 呼声 越来越 高 ， 各个 公司 、 各个 厂家 生产 的 系统 要求 能够 进行 相互 联结 ， 相互 通信 ． 如果 能 有 一种 技术 ， 使得 可以 在 一套 系统 中 无缝 地 集成 不同 厂家 按照 某种 一致 的 标准 然而 独立 地 设计 的 功能模块 ， 而且 都 不 需要 相互了解 对方 的 实现 ， 则 上述 问题 自然 迎刃而解 ． 而 软件 复用技术 发展 到 今天 ， 设计 这样 的 系统 已 基本 可以 实现 ． 下面 就 通过 和 目前 已 在 工控 软件设计 中 使用 的 主要 软件 复用技术 相对 比 来 提出 一套 工控 软件设计 的 新 体系 — 部件 化 结构 ， 以期 实现 上面 的 理想 系统 ． 　 目前 工控 软件设计 中 采用 的 复用技术 形式 　 　 事实上 ， 在 目前 的 工控 软件设计 中 ， 已有 不少 的 软件 复用技术 在 使用 ， 从 大 的 方面 分 ， 主要 表现 为 源代码 复用 和 函数库 复用 两种 形式 ． 源代码 复用 这种 形式 的 复用 主要 体现 为 在 同一个 单位 内部 采用 函数 、 封装 类 的 形式 在 源代码 级 进行 复用 ． 这种 复用 形式 虽然 可以 在 单位 内部 对 软件系统 的 前后 延续 、 缩短 开发 进程 方面 起到 一定 的 作用 ， 而且 在 目前 所 采用 的 软件 复用技术 中 占有 相当 大 的 比例 ， 然而 它 存在 有 以下 的 比较 大 的 缺点 ： 首先 是 编程语言 的 障碍 ， 为了 复用 该 被 复用 对象 ， 以后 系统 的 设计 必须 采用 与 当初 设计 该 被 复用 对象 时 相同 的 编程语言 ， 无法 做到 编程语言 的 独立性 ， 更 无法 做到 分布式 跨平台 的 软件 复用 ； 其次 是 通过 复用 生成 新 的 系统 时 ， 必须 经过 编译 ， 无法 做到 即插即用 ； 第三 是 被 复用 对象 的 版本控制 完全 由人来 进行 ， 无法 做到 版本 的 自动更新 ． 函数库 复用 使用 函数库 （ 包括 静态 链接库 和 动态链接库 ） 的 形式 进行 复用 比 源代码 复用 有 较大 的 改进 ， 由于 库是 一种 二进制 的 形式 ， 故 可以 做到 一定 程度 上 的 语言 无关 性 ， 然而 静态 链接库 仍然 解决不了 分布式 跨平台 的 复用 和 编译 问题 ； 动态链接库 依旧 在 版本控制 、 对系统 支撑 平台 的 最少 依赖性 和 软件 升级 方面 存在 有 较大 的 技术 问题 ． 　 部件 化 结构 　 　 针对 上述 复用技术 的 不足 及 当前 软件技术 的 飞速发展 ， 本文 作者 提出 了 一种 全新 的 工控 软件设计 体系 — — 部件 化 结构 ， 以求 最大 限度 地 进行 软件 复用 和 软件 集成 ． 这里 所说 的 部件 指 的 是 通过 经 某种 注册 机制 而 使 相互之间 可以 理解 的 标准接口 ， 从而 实现 具有 一定 功能 但 封装 了 其 实现 的 二进制 功能模块 ． 通过 使用 标准接口 ， 保证 各个 部件 之间 在 二进制 代码 级 的 相互 兼容 和 可 利用 、 互操作 ， 就 可以 做到 编程语言 的 无关 性 ， 对系统 支撑 平台 的 最少 依赖性 ， 以及 分布式 的 跨平台 应用 ； 通过 采用 一定 的 注册 机制 ， 就 可以 解决 软件 升级 时 的 版本控制 问题 ； 只要 接口 保持 不变 ， 各个 部件 就 可以 单独 升级 而 不 需要 在 生成 新 系统 时 整体 重新 编译 ， 生成 新 系统 可以 采用 搭积木 似的 无缝 集成 的 方式 来 进行 ． 因此 ， 采用 部件 化 结构 可以 很 好地解决 目前 工控 软件设计 中 进行 软件 复用 时所 采用 技术 的 不足 与 局限 ． 　 　 我们 将 构成 部件 化 结构 的 部件 分为 两大类 ： 包容 件 和 被 包容 件 ． 　 　 被 包容 件 指 的 是 具有 一定 功能 ， 可以 经 某种 注册 机制 使 其它 部件 了解 其 存在 及 功能 ， 并 通过 定义 良好 的 接口 与 其它 部件 进行 通信 和 或 提供 服务 的 二进制 功能模块 ， 例如 报警 处理部件 、 趋势 记录 部件 等 ． 　 　 包容 件 指 的 是 能够 理解 被 包容 件 的 注册 信息 ， 并 通过 被 包容 件 暴露 的 接口 使用 被 包容 件 的 二进制 功能模块 ， 包容 件 主要 用于 实现 我们 通常 所说 的 工控 软件 中 的 总控 模块 或 框架 ． 　 　 由 包容 件 和 被 包容 件 构成 的 部件 化 结构 是 一种 客户服务器 （ CS ） 结构 ． 由于 部件 在 设计 过程 中 相互 独立 ， 从而 为 它们 的 复用 奠定 了 良好 的 基础 ， 而且 只要 接口定义 良好 ， 不同 厂家 生产 的 部件 完全 可以 无缝 地 集成 在 一起 ． 另一方面 ， 按照 部件 在 一个 工控 软件 中所起 作用 的 不同 ， 可以 将 它们 大体 分为 ： 工控 软件 框架 、 数据 采集 服务器 、 数据 采集 客户端 、 控制算法 、 报警 处理 、 趋势 记录 、 报表 管理 等 ， 在 此基础 上 还 可作 进一步 的 细分 ， 从而 达到 接口定义 清晰 ， 复用 程度 高 的 目的 ． 整个 部件 化 结构 的 工控 软件设计 体系 如图所示 图 　 整个 部件 化 结构 的 工程 软件设计 体系 　 　 目前 可 利用 的 开发 环境 　 　 如果 在 以前 提出 采用 部件 化 结构 进行 工控 软件设计 或许 是 纸上谈兵 ， 然而 随着 软硬件 技术 发展 到 今天 ， 采用 部件 化 结构 已 具备 了 实际 的 可行性 ． 目前 大多数 主流 操作系统 都 在 不同 程度 上 ， 采用 不同 的 技术支持 部件 化 结构 ， 并且 操作系统 本身 就 包含 有 某种 类型 的 部件 化 结构 ， 例如 Windows 和 WindowsNT 中 的 COMDCOM ， 对象 管理 组 （ OMG ） 制定 的 CORBA ， 用于 MacintoshOS 、 Unix 、 OS 中 的 跨平台 OpenDOC ， IBM 提出 的 SOM 等 ， 国内 也 有 不少 人 在 进行 这方面 的 研究 工作 ， 北大 的 青鸟 系统 就是 一个 比较 成功 的 例子 ； 另外 ， 利用 新型 的 基于 虚机 运行 的 面向对象 程序设计 语言 JAVA 进行 JavaBeans 的 设计 也 不容忽视 ， 虽然 Java 目前 运行 速度 比较慢 ， 然而 随着 其 性能 的 提高 ， 速度 问题 可望 得到 较 好 的 解决 ， 特别 是 将 它 用于 诸如 异地 设计 、 异地 制造 等 对于 实时性 要求 不高 的 系统 时 可 充分发挥 其 多线程 、 跨平台 和 安全性 等 的 特征 ． 利用 上述 的 操作系统 （ 包括 建立 于 其 上 的 虚机 环境 ） 及 相应 的 开发工具 ， 都 可以 采用 部件 化 结构 进行 工控 软件 的 设计 ， 随着 这些 系统 的 完善 ， 采用 部件 化 结构 进行 工控 软件设计 的 开发 环境 可望 得到 更好 的 提供 ． 考虑 到 目前 工控机 中 Windows 操作系统 安装 比较 普遍 ， 本文 作者 选择 了 COMDCOM 机制 进行 部件 化 的 工控 软件开发 ． 　 部件 化 体系 的 应用 前景 与 展望 　 　 利用 部件 的 二进制 兼容性 、 平台 独立性 和 网络 透明性 ， 可以 很 容易 地 将 设计 的 部件 用于 各种 不同 的 场合 ， 从而 为 设计 分布式 、 跨 地域 的 大型 工控 软件 奠定 了 基础 ； 采用 部件 化 结构 进行 工控 软件设计 ， 有利于 形成 全 社会 范围 内 的 竞争 与 协作 ， 使得 各 软件开发 厂商 充分发挥 各自 的 优势 所在 ， 如同 目前 的 硬件 生产 厂商 一样 ， 有 IC 生产 厂商 ， 有 系统集成 厂商 ， 构成 一个 新 系统 ， 完全 可以 采用 搭积木 式 的 方式 来 进行 ， 从而 做到 了 最大 程度 的 软件 复用 ， 大大 促进 整个 工控 软件设计 的 全面 发展 ； 另外 ， 采用 部件 化 结构 进行 工控 软件设计 ， 可以 在 一个 系统 中 集成 不同 厂商 生产 的 各种 最优 部件 ， 从而 使得 整个 系统 最优 或 接近 最优 ． 　 结束语 　 　 总的来说 ， 我们 希望 部件 是 一个 具有 清晰 的 边界 （ 接口 ） 定义 并 通过 该 边界 与 外界 环境 （ 其它 部件 ） 打交道 的 具有 较强 独立性 的 小 自治 系统 ， 在 作者 最近 开发 的 一个 大型 工控 软件 中 ， 我们 采用 了 部件 化 结构 并 取得 了 阶段性 的 成果 ． 需要 说明 的 是 ， 在 我们 的 设计 与 开发 过程 中 ， 我们 深深地 认识 到 将 部件 之间 接口 标准化 的 重要性 ， OPC 标准 的 推出 ， 可以 说 与 此 思路 不谋而合 ， 作者 希望 通过 本文 ， 与 国内 有 兴趣 于 工控 软件设计 的 同行 加强 联系 、 合作 ， 共同 为 推动 我国 工控 软件 的 设计 ， 制定 对 我国 有 现实 指导意义 的 接口标准 而 努力 ． 作者简介 ： 贾宏宇 ， 岁 ， 博士 研究生 ． 研究 领域 为 自动控制 理论 及 应用 ， DCS 、 FCS 、 CIPS 以及 异地 监控 系统 的 软件体系结构 、 设计 方法 、 总体规划 和 仿真 应用 ． 　 　 　 　 　 施 　 仁 ， 岁 ， 教授 ， 博士生 导师 ． 研究 领域 为 自动控制 理论 及 应用 ， DCS 、 FCS 、 CIPS 以及 异地 监控 系统 的 理论 研究 与 开发 ． 作者 单位 ： 西安交通大学 自动控制 系 　 参考文献 　 北京 希望 电脑公司 Intouch 人机接口 应用 生成 程序 用户 指南 与 参考手册 ， KruegerCWSoftwareReuse ， ACMComputingSurveys ， WeberHUniformityandInvarianceinSupportofReuseIEEETransOnSE ， ～ 张鑫 主编 计算机 分散 控制系统 水利电力 出版社 ， 黄步 余 主编 分散 控制系统 在 工业 过程 中 的 应用 ， 中国 石化 出版社 ， 蒋显忠 主编 新型 DCS μ XL 工程技术 实用 指南 ， 西北工业大学 出版社 ， HafedhMiliFatmaMiliAliMiliReusingSoftwareIssuesandResearchDirectionsIEEETransOnSE ： ～ 杨芙清 等 软件 复用 软件 学报 ： ～ MicrosoftCorporationCOMSpecification （ MicrosoftWhitePaper ） ， OPCTaskforceOPCStandardVer ， EricTallMarkGinsburgActiveX 开发人员 指南 机械 工业 出版社 西蒙 与 舒斯特 国际 出版 公司 ， YokogawaElectricCorporationCENTUMProductionControlSystem 收稿 日期