软件 学报 JOURNALOFSOFTWARE 年 　 第卷 　 第期 　 Vol 　 No 　 工作站 网络系统 进程 迁移 机制 裴丹 汪 东升 沈美明 摘要 　 进程 迁移 是 工作站 网络系统 实现 负载平衡 、 提高 系统 可用 性功能 的 重要 手段 该文 提出 了 一种 基于 接收 发送 方 消息 记录 的 进程 迁移 技术 它 在 消息传递 库 PVMparallelvirtualmachine 之上 实现 具有 对 用户程序 透明 、 可移植性 好 、 开销 小 和 实现 简单 等 特点 此 技术 已 实际 应用 于 作者 自行 研制 的 “ 并行程序 运行 回卷 恢复 与 进程 迁移 系统 — ChaRMcheckpointingbasedrollbackrecoveryandmigrationsystem ” 中 关键词 　 进程 迁移 工作站 网络 PVM 进程 状态 中图法 分类号 　 TPProcessMigrationfortheNetworkofWorkstationsPEIDanWANGDongshengSHENMeimingDepartmentofComputerScienceandTechnologyTsinghuaUniversityBeijingAbstractProcessmigrationisanimportanttoolonNOWsnetworkofworkstationsforloadbalancingandhighavailabilityInthispapertheauthorspresentalogbasedapproachtoprovideprocessmigrationforparallelapplicationsBecausethisapproachisimplementedontopofPVMparallelvirtualmachineitistransparenttousersandportableThisapproachhasbeenusedintheChaRMcheckpointingbasedrollbackrecoveryandprocessmigrationsystemsystemTheexperimentsshowthattheoverheadislowKeywordsProcessmigrationnetworkofworkstationsNOWPVMparallelvirtualmachineprocessstate 　 　 在 工作站 网络 NOW 系统 中 各 结点 的 负载 分布 情况 在 很大 程度 上 影响 着 系统 的 执行 效率 进程 迁移 技术 能 动态 地 改变 系统 的 负载 分布 因而 它 是 支持系统 动态 负载平衡 、 合理 有效 地 利用 资源 、 提高 系统 整体 性能 和 系统 可用性 的 关键技术 文献 ～ 指出 利用 进程 迁移 在 计算 过程 中 可以 把 进程 从 负载 较重 的 结点 迁移 到 负载 较轻 的 结点 上 实现 动态 负载平衡 可以 充分利用 NOW 中 的 空闲 工作站 并且 在 主人 要求 独占 其 工作站 资源 时 及时 迁出 进程 在 长时间 计算 的 过程 中 可以 使 某 结点 退出 计算 以 进行 系统维护 提高 系统 的 可用性 使 IO 操作 在 设备 所在 的 结点 上 进行 减少 网络通信 量 　 　 PVMparallelvirtualmachine 是 一个 应用 广泛 的 并行 编程 环境 但 其 本身 并 没有 支持 进程 迁移 我们 在 PVM 的 通信 库上 对 其 功能 进行 扩充 开发 了 一个 基于 检查点 机制 的 并行程序 运行 回卷 恢复 和 进程 迁移 系统 — ChaRMcheckpointingbasedrollbackrecoveryandmigrationsystemChaRM 系统 提供 了 并行计算 环境 下 的 容错 功能 和 进程 迁移 功能 并 能 与 负载平衡 调度 工具 相结合 实现 对 工作站 网络系统 的 智能化 资源管理 　 　 进程 的 状态 是 指 为了 保证 进程 在 迁移 之后 能够 继续 正确 地 执行 所 必需 的 信息 进程 状态 应该 包括 进程 的 数据 段 、 用户 栈 内容 还应 包括 程序 计数器 PC 、 处理机 状态字 PSW 、 栈 指针 SP 内容 、 活动 文件 信息 以及 中断 、 信号 等 信息 在 进程 迁移 时 迁移 进程 捕获 其 进程 状态 并 将 它 直接 通过 UNIX 的 socket 通道 传给 系统 为 它 在 目标 结点 上 创建 的 一个 骨架 进程 骨架 进程 则 从 socket 通道 中 读出 进程 状态 并 在 自己 的 进程 空间 内 重建 该 状态 进程 状态 传输 完毕 后 迁移 进程 自动 终止 由 骨架 进程 代替 它 继续 运行 　 　 在 并行 系统 中 还 必须 保证 迁移 后 其他 进程 以 原来 的 任务 号 访问 该 迁移 进程 对应 的 骨架 进程 并且 保证 那些 在 迁移 前 和 迁移 过程 中发往 该 迁移 进程 的 消息 都 能够 以 正确 的 顺序 接收 否则 将 造成 消息 的 丢失 并 引起 程序执行 错误 　 丢失 消息 的 处理 　 　 在 进程 迁移 过程 中 由于 迁移 进程 与 骨架 进程 任务 号 不同 而 引起 的 几种 消息 丢失 的 情况 如图所示 进程 迁移 从 t 时刻 开始 t 时刻 结束 各 进程 的 t 和 t 可能 不 一样 MP 代表 被 迁移 进程 SP 代表 MP 在 目标 结点 上 对应 的 骨架 进程 NMP 代表 应用程序 中 的 非 迁移 进程 在 迁移 过程 中 MP 挂起 NMP 继续 运行 迁移 结束 后 MP 消亡 由 SP 代替 MP 在 应用程序 中 参与 计算 图 　 　 进程 迁移 可能 造成 的 消息 丢失 　 　 在 图 a 中 由 NMP 在 t 时刻 之后 向 MP 发送 的 消息 m 找 不到 接收 方 MP 而 SP 也 无法 收到 消息 m 丢失 如果 NMP 在 t 时刻 之后 等待 来自 MP 的 消息 由 SP 发来 的 消息 m 由于 发方 不是 MPNMP 无法 接收 m 也 丢失 了 为了 避免 这 两种 完全 由于 迁移 造成 的 进程 任务 号 的 改变 而 导致 丢失 消息 一般 支持 进程 迁移 的 系统 都 采用 了 一种 MPSP 的 任务 号 之间 的 匹配 机制 这种 机制 在 系统 中 维护 MP 与 SP 之间 的 任务 号 的 匹配 表当 其他 进程 要 与 MP 通信 时先 通过 匹配 表查 到 对应 的 SP 的 任务 号 然后 再 与 SP 进行 实际 的 通信 这样 就 解决 了 m 和 m 的 丢失 但是 单纯 的 任务 号 匹配 机制 并 不能 处理 像 图 b 中 的 m 和 图 c 中 的 m 那样 的 丢失 消息 当 NMP 在 t 到 t 时刻 之间 向 MP 发送 m 时 本次 迁移 导致 的 任务 号 变化 还 无法 反映 在 NMP 当时 的 匹配 表中 因此 m 被 发往 MP 而 不是 发往 SP 而 此时 MP 已经 停止 计算 在 t 时刻 之后 将 消亡 它 无法 收到 m 消息 m 丢失 图 c 中 的 m 和 m 是 在 t 时刻 之前 已经 发送 出去 但是 接收 进程 尚未 收到 的 消息 与 m 的 情况 类似 NMP 发送 m 时 并不知道 任务 号 的 变化 因此 m 被 发往 MP 而 丢失 消息 m 是 由于 采用 了 任务 号 匹配 机制 而 产生 的 丢失 消息 在 t 时刻 之后 NMP 通过 查询 匹配 表 等待 接收 发自 SP 的 消息 所以 无法 收到 发自 MP 的 消息 m 消息 m 丢失 在 有 多个 进程 同时 进行 迁移 时 迁移 进程 之间 的 丢失 消息 与 图 中 所示 类似 但 由于 它们 彼此 在 t 到 t 时刻 之间 不 发送 应用 消息 所以 不 存在 m 一类 的 消息 　 　 在 支持 进程 迁移 的 系统 中有 如下 几种 维护 任务 号 匹配 表 的 方法 直接 在 每个 用户 进程 中 维护 这种 方法 不 依赖于 特定 的 并行 环境 但是 每个 用户 进程 的 虚存 空间 都 因此 而 增长 而且 要 同时 更新 匹配 表以 维护 匹配 表 内容 的 唯一性 由 并行 编程 环境 系统 在 每个 结点 上 的 daemon 如 pvmd 进程 维护 这种 方法 比前 一种 方法 更能 节省 空间 匹配 表 更新 容易 但 需要 修改 并行 编程 环境 系统 源码 可移植性 差 在 每个 结点 上 增加 一个 管理 进程 专门 负责 维护 匹配 表并 接管 进程 的 通信 这种 方法 也 不 依赖于 特定 的 并行 环境 但是 在 进程 间通信 频繁 的 情况 下 有 可能 成为 系统 的 瓶颈 　 　 处理 mmm 这样 的 丢失 消息 的 方法 一般 有 两种 同步 方式 在 迁移 的 整个 过程 中挂 起 NMP 暂停 计算 因此 m 这样 的 消息 根本 就 不会 出现 在 传输 进程 状态 前 MP 和 NMP 分别 阻塞 接收 m 和 m 避免 这 两类 消息 的 丢失 这种 方式 实现 简单 但是 由于 迁移 会 导致 整个 应用程序 暂停 计算 开销 大 效率 低 异步 方式 这种 方式 允许 NMP 在 迁移 过程 中 继续 运算 为了 避免 丢失 mm 或 m 一类 的 消息 MPVM 等 系统 引入 了 复杂 的 消息 转发 和 排序 机制 这种 方式 执行 效率高 但 实现 复杂 且 需要 修改 并行 编程 环境 系统 源代码 　 ChaRM 系统 进程 迁移 　 　 我们 为 ChaRM 系统 设计 了 一种 新 的 进程 迁移 机制 它 允许 NMP 在 迁移 过程 中 继续 计算 只是 在 迁移 开始 和 结束 时 进行 简单 的 协调 工作 为了 支持 在 不同 并行 环境 之间 的 可移植性 ChaRM 系统 由 一个 专门 的 管理 进程 CManager 进程 负责 系统 总体 控制 为了 处理 图中 的 几种 消息 丢失 ChaRM 系统 采取 了 PVM 函数 封装 、 任务 号 隐式 匹配 、 消息 驱赶 和 消息 的 延迟 发送 等 技术 　 　 PVM 函数 的 封装 在 执行 真正 的 PVM 函数 前后 进行 一些 额外 的 工作 以 完成 ChaRM 系统 的 功能 但是 提供 给 用户 的 接口 与 原 PVM 函数 的 接口 完全一致 这种 封装 技术 避免 了 对 PVM 源码 的 直接 修改 而且 使 ChaRM 所 做 的 工作 对 用户 透明 　 　 任务 号 隐式 匹配 ChaRM 在 每个 用户 进程 空间 中 维护 一个 任务 号 匹配 表并 使 进程 在 每次 通信 时 都 先 查询 匹配 表再 进行 真正 的 通信 在 迁移 结束 前 更新 各个 进程 的 匹配 表在 整个 计算 过程 中 应用程序 只 需 知道 各 进程 创建 时 的 任务 号 而 完全 不必 知道 该 进程 是否 发生 过 迁移 这种 机制 有效 地 避免 了 图 中 的 m 和 m 一类 消息 的 丢失 　 　 消息 驱赶 机制 ChaRM 利用 PVM 通信 机制 本身 的 FIFO 语义 将 一个 进程 向 另 一个 进程 的 消息 通道 清空 假设 在 迁移 过程 中 A 进程 向 B 进程 发送 一个 特殊 的 就绪 消息 后 就 不再 向 B 发送 其他 消息 而 B 进程 等待 接收 该 就绪 消息 将 接收 到 的 应用 消息 妥善 保存 到 预先指定 的 接收 缓冲 中 根据 FIFO 语义 当 B 进程 收到 来自 A 进程 的 就绪 消息 时 可以 推断 从 A 进程 到 B 进程 的 单向 通信 通道 中 的 所有 消息 已 被 驱赶 至 B 进程 这种 基于 收方 的 消息 记录 避免 了 图 中 的 mm 的 丢失 同时 也 保证 了 正确 的 消息 接收 顺序 　 　 消息 的 延迟 发送 机制 为了 避免 产生 图中 的 消息 mChaRM 对 PVM 的 消息 发送 函数 进行 了 封装 使得 当 NMP 要 在 t 到 t 时刻 之间 向 MP 发送 应用 消息 时 并 不 进行 真正 的 发送 而是 将 该 消息 记录 到 一个 延迟 发送 消息 表 中等 到 迁移 完毕 再 根据 更新 过 的 匹配 表将 延迟 发送 消息 表中 的 应用 消息 发送 出去 这 实际上 是 一种 基于 发方 的 消息 记录 　 　 算法 ChaRM 系统 的 迁移 算法 CManagerIF 　 接收 到 迁移 发起 信号 MIGRATESIGTHEN 　 　 　 　 　 　 　 　 　 向 所有 MP 发出 迁移 启动 信号 MIGCHECKSIG 　 　 　 　 　 　 　 　 　 向 所有 NMP 发出 迁移 协调 信号 MIGSYNCSIGMP 　 　 　 　 IF 　 收到 MIGCHECKSIGTHEN 　 　 　 　 　 　 　 　 　 暂停 计算 建立 起 一个 用于 与 SP 通信 的 socket 管道 　 　 　 　 　 　 　 　 　 向 CManager 发送 PRTMSG 通知 它 的 socket 的 地址 、 端口号 等 信息 　 　 　 　 　 　 　 　 　 向 其他 所有 进程 发送 就绪 消息 RDYMSG 　 　 　 　 　 　 　 　 　 持续 接收 向 它 发送 的 消息 直至 收到 来自 其他 所有 进程 的 RDYMSG 　 　 　 　 　 　 　 　 　 IF 收到 除 RDYMSG 以外 的 其他 消息 被 驱赶 而来 的 中途 应用 消息 THEN 　 　 　 　 　 　 　 　 　 把 这个 消息 保存 到 预先指定 的 接收 缓冲 中 　 NMP 　 　 　 IF 　 收到 MIGSYNCSIGTHEN 　 　 　 　 　 　 　 　 　 向 所有 MP 发送 就绪 消息 RDYMSG 　 　 　 　 　 　 　 　 　 继续 进行 计算 　 　 　 　 　 　 　 　 　 IF 在 迁移 完毕 之前 要 向 MP 发送 应用 消息 THEN 　 　 　 　 　 　 　 　 　 将 消息 记录 到 延迟 发送 消息 表中 不 进行 真正 的 发送 　 CManager 　 IF 　 收到 从 MP 发来 的 PRTMSG 消息 THEN 　 　 　 　 　 　 　 　 　 在 目标 结点 上派 生出 MP 对应 的 骨架 进程 SP 　 　 　 　 　 　 　 　 　 将 MP 的 socket 地址 、 端口 信息 通过 PRTMSG 传送 给 骨架 进程 MP 　 　 　 　 IF 　 已经 收到 其他 所有 进程 发来 的 RDYMSGTHEN 　 　 　 　 　 　 　 　 　 等待 与 相应 的 SP 建立 socket 连接 　 　 　 　 　 　 　 　 　 捕获 进程 状态 并 将 进程 状态 通过 socket 传给 骨架 进程 　 　 　 　 　 　 　 　 　 状态 传输 完毕 后 消亡 　 　 SP 　 　 　 IF 　 收到 CManager 发来 的 PRTMSGTHEN 　 　 　 　 　 　 　 　 　 与 相应 的 MP 建立 socket 连接 　 　 　 　 　 　 　 　 　 从 socket 中 读出 进程 状态 并 在 自己 的 进程 空间 内 重建 该 状态 　 　 　 　 　 　 　 　 　 将 任务 号 变化 通过 RJNMSG 通知 CManagerCManager 　 IF 　 收到 所有 SP 发来 的 RJNMSGTHEN 　 　 　 　 　 　 　 　 　 向 所有 NMP 再次 发送 MIGSYNCSIG 　 　 　 　 　 　 　 　 　 并 向 所有 进程 发送 LSTMSG 用于 各 进程 更新 其 任务 号 匹配 表 　 　 NMP 　 　 　 IF 　 收到 MIGSYNCSIG 信号 THEN 　 　 　 　 　 　 　 　 　 持续 接收 向 它 发送 的 消息 直至 收到 所有 发自 MP 的 RDYMSG 　 　 　 　 　 　 　 　 　 IF 　 收到 除 RDYMSG 以外 的 其他 消息 被 驱赶 而来 的 中途 应用 消息 THEN 　 　 　 　 　 　 　 　 　 把 这个 消息 保存 到 预先指定 的 接收 缓冲 中 　 　 　 　 　 　 　 　 　 接收 CManager 发来 的 LSTMSG 更新 各自 的 任务 号 匹配 表 　 　 　 　 　 　 　 　 　 根据 新 的 匹配 表将 延迟 发送 消息 表中 延迟 发送 的 消息 发送 出去 　 　 　 　 　 　 　 　 　 继续执行 　 　 SP 　 　 　 IF 　 接收 到 由 CManager 发来 的 LSTMSGTHEN 　 　 　 　 　 　 　 　 　 更新 任务 号 匹配 表 　 　 　 　 　 　 　 　 　 继续执行 　 　 在 算法 的 第步 中 MP 向 所有 其他 进程 发送 就绪 消息 NMP 向 所有 MP 发送 然后 MP 将 所有 其他 所有 进程 向 它 发送 的 应用 消息 驱赶 到 缓冲区 中 NMP 则 继续 进行 计算 而 并 不 在 此时 就 进行 消息 驱赶 这 是因为 在 第步 中 进程 间 彼此 发送 的 消息 较 多 将 这 一 工作 推迟 到 第步 再 做 可以 使 NMP 因 消息 驱赶 所 花费 的 开销 最小 在 第步 中 在 NMP 消息 驱赶 完毕 后 它 将 延迟 发送 的 消息 发送 出去 并 继续执行 这种 延迟 发送 机制 带来 的 附加 开销 很小 这有 两 方面 原因 一方面 NMP 执行 完 消息 发送 命令 后 不必 理会 接收 进程 是否 收到 而 可以 继续 计算 即 发送 应用 消息 并 不 在 NMP 执行 的 关键 路径 上 所以 这种 机制 对 NMP 的 计算 过程 无 直接 影响 另一方面 由于 延迟 发送 的 消息 是 在 迁移 完毕 后 立即 被 发送 出去 而 MP 直到 迁移 完毕 后 才 继续 计算 和 接收 应用 消息 所以 它 不会 因为 长时间 等待 接收 发自 NMP 的 应用 消息 而 明显增加 执行 时间 　 　 在 同步 方式 的 进程 迁移 中 NMP 的 开销 与 MP 的 开销 大致 相当 而 在 算法 中 NMP 除了 在 迁移 发起 时 和 迁移 结束 时 做 一些 协调 工作 以外 一直 处于 计算 过程 中其 开销 远 小于 同步 方式 在 异步 方式 的 进程 迁移 中 虽然 NMP 没有 明显 的 协调 工作 但 这种 方式 引入 的 复杂 的 消息 转发 和 排序 机制 也 会 给 应用程序 的 正常 运行 带来 一定 的 开销 而 算法 中以 NMP 在 迁移 过程 中 参与 协调 为 代价 使得 算法 易于 实现 并且 正常 运行 开销 小于 异步 方式 综上所述 算法 中 基于 发送 接收 方 的 消息 记录 的 算法 有效 地 结合 了 同步 方式 的 易于 实现 和 异步 方式 的 效率高 的 优点 　 性能 测试 　 　 测试环境 为 由 台 SUNUltra 每个 结点 两个 CPU 主频 MHz 经 M 快速 以太网 连接 而成 的 工作站 网络系统 操作系统 为 Solaris 测试用例 为 计算 密集型 的 矩阵 幂 程序 该 程序 由 一个 根 任务 在 个 结点 上 各派 生出 两个 子 任务 总共 个子 任务 测试 结果 如表 所示 其中 状态 空间 是 指 通过 socket 传送 的 进程 状态 信息 的 总和 挂起时间 是 指 从 MP 在 源 结点 上 暂停 计算 到 在 目标 结点 上 继续 计算所 花费 的 时间 它 等于 状态 传输 时间 加上 协调 时间 MP 协调 时间 是 指 除了 在 网络 上 进行 进程 状态 传输 以外 它 所 进行 的 所有 其他 工作 所 花费 的 时间 其中 包括 发送 及 接收 就绪 消息 、 与 CManager 通信 、 骨架 进程 的 派生 、 维护 任务 号 匹配 表等 工作 NMP 最大 协调 时间 是 指 各 NMP 为 进程 迁移 所 花费 的 时间 中 的 最大值 包括 发送 及 接收 就绪 消息 、 与 CManager 通信 、 延迟 发送 消息 、 维护 任务 号 匹配 表等 工作 表 矩阵 幂 程序 进程 迁移开销 状态 空间 MBytes 挂起时间 s 状态 传输 时间 s 协调 时间 sNMP 最大 协调 时间 ms 　 　 从表 可以 看出 进程 状态 传输 时间 是 挂起时间 的 主体 部分 它 随着 进程 状态 空间 的 增加 大致 呈 线性 增加 其 上下 波动 是 由 网络 传输 的 波动 所致 这部分 开销 的 大小 主要 取决于 网络 硬件 协调 时间 随着 进程 状态 空间 的 增加 虽然 呈 增加 趋势 但 变化 并 不 显著 在 s 左右 这是 由于 协调 工作 与 进程 状态 空间 的 关系 很小 所致 从图 中 可以 更 直观 地 看出 MP 各 部分 开销 与 状态 空间 的 关系 表中 的 NMP 的 协调 时间 很小 与 MP 挂起时间 相差 两个 量级 这 验证 了 我们 对 算法 的 分析 NMP 开销 远 小于 同步 方式 而用 毫秒 级 的 协调 开销 来 避免 实现 复杂 的 异步 方式 进程 迁移 也 是 完全 可以 接受 的 这 一 开销 逐渐 变大 的 趋势 是 由于 传输 较大 的 进程 状态 空间 导致 网络通信 变慢 所致 图 　 　 矩阵 幂 程序 MP 迁移开销 折线图 　 　 另外 我们 还 对 其他 一些 程序 进行 了 测试 结果 见表 其中 偏 微分方程 、 哈达 码 变换 为 计算 密集型 ASE 、 分数 维 、 FFT 为 通信 密集型 可以 看出 计算 密集型 与 通信 密集型 在 MP 的 协调 时间 上 区别 很小 证明 消息 驱赶 和 延迟 发送 机制 的 效率 较 高 而 在 通信 密集型 的 应用程序 中 由于 NMP 要 保存 和 重发 的 消息 比 计算 密集型 的 多 所以 其 协调 时间 有 一定 的 增加 同时 这一 增加 也 受 状态 空间 大小 的 影响 表 应用程序 进程 迁移开销 应用程序 状态 空间 MBytes 挂起时间 s 状态 传输 时间 s 协调 时间 sNMP 最大 协调 时间 ms 哈达 码 变换 偏 微分方程 分数 维 ASEFFTFFTFFT 　 　 相关 工作 及 结论 　 　 进程 迁移 在 许多 并行 系统 中 得到 了 支持 和 应用 早期 的 系统 CharlotteVsystemMosixSprite 和 Mach 大都 是 通过 修改 操作系统 内核 在 系统 级 实现 了 对 进程 迁移 的 支持 这种 方法 效率高 透明性 好 但 可移植性 差 用户 级 实现 的 进程 迁移 只 使用 标准 的 UNIX 系统 调用 因而 可移植性 好 其中 MPVM 修改 了 PVM 源码 并 引入 了 复杂 的 消息 转发 和 排序 机制 以 支持 异步 进程 迁移 Condor 支持 的 进程 迁移 是 先 将 进程 的 检查点 文件 存入 磁盘 并 中止 该 进程 等到 系统 找到 空闲 机后 在 该机 上 恢复 CoCheck 利用 了 Condor 提供 的 单 进程 检查点 设置 和 卷回恢复 工具 在 PVM 通信 库 之上 实现 但 只 支持 同步 方式 的 进程 迁移 DPVM 利用 进程 迁移 进一步 支持 了 动态 调度 的 功能 　 　 与 国际 上 的 同类 工作 相比 ChaRM 系统 具有 下面 的 一些 功能 和 设计 特点 对 用户程序 透明 以 运行 时库 的 方式 提供 给 用户 用户 只 需 将 ChaRM 提供 的 库 与 原有 PVM 应用程序 链接 即可 用 命令 方式 或 API 函数调用 进程 迁移 功能 在 并行 编程 环境 通信 库上 实现 并且 由 专门 的 管理 进程 CManager 而 不是 选择 PVM 的 资源管理 器 RM 负责 总体 控制 从而 不 受限于 特定 的 并行 编程 环境 可移植性 好 通过 引入 消息 驱赶 和 消息 延迟 发送 机制 支持 一种 新 的 、 基于 收发 方 消息 记录 的 迁移 技术 以 提高 迁移 效率 而 未 采用 复杂 的 消息 转发 和 排序 机制 支持 手工 、 半自动 、 全自动 种 方式 的 进程 迁移 发起 方式 即 用户 可以 指定 把 哪个 进程 迁往 哪个 结点 也 可以 提出 对 某些 进程 的 迁移 请求 由 系统 决定 迁往 哪个 结点 还 可以 由 系统 自行决定 迁移 发起 的 时机 、 迁移 的 进程 以及 目的 结点 对 进程 状态 进行 了 精简 排除 了 数据 段 中 不必 保存 的 区域 从而 减少 了 由于 迁移 引起 的 状态 捕获 、 传输 和 重建 的 时空 开销 　 　 本文 提出 的 进程 迁移 技术 可以 在 PVMMPI 等 多种 消息传递 库上 实现 采用 了 任务 号 隐式 映射 、 消息 驱赶 和 消息 延迟 发送 技术 是 一种 基于 接收 发送 方 消息 记录 的 迁移 技术 具有 实现 简单 、 对 应用程序 透明 、 可移植性 好 和 开销 小 等 特点 　 　 在 下 一步 的 工作 中 我们 将 在 ChaRM 系统 中 设计 并 实现 动态 负载平衡 调度 算法 对 工作站 网络系统 进行 智能化 资源管理 注释 ： 本文 研究 得到 国家 高科技 项目 基金 资助 。 作者简介 ： 裴丹 ： 年生 硕士生 主要 研究 领域 为 并行 分布 系统 容错 与 负载平衡 　 　 　 　 　 汪 东升 年生 博士 副教授 主要 研究 领域 为 并行处理 容错 计算 　 　 　 　 　 沈美明 女年生 教授 博士生 导师 主要 研究 领域 为 并行 分布 计算机系统 作者 单位 清华大学 计算机科学 与 技术 系 北京 Emailpeidanmailcictsinghuaeducn 参考文献 　 EskiciogluMRDesignissuesofprocessmigrationfacilitiesindistributed 　 　 systemsIEEETechnicalCommitteeonOperatingSystemsNewsletter ～ 　 　 　 CasasJClarkDLetalMPVMamigrationtransparentversionofPVMComputing 　 　 Systems ～ 　 LitzkowJetalCondorahunterofidleworkstationsInProceedingsoftheth 　 　 IEEEInternationalConferenceonDistributedComputingSystemsLosAlamitos 　 　 CAIEEEComputerSocietyPress ～ 　 TannenbaumTLitzkowMThecondordistributedprocessingsystemDrDobb ’ s 　 　 Journal ～ 　 StellnerGPruyneJResourcemanagementandcheckpointingforPVMIn 　 　 ProceedingsofthendEuropeanPVMUsers ’ GroupMeetingLyonFranceEdition 　 　 Hermes ～ 　 鞠九滨 魏晓辉 徐 高潮 等 DPVM 支持 任务 迁移 和 排队 的 PVM 计算机 学报 ～ 　 　 　 　 JuJiubinWeiXiaohuiXuGaochaoetalDPVManenhancedPVMsupporting 　 　 taskmigrationandqueuingChineseJournalofComputers ～ 收稿 日期 修稿 日期