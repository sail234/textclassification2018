动物 分类学 报 ACTAZOOTAXONOMICASINICA 年 第卷 第期 VolNo 软件 理解 研究 与 进展 李必信 　 郑国梁 　 李宣东 　 张勇翔 　 梁 　 佳摘 　 要 　 软件 理解 是 进行 软件维护 的 一个 重要 步骤 ， 是 一个 逐层 推进 的 递增 模式匹配 过程 软件 理解 由 任务 、 策略 、 概念 、 模型 、 方法 和 工具 环境 等 环节 组成 文中 分析 了 软件 理解 的 任务 和 策略 ， 对 软件 理解 的 各种 模型 进行 了 比较 ， 详细 论述 了 目前 活跃 在 学术界 的 各种 软件 理解 方法 ， 并 对 目前 存在 的 各种 软件 理解 工具 或 环境 进行 了 归类 和 比较 文中 还 简单 介绍 了 我们 在 面向对象 软件 理解 方面 所 取得 的 一些 进展 关键词 　 软件 理解 ， 基本 因素 ， 程序 切片 ， 概念分析 ， 模式匹配 ， OOAF 中图法 分类号 　 TPTHERESEARCHANDDEVELOPMENTOFSOFTWARECOMPREHENSIONLIBiXinZHENGGuoLingLIXuanDongZHANGYongXiangandLIANGJiaDepartmentofComputerScienceTechnologyNanjingUniversityNanjingStateKeyLaboratoryforNovelSoftwareTechnologyNanjingUniversityNanjingAbstract 　 SoftwarecomprehensionisanimportantstepofsoftwaremaintenanceanditisregardedasanincreasingpatternmatchingprocessfromoneleveltoanotherFirstinthispaperthestateoftheartanddevelopmentdirectionsofbasicfactorsofsoftwarecomprehensionaresystematicallystudiedieconceptsandmodelsarecomparedtasksandstrategiesareanalyzedobjectsarediscussedenvironmentsandtoolsareclassified ， andallkindsofsoftwarecomprehensionmethodsareanalyzedThentheprogressmadeinobjectorientedsoftwarecomprehensionisalsodiscussedFinallysomegoodconclusionsaregivenandfutureworkisalsopresentedKeywords 　 softwarecomprehensionbasicfactorprogramslicingconceptanalysispatternmatchingOOAF 　 前 　 言 　 　 随着 社会 对 软件 需求 的 不断 增长 ， 正在 使用 和 开发 的 软件 与 日 剧增 ， 许多 大型 复杂 的 软件 已 投放市场 软件维护 问题 已 成为 当前 软件产业 面临 的 重要 课题 首先 ， 由于 还 未 研制 出 实际 可用 的 软件 确认 技术 ， 软件 投入使用 后 修改 错误 不可避免 ； 其次 ， 软件 所处 的 环境 和 用户 的 要求 经常 变更 ， 需要 不断 修改 使 其 扩充 功能 和 适应环境 ； 第三 ， 目前 的 软件 生产 技术 还 没有 达到 人们 期望 的 程度 ， 必须 充分利用 和 改造 现有 软件 以 满足用户 新 的 要求 ； 第四 ， 为了 改进 软件 未来 的 易维护性 和 可靠性 ， 或 为了 给 未来 的 改进 奠定 更好 的 基础 因此 ， 软件维护 问题 已 引起 人们 的 普遍 关注 软件 投入使用 后 ， 对 其 进行 纠错 、 扩充 和 完善 的 活动 就 称 软件维护 软件维护 是 分析 、 理解 、 修改 、 重新 确认 的 过程 分析 和 理解 程序 是 维护 工作 的 第一步 ， 能否 准确 、 迅速 、 全面 地 理解 程序 是 决定 维护 工作 成败 的 关键 软件 理解 就是 通过 一定 的 设施 和 方法 来 弄清 一个 程序 是 “ 做 什么 ” 以及 “ 如何 做 ” ， 软件 理解 一般 有 以下 项 任务 ： 识别 程序 单位 、 跟踪 控制流 、 跟踪 数据流 、 综合 程序逻辑 软件 理解 的 研究 一般 可 分为 以下 类 ： 第类 研究 从 年代 开始 目前 仍 在 继续 它 的 特点 是 尽量 做到 程序 隐含 信息 的 显示 表示 及 程序 内部 关系 的 可视化 如 控制流 和 数据流 分析 ， 各种 程序 视图 的 构造 等 ； 第类 的 研究 开始 于 年代 后期 ， 大量 的 研究 主要 集中 在 年代 和 年代 它 的 特点 是从 源代码 中 提取 信息 ， 并存 放在 通用 的 数据库 中 ， 然后 通过 查询语言 对 数据库 进行 查询 ； 第类 研究 开始 于 年代 后期 其 特点 是 采用 知识 推理 等 技术 识别 程序 概念 ； 第类 研究 开始 于 年代 初 ， 这 类 研究 的 特点 是 采用 模式匹配 、 程序变换 等 技术 识别 程序 的 高层 概念 ， 如 标准 算法 、 数据结构 、 语法 及 语义 匹配 等 本文 第 ～ 节 分别 讨论 了 软件 理解 的 任务 、 策略 、 模型 、 方法 和 工具 环境 等 的 现状 和 进展 情况 ； 第节 简单 地 介绍 了 我们 在 面向对象 软件 理解 方面 所 取得 的 一些 进展 ； 第节 通过 对 软件 理解 各种 方法 的 分析 研究 ， 总结 出 逐层 推进 的 递增 软件 理解 模式 并 给出 本文 的 结论 　 软件 理解 的 任务 和 策略 　 　 软件 理解 的 任务 是 在 不同 的 抽象 级别 上 建立 基本 软件 的 智力 模型 mentalmodel ， 实际上 是 建立 从 问题 应用领域 到 程序设计 实现 领域 的 映射 集 ， 如图 它 的 范围 包括 从 代码 本身 的 模型 到 基本 应用领域 的 模型 ， 它 的 目的 是 为了 便于 软件维护 、 进展 和 再 工程 具体任务 分为 级 ， 即 ① 实现 级 检查 单个 的 程序设计 结构 ， 程序 被 典型 地 表示 成 抽象 语法 树 AST 、 符号表 或 普通 源 文本 包括 手工 代码 阅读 ， 人工制品 提取 ， 程序 分析 ， 静态 分析 ， 动态分析 几个 过程 ② 结构 级 检查程序 构造 过程 中 结构 关系 ， 明确 表示 程序 组成部分 之间 的 依赖 关系 包括 逆向 工程 、 信息提取 、 信息 抽象 、 结构 模型 匹配 、 识别 构筑 风范 和 结构 、 聚集 分级 结构 等 过程 ③ 功能 级 检查 两个 程序结构 和 行为 功能 之间 的 关系 同时 研究 完成 程序 构造 的 合理性 包括 设计 恢复 、 语义 和 行为 模式匹配 等 过程 ④ 应用 级 检查 特定 于 应用领域 的 概念 包括 智能 软件 理解 、 格局 识别 、 概念 赋值 和 推理 等 过程 图 　 　 　 软件 理解 策略 是 软件 理解 在 总体 上 所 使用 的 方法 和 采用 的 理解 过程 软件 理解 主要 策略 有 ① 自 底向上 策略 构造 从 实现 领域 到 问题 领域 的 映射 集 mappings 由 相似 或 相关 属性 或 特性 的 软件 成分 聚集 而 形成 更 高层 的 概念 子系统 ② 自顶向下 策略 构造 从 应用领域 到 实现 领域 的 映射 集 ， 它 有 几个 中间层 表示 分析 过程 是 由 期望 驱动 的 建立 、 确认 和 精化 假设 的 过程 ， 能 更好 地 适应 目标 制导 的 软件 理解 ， 依赖于 工程师 的 专门 领域 知识 ③ 机会 策略 是 自 底向上 和 自顶向下 策略 的 结合 ， 具有 自 底向上 和 自顶向下 策略 的 优点 ， 对 不同 的 应用 脚本 具有 可 适应性 　 软件 理解 模型 　 　 软件 理解 就是 开发 软件系统 构筑 体系 含义 和 行为 的 智力 模型 的 过程 在 软件工程 维护 和 发展 过程 中 一般 要花费 ～ 的 时间 用于 软件 理解 与 软件 理解 类似 的 概念 有 浏览 分析 软件 、 程序 可视化 等 理解 一个 软件系统 实际上 是 抽象 该 系统 的 更 高层 描述 的 过程 ， 抽象 过程 的 目标 产品 就是 软件 理解 模型 ， 软件 理解 模型 包含 来自 现实 世界 的 对象 及其 相互 关系 ， 而 忽略 了 程序设计 领域 中 一些 不太 重要 的 细节 　 　 Brooks 建议 使用 一种 基于 自顶向下 方法 的 模型 ［ ］ 该 模型 假设 在 设计阶段 设计者 做出 的 许多 决策 都 会 反应 在 代码 中 理解 包含 了 恢复 这些 决策 并 通过 中间 领域 的 重新 构造 再 把 它们 映射 到 程序设计 领域 智力 模型 的 构造 是 通过 自顶向下 过程 实现 的 ， 这一 过程 成功 地使 假设 得到 公式化 和 证明 在 模型 的 顶层 是 一个 表达 程序 功能 的 高层 描述 的 主要 假设 ， 随后 公式化 辅助 假设 以 支持 主要 假设 　 　 Soloway 和 Ehrlich 在 他们 的 模型 ［ ］ 中 采用 了 自顶向下 的 方法 ， 在 代码 或 代码 类型 知道 的 情况 下 可 采用 这种 模型 采用 所 拥有 的 知识 公式化 假设 ， 以便 把 系统 分解成 能够 在 代码 中 实现 的 已经 知道 的 子系统 ， 然后 轮流 分解 每个 子系统 直到 取得 实现 既定 功能 的 一个个 代码 块 用 这种 方法 构造 的 智力 模型 由 目标 和 格局 的 层次 构成 利用 交流 规则 把 目标 分解成 格局 ， 再 把 格局 分解成 子 格局 一般 使用 种 不同 的 格局 ， 即 战略性 格局 ， 它 描述 程序 中 的 整体 策略 ； 策略性 格局 ， 它 与 局部 的 问题 解决 策略 有关 ； 实现 性 格局 ， 它 考虑 实现 策略 格局 的 语言 的 特征 　 　 Letovsky 提出 的 识别 模型 ［ ， ］ 由个 主要 部分 组成 ， 即 知识库 、 智力 模型 和 同化 吸收 过程 知识库 中 包含 程序员 拥有 的 有关 程序设计 规范 和 问题 领域 的 通用 知识 ， 也 包括 一些 交流 规则 ， 也 就是 关于 算法 、 数据结构 实现 和 编码标准 等 程序设计 方面 的 惯例 ； 智力 模型 可以 按照 个 不同 的 抽象层次 来 组织 ， 即 ① 规格 说明 层 ： 该层 描述 了 程序 的 目标 ② 实现 层 ： 该层 表示 了 抽象 的 最低 层 ， 它 包含 作为 实体 的 数据结构 和 功能 ③ 注解 层 ： 该层 把 规格 说明 层 的 每个 目标 和 实现 层中 的 实现 联系 起来 ； 同化 吸收 过程 由 基于 假设 的 公式化 的 查询 新 知识 组成 这有 个 不同 的 类型 ： “ why 假设 ” 想象 一个 函数 或 设计 选择 的 目的 ； “ how 假设 ” 推测 实现 一个 程序 目标 的 方法 ； “ what 假设 ” 分类 实体 　 　 Pennington 以 一种 不同 的 观点 采用 自 底向上 的 方法 ［ ］ 这种 自 底向上 的 方法 是从 逐行 理解 程序代码 开始 的 ， 发现 相似 的 模式 称为 块 ， 模式 的 集合 和 下 一步 抽象 能 用来 识别 更高 抽象 层上 的 新 模式 Pennington 的 模型 用 开发 两个 不同 的 智力 表达式 来 处理 理解 问题 ， 即 程序 模型 和 情景 模型 程序 模型 是 程序 及其 结构 的 低层 智力 模型 事实上 ， 维护 程序员 在 处理 不 熟悉 代码 时 建立 的 程序 模型 是 对 控制流 的 一种 典型 抽象 新 的 更加 抽象 的 程序 模型 是 通过 把 代码 结构 分块 成 更 抽象 的 结构 建立 的 ； 情景 模型 是 在 程序 模型 之后 开发 的 ， 它 创建 一个 数据流 功能 的 抽象 ， 按照 以 功能 层次 组织 真实世界 的 对象 术语 来说 ， 需要 应用领域 的 知识 来 智力 地 表示 代码 　 　 VonMayrhauser 和 Vans 建议 使用 一种 包含 前面 几种 模型 的 集成 模型 ［ ， ］ ， 他们 通过观察 得知 ， 理解 过程 或是 自 底向上 或是 自顶向下 或是 两种 方法 结合 的 过程 集成 模型 包括 个 主要 成份 ， 即 程序 模型 、 情景 模型 、 自顶向下 模型 和 知识库 前者 是 借助 已经 介绍 的 模型 当 代码 熟悉 时 ， 集成 模型 开发 自顶向下 模型 ； 而 当 对 代码 完全 不 熟悉 时 ， 开发 自 底向上 模型 通过 这种 自顶向下 的 方式 推进 过程 ， 会 遇到 不 熟悉 的 代码 部分 ， 于是 需要 转 回去 进行 自 底向上 的 研究 知识库 对 其它 个 成分 的 构造 都 是 必须 的 每个 模型 的 成分 均 由 代码 的 中间 表示 以及 建立 这种 中间 表示 的 策略 构成 知识库 融合 了 以前 需求 过 的 相关 信息 和 知识 在 理解 过程 中 ， 新 的 信息 被 开发 出来 并 被 放到 知识库 中 以便 于 将来 的 使用 　 　 北京大学 于 年 提出 的 分层 构造 模型 ， 可 用于 对 面向对象 系统软件 的 功能 分配 及其 相互 关系 进行 认识 理解 该 模型 把 面向对象 的 系统软件 分成 个 层次 ， 各层 之间 的 功能 是 单向 依赖 的 ， 后层 功能 的 实现 对 前层 透明 ， 该 模型 的 个 层次 分别 是 ① 系统 应用层 ； ② 抽象 类型 层 ； ③ 组合 类型 层 ； ④ 基本 类型 层 ； ⑤ 对象 存取 层 ； ⑥ 虚拟 类型 层 ； ⑦ 物理 存取 层图 　 　 软件 理解 方法 　 工程 法 　 　 工程 法 就是 利用 工程 的 办法 来 进行 程序 理解 的 方法 ， 它 包括 正向 工程 、 逆向 工程 、 再 结构 、 再用 工程 以及 软件 再 工程 等 ， 下面 分别 作 简要 介绍 　 　 正向 工程 和 逆向 工程 　 　 传统 的 软件 处理过程 就是 把 一个 系统 高层 抽象 和 独立 于 设计 的 逻辑 实现 转变成 物理 实现 的 过程 ， 这 就是 正向 工程 过程 逆向 工程 被 认为 是 不 改变 主题 系统 的 活动 ， 它 只是 一种 检查 过程 ， 而 不是 变换 过程 ， 如图 它 通过 对 人工制品 的 确认 、 人工制品 之间 关系 的 发现 及 抽象 分层 来 方便 软件 理解 过程 有人 认为 逆向 工程 是 一个 两步 过程 ， 即 ① 信息 摘取 ： 分析 主题 系统 以 确定 它 的 组成 成分 和 各 成分 之间 的 关系 ； ② 信息 抽象 ： 以 另 一种 形式 或 更 高 抽象 级 创建 系统 的 表示 也 有人 认为 逆向 工程 是 一个 步 过程 ， 即 ① 数据 收集 ； ② 知识 组织 ； ③ 信息 浏览 、 分析 和 表示 数据 是 用作 研究 、 推理 和 讨论 基础 的 与 事实 有关 的 信息 知识 包括 数据 和 信息 ， 例如 关系 及 由 数据 逐步 演化 来 的 规则 等 信息 是 指 上下文 的 可 选择 的 交流信息 一般 人 认为 ， 逆向 工程 就是 分析 主题 系统 ， 确定 它 的 当前 成分 和 成分 之间 的 依赖 ， 以及 提取 并 创建 系统 抽象 和 设计 信息 的 过程 我们 认为 ， 逆向 工程 是 一个 步 过程 ， 即 ① 模型 建立 modelcreating ： 使用 概念模型 化 技术 构造 应用 于 特定 领域 的 模型 ； ② 提取 extraction ： 使用 合适 的 提取 机制 从 主题 系统 聚集 原始数据 ； ③ 抽象 abstraction 创建 便于 软件 理解 的 抽象 并 允许 结果 信息 的 开发 具体来说 有 以下 一些 方法 抽象 和 组合 设计 恢复 和 概念 赋值 再 文件 反 工程 静态 和 动态分析 概括 资源 流 和 软件结构 变更 和 影响 分析 可维护性 分析 迁移 分析 事务 分析 经济 分析 等 图 　 　 　 再 构造 再 构造 restructuring 是 在 同一个 相关 的 抽象 级别 上 把 一种 表示 转换成 另 一种 表示 ， 而 保持 主题 系统 的 外部 行为 不变 的 过程 　 　 再用 工程 再用 工程 reuseengineering 是 确认 软件系统 中 可 再 用 的 部分 以及 改变 一 软件系统 使 之 更加 可 再 用 的 过程 相关 工作 有 对象 恢复 抽象数据类型 ADT 确认 数据 精化 成分 确认 建立 可 再 用 成分 库 　 　 软件 再 工程 软件 再 工程 softwarereengineering 是 检查和 更新改造 一个 主题 系统 ， 并 以 一种 新 的 形式 重建 的 过程 相关 工作 有 ： 逆向 和 正向 工程 ， 抽象 和 实现 ， 再用 工程 ， 数据 再 工程 ， 改进 更新 和 开拓 ， 形式 转换 ， 再 结构 ， 再 文件 ， 再 模块化 ， 再 开发 等 　 程序 切片 法 　 　 程序 切片 programslicing 是 根据 控制流 和 数据流 分析 而 引进 的 一种 程序 分析 技术 在 过去 年 中 ， 程序 切片 技术 取得 巨大 发展 ， 这方面 的 文献 已经 有 专门 的 文献 库 这里 ， 我们 概述 具有 代表性 的 几种 切片 方法 供 读者 参考 　 　 语句 切片 ： 这种 传统 的 程序 切片 技术 是 一种 条件 切片 ， 它 是 根据 程序 的 顺序 、 循环 和 选择 结构 进行 程序 切片 的 大多数 程序员 都 试 着 用 构成 语句 的 程序 切片 来 识别 程序 的 错误 ， 也 用来 理解 程序 的 行为 该类 程序 切片 包括 静态 切片 和 动态 切片 两种 ， 他们 的 不同之处 是 ： 定义 静态 切片 时需 考虑 程序 的 所有 执行 路径 可靠 的 或 不 可靠 的 ； 而 动态 切片 只 考虑 从 一个 输入 到 程序 的 特定 的 执行 路径 ； 　 　 无 定型 程序 切片 ： 无 定型 程序 切片 是 由 MarkHarman 和 SebastianDanicic 于 年 提出 的 一种 程序 切片 方法 与 传统 程序 切片 相比 ， 无 定型 切片 不仅 在 保存 一个 程序 语义 投影 的 同时 简化 了 程序 ， 还 可以 使用 任何 简化 的 转换 ， 而 这些 转换 保留 了 这个 语义 映射 ， 因此 ， 在 传统 切片 方法 的 基础 上 增强 了 简化 能力 并 可用 来 帮助 软件 理解 ； 　 　 过程 间 和 过程 内 切片 ： 根据 过程 间或 过程 内 分析 、 数据流 分析 、 需求 分析 来 切片 程序 ， 这 类 切片 方法 可 计算 其它 方法 不能 识别 的 过程 间或 过程 内 的 控制 相关 ， 并且 可 重用 程序 切片 的 信息 ， 以便 更好 地 改进 程序 的 效率 ； 例如 ， MarryJeanHarrold 和 NingCi 于 年 提出 重用 驱动 的 过程 间 切片 技术 就是 其中 最 典型 的 代表 ［ ］ ； 　 　 面向对象 切片 ： 近来 程序 切片 技术 已 被 应用 到 面向对象 领域 ， 年 LorenLarsen 和 MarryJeanHarrold ［ ］ 把 切片 技术 应用 与 面向对象 的 系统 相关 图 和 过程 相关 图中 ， 使得 对 面向对象 程序 特别 是 C 程序 的 调试 ， 代码 理解 ， 程序 测试 ， 逆向 工程 和 度量 分析 变得 相对 容易 的 多 同年 ， FrankTip 等 人 ［ ］ 首次 提出 切片 C 类 层次 的 算法 ， 使得 对 C 中 复杂 的 多 继承 和 虚 继承 机制 的 理解 变得 简单 　 格局 识别 法 　 　 既然 搜寻 代码 是 相当 普遍 的 逆向 工程 活动 ， 就 需要 成熟 的 搜寻 工具 维护 人员 必须 在 改正 、 加强 和 再 工程 程序 之前 找到 相关 代码 ， 通常 是 找 适合 某种 模式 的 代码 模式 是 一种 结构 或 行为 ， 它 依赖 于是 寻找 那些 有 特定 语法结构 的 代码 ， 还是 寻找 那些 与 程序执行 有关 的 特定 数据流 、 控制流 或 动态 相关 的 代码 为 定位 这种 模式 需要 一种 更 接近 软件 工程师 智力 模型 的 搜寻 机制 而 不是 一般 的 程序 分析 工具 ， 这种 机制 称为 格局 识别 planrecognition 程序 格局 是 源代码 片段 的 抽象 表示 利用 比较 方法 来 识别 一个 主题 系统 中 程序 格局 的 实例 这个 过程 还 包括 程序设计 语言 的 语义 层 的 模式匹配 格局 识别 的 焦点 之一 是 识别 简单 代码 片段 ， 存在 的 源代码 经过 “ 剪贴 ” 文本 操作 在 一个 系统 中 再次 被 使用 这种 实践 节省 开发 时间 ， 但 由于 增加 的 代码 大小 和 需要 传播 的 每个 修正 制品 的 改变 ， 从而 导致 在 维护 过程 中 的 问题 格局 识别 过程 如下 ： ① 自顶向下 从要 实现 的 一组 目标 出发 ， 确定 怎样 的 格局 能 实现 这些 目标 ， 然后 把 这些 格局 和 源代码 模式 联系 起来 ② 自 底向上 从 源代码 开始 ， 识别 与 源代码 匹配 的 格局 ， 从 这些 格局 中 推断出 更 高层 的 目标 ③ 混合 自顶向下 和 自 底向上 结合 使用 　 概念 赋值 和 概念 分析法 　 　 概念 赋值 conceptassignment 是 发现 面向 人类 的 概念 中 的 问题 ， 并 把 它们 赋值 给 它们 在 软件系统 内部 的 实现 实例 在 大多数 程序 分析 工具 中 使用 对应 于 语法 模式识别 的 格局 识别 是 一种 进步 ， 然而 ， 当 它 被 用来 定位 对 软件 工程师 来说 感兴趣 的 代码 片段 时 因为 格局 比 语法 实体 更 接近 于 程序设计 的 智力 模型 ， 程序 格局 必须 用 程序设计 实现 语言 的 术语 来 表达 如果 把 程序 格局 表示 成 应用层 概念 而 不是 简单 地 抽象 代码 片段 ， 它 的 优点 将 更 明显 解决 这个 问题 的 一种 方法 是 概念 赋值 这是 一个 把 面向 人类 的 的 概念 和 面向 实现 的 概念 部分 匹配 的 过程 ， 这种 概念 模式匹配 类型 能 使得 维护 人员 搜寻 程序 片段 的 基本 代码 库 概念 赋值 是 在 用户 终端 应用 语义 层 的 模式匹配 它 是 一个 在 源代码 内 重新 识别 概念 ， 并 通过 联系 可 识别 概念 及 对应 程序 来 建立 程序 的 一种 理解 的 过程 概念 识别 在 早期 研究 阶段 使用 得 比较 多 ， 部分 原因 是 由于 知识 占用 包括 对 格局 的 识别 和 规约 的 困难 以及 匹配 过程 的 复杂性 导致 自动 理解能力 受到限制 概念分析 conceptanalysis 把 任何 对象 和 属性 之间 的 关系 转换成 一个 完全 的 概念 格可 通过 代数 含义 来 研究 这些 概念 格 ， 并且 利用 概念 格 能够 很 成功 地 研究 初始 关系 的 特性 和 结构 的 本质 因为 对象 和 属性 之间 的 关系 在 软件技术 中 随时 可见 ， 概念分析 是 一种 最 引人注意 的 新型 程序 分析 工具 的 基础 　 模式匹配 法 　 　 模式匹配 patternmatching 是 在 不同 的 抽象层次 上 对 程序 的 各种 模式 进行 匹配 的 过程 软件 理解 的 特征 是 最 基本 地 识别 人工制品 并 理解 它们 之间 的 关系 ； 这个 过程 是 一种 在 不同 抽象层次 的 本质 的 模式匹配 过程 它 包括 识别 、 操作 和 人工制品 开发 几个 步骤 通过 逆向 工程师 的 智力 模式识别 主题 系统 的 一种 特定 的 表示 软件 理解 技术 按 如下 递增 抽象 形式 考虑 源代码 ： 粗糙 文本 ， 预处理 文本 ， 词汇 标志 ， 语法 树 ， 带 符号表 的 注解 抽象 语法 树 ， 控制流 数据流 图 ， 程序 格局 ， 构筑 风范 描述 和 概念模型 等 更加 抽象 形式 的 附加 语法 和 语义 分析 ， 更 接近 代码 的 含义 和 行为 ， 而 与 形式 和 结构 相距 较远 对 不同 的 用户 和 不同 的 软件 理解 目的 来说 必须 进行 不同 层次 的 分析 用 基于 语法 、 语义 和 概念 模式匹配 的 逆向 工程 理解 方法 会 加强 对 程序 的 理解 　 程序 分析法 　 　 程序 分析 包括 静态 程序 分析 和 动态 程序 分析 两种 静态 程序 分析 staticprogramanalysis ） 无须 执行 主题 程序 而 只是 根据 一些 模型 推断 程序 本质 结果 的 过程 它 包括 语法分析 、 类型 检查和 推理 、 控制 和 数据流 分析 、 结构化分析 、 交叉 引用 、 复杂度 度量 等 过程 ； 动态 程序 分析 dynamicprogramanalysis 是 在 一个 主题 系统 中 发现 运行 时 依赖 的 过程 它 包括 对象 实例 依赖 、 动态 联编 和 多态性 、 方法 调用 图 、 登记 和 回 叫 函数 、 路径 覆盖 测试 、 内存 管理 、 功能 瓶颈 、 分支 、 并发 等 　 智能 理解 法 　 　 智能 理解 intelligentunderstanding 是 利用 人工智能 和 专家系统 技术 帮助 进行 软件 理解 目前 已经 开发 出来 的 智能 软件 理解 工具 有 以下 几类 ① 特别 领域 模型 驱动 的 基于 规则 的 问答 系统 如 LASSIE ② 格局 驱动 的 程序 识别器 如 程序员 徒弟 GRASPRPATPROUSTTALUS 等 ③ 模型 驱动 的 推理 软件 理解 系统 ， 如 DESIRE 　 软件 理解 对象 的 进展 　 　 理解 对象 已经 从 传统 的 结构化 软件 进展 到 面向对象 软件 ， 我们 在 计算机科学 年 第期 的 一篇 文章 中 谈到 过 这类 问题 ， 故 这里 只 给出 简单 的 描述 　 　 面向 传统 软件 的 软件 理解 主要 从 以下 几个 方面 展开 的 ： 　 　 基于 数据结构 的 软件 理解 ； 　 　 基于 控制 的 软件 理解 ； 　 　 基于 功能 的 软件 理解 ； 　 　 基于 文件 和 基于 知识 的 软件 理解 ； 　 　 基于 类型 推理 的 软件 理解 　 　 面向对象 软件 的 软件 理解 方法 归结 起来 一般 有 以下 几个 方面 ： ① 基于 类 层次 的 理解 ； ② 基于 对象 依赖 关系 的 理解 ； ③ 基于 对象 式 程序结构 的 理解 ； ④ 基于 高层 对象 系统 理解 ； ⑤ 基于 对象 系统 功能 设置 的 理解 ； ⑥ 基于 方法 多态性 的 理解 ； ⑦ 详细 编码 的 理解 ； ⑧ 利用 度量 技术 理解 面向对象 程序 　 软件 理解 工具 PCTs 　 　 软件 理解 工具 PCTs 是 一类 使得 理解 计算机程序 的 结构 或 功能 的 过程 变得 容易 的 软件工程 工具 利用 PCT 可以 完成 下列 软件 理解 任务 ： ① 再 工程 遗留 的 复杂 软件系统 ； ② 深刻理解 别人 书写 的 复杂 代码 ； ③ 采用 逆向 工程 方法 恢复 某个 复杂 程序 的 设计 ； ④ 再 文件 目前 存在 的 复杂 计算机程序 ； ⑤ 收集 一个 复杂 程序 的 总体 构筑 信息 和 结构 信息 ； ⑥ 获取 一个 复杂 系统 的 行为 或 算法 信息 　 　 目前 已经 存在 的 软件 理解 工具 很多 ， 根据 工具 的 用途 可 分成 下列 几类 ： 　 　 用于 代码 分析 的 PCTs 　 　 这 类 软件 理解 工具 提供 一个 程序 的 大量 细节 信息 它们 的 目的 就是 帮助 理解 源代码 这 类 工具 主要 集中 在 一个 应用程序 的 结构 和 它 的 静态 属性 上 这些 工具 根据 设计者 目的 的 不同 ， 又 可 分为 以下 几类 ： ① 基于 知识 的 程序 分析 工具 ； ② 类似 程序员 徒弟 的 工具 ； ③ 从 源代码 中 抽象 高阶 函数 概念 的 工具 ； ④ 基于 启发式 的 概念 识别器 ； ⑤ 用 面向对象 框架 来 表示 程序设计 概念 的 工具 ； ⑥ 使用 格局 库 的 模式 制导 推理机 ； ⑦ 能够 提出 合理 预言 、 建议 和 解释 的 工具 例如 ， 南京大学 设计 开发 的 软件 理解 工具 TAUS 能 对 Pascal 源程序 进行 结构 分析 TAUS 的 设计 思想 是 根据 程序 的 物理 结构 和 逻辑 结构 ， 把 程序 划分 成较 小 的 程序段 分别 进行 理解 ， 而后 通过 对 程序控制 流 ， 数据流 跟踪 或 人工 地 模拟 执行程序 ， 达到 对 程序 抽象 的 了解 ， 最后 把 程序 细节 的 理解 归纳 成 更 高级 的 抽象 PROMPTER 是 IBM 日本 科学院 研制 的 基于 知识 的 代码 理解 工具 ， 它 能 产生 汇编语言 书写 的 程序 的 注解 PROUST 是 美国 Yale 大学 计算机系 研制 的 工具 ， 它 对 由 初级 程序员 书写 的 Pascal 程序 进行 联机 分析 和 理解 ， 把 一个 程序 以及 一个 程序 需求 的 非 算法 描述 作为 输入 ， 然后 找到 需求 和 代码 之间 的 最 可能 的 匹配 它 通过 把 有 缺陷 的 代码 同 根本 意图 联系 起来 ， 给出 程序 缺陷 的 深一步 理解 意大利 的 GAntoniol 等 人 年 推出 他们 多年 来 开发 的 成果 — — CANTO 代码 和 结构 分析 工具 ， 一个 全面 的 系统 理解 环境 ， CANTO 在 不同 的 抽象层次 上 集成 了 多种 方法 、 观点 和 观察点 ， 这些 层次 包括 从 精细 粒度 信息 层到 构筑 规范 层 之间 的 所有 层次 用户 可以 根据 自己 的 需要 利用 它 从 源代码 抽象 信息 ， 通过 分析 控制 该 计算 什么 ， 不该 计算 什么 　 　 用于 分析 面向对象 语言 的 PCTs 　 　 北京大学 在 面向对象 的 逆向 工程 方面 做出 很大 成就 ， 以 杨 芙 清 院士 为首 开发 的 “ 青鸟 工程 ” 工具 ， 针对 C语言 ， 采用 增量 分析 技术 静态 分析 源程序 代码 ， 用 EER （ enhancedentityrelationship ） 为 C 程序 建立 概念模型 并 抽取 程序 信息 ， 将 信息 保存 在 数据库 中 ， 最后 ， 按照 不同 的 用户 需求 组织 程序 信息 ， 辅助 用户 理解 C 程序 逆向 生成 源程序 的 OOD 文档 和 ROSE 文档 ， 为 用户 进一步 提取 构件 构架 提供 帮助 该 工具 由 部分 组成 ， 即 信息 抽取 器 、 信息管理 器 和 用户界面 澳大利亚 的 JohannesSametinger 提出 一种 用于 C 的 维护 工具 ， 该 工具 把 C 程序 文件 分成 一个个 小 的 程序 片 例如 ， 类 定义 片 、 方法 实现 片及 变量 声明 片 等 ， 通过 这种 方法 帮助 程序员 理解 用 C 编写 的 程序 美国 Washington 大学 的 DavidGrave 等 人 提出 的 用于 构造 调用 图 的 参数 化 算法 框架 利用 该 框架 实现 了 诸多 熟悉 的 和 新型 的 算法 ， 利用 这些 算法 对以 Cecil 和 Java 语言 书写 的 中等 规模 的 程序 进行 分析 和 理解 时 起到 很 好 的 效果 ； 同时 ， 它 克服 了 过程 间 分析方法 在 描述 面向对象 的 语言 和 函数 型 语言 时 过于 复杂 的 情况 Gen 是 一种 用于 C 程序 的 分析器 产生器 ， 是 一个 C 分析 工具 开发 环境 ， 它 是 由 贝尔实验室 的 PremDevanbu 和 LauraEaves 共同开发 的 ， 它 的 实现 是 通过 把 手工 语法分析 树 查询 机制 GENOAGENII 和 Cfront 编译器 结合 而成 目前 在 C 中 已经 实现 了 许多 不同 的 工具 ， 以便 完成 不同 的 任务 例如 ， 产生 C 类 的 一个 继承 层次 ； 产生 类 成员 之间 函数调用 图 ； 为 一个 给定 的 类 创建 一个 缺省 的 输出 操作 “ ” ； 产生 控制流 和 数据 使用 报告 ； 产生 C 度量 ： 衍类 与 基类 的 比例 ， public 成员 的 数目 和 类 的 总数 目的 比例 等 ； 检查 基类 的 构造函数 是否 总是 被 说明 成虚 的 ； 检查 构造函数 和析构 函数 是否 从来 没有 被 声明 成虚 的 ； 没有 任何 成员 函数 应该 既 是 虚 的 又 是 内联 的 TaegyunKim 和 GyusangShin 自从 年 开始 开发 一种 称为 OODesigner 的 CASE 工具 ， 该 工具 具有 支持 OMT 技术 的 种 模型 ， 生成 类 资源 的 文本 ， 在 一个 图中 检查 对象 之间 的 一致性 ， 维护 对象 模型 的 信息 仓库 ， 产生 C 代码 以及 对 C 进行 逆向 工程 处理 等 功能 ［ ］ 　 　 用于 再 构造 、 再 工程 、 逆向 工程 、 再用 工程 的 PCTs 　 　 这 类 工具 能 很 好 地 管理软件 理解 过程 的 复杂性 维护 人员 能够 利用 他们 从 一个 交互 活动 的 低级 代码 提取 更 高级 信息 尽量 使 人们 从 各种 冗长 的 手工 任务 如 大量 代码 阅读 、 探索 和 通过 检查 进行 模式匹配 中 摆脱 出来 同时 逆向 工程 工具 和 技术 比纯 基于 人工智能 的 自动 软件 理解 更 健壮 、 更加 可 度量 ， 这同 基于 定理 证明 的 形式 方法 一样 简言之 ， 逆向 工程 工具 是 半自动化 的 、 交互 的 和 可 度量 的 ， 这 使得 它们 与 手工 的 、 交互 的 和 不可 度量 的 代码 阅读 相比 更 具有 吸引 人之处 ； 它 也 不同于 自动 的 、 非 交互 的 和 通常 是 不可 度量 的 自动 软件 理解 例如 ， 左治亚 技术 学院 的 DFJerding 等 人 指出 ［ ］ ： 实现 、 修改 和 再 工程 一个 面向对象 的 系统 ， 需要 对 程序执行 时 发生 的 交互进行 理解 ， 为此 要 寻找 识别 、 可视化 和 分析 面向对象 的 程序执行 时 交互 的 方法 以 考察 和 理解 动态 行为 ， 作者 发现 程序执行 时 的 交互 脚本 可用 以 对 理解 过程 进行 抽象 文中 提出 了 一种 识别 这些 交互 模式 的 方法 该 方法 可 用于 支持 设计 恢复 、 验证 、 再 工程 ， 该 方法 既 可 用于 面向对象 程序 也 可 用于 过程 式 程序 　 　 用于 程序 相关 分析 的 PCTs 　 　 AaronBBinkley 和 StephenRSchach 提出 的 耦合 相关 度量 CDM ［ ］ 技术 通过 计算 引用 相关 、 结构 相关 和 数据 集成 相关 来 达到 对 软件 理解 的 目的 它 是 一种 成功 的 设计 质量 度量 ， CDM 在 预知 运行 时 失败 和 大量 不同 的 维护 度量 时 能够 超乎寻常 地 完成 诸多 计算 度量 工作 主要 在 以下 例中 得到 充分体现 ： ① 一个 COBOL 注册 系统 的 运行 时 数据 度量 ； ② 一个 C语言 文本处理 工具 的 维护 数据 度量 ； ③ 一个 C 病人 协作 治疗 系统 的 维护 数据 度量 ； ④ 一个 Java 的 电子 文件传送 设备 的 维护 数据 的 度量 　 　 利用 图形 技术 和 可视化 技术 的 PCTs 　 　 就是 利用 各种各样 的 图形 、 表格 和 动画 来 帮助 进行 软件 理解 的 一项 技术 例如 ， 利用 类 层次 CHG 理解 面向对象 程序 中 的 类 继承 关系 ； 利用 子 对象 图 SOG 来 动态 识别 类 实例 中 各个 子 对象 、 查询方法 等 ， 以此 理解 面向对象 程序 ； 利用 控制流 图 CFG 来 理解 程序 之间 和 程序 内部 各 成份 之间 的 控制关系 ； 利用 数据流 图 DFG 来 理解 程序 之间 和 程序 内部 各 成份 之间 的 数据 流动 情况 ； 利用 系统 相关 图 SDG 和 控制 相关 图 CDG 来 理解 软件系统 中 各种 依赖 关系 等等 例如 ， DannyBLange 和 YuichiNakamura 年 ［ ］ 介绍 了 他们 的 环境 ProgramExplorer ， 一种 用于 C 的 程序 可视化 处理器 ， 该 工具 把 面向对象 程序 中 的 动态 信息 对象 和 静态 信息 类 结合 起来 进行 程序 分析 和 理解 ， 它 是 在 吸取 了 工具 CIA 和 GraphLog 优点 的 基础 上 开发 成功 的 其中 采用 了 水平 选择 和 垂直 选择 两项 耦合 静态 信息 和 动态 信息 的 技术 ， 使得 对 C 程序 的 理解 方便 、 快捷 、 高效 　 　 利用 程序 切片 技术 的 PCTs 　 　 例如 ， Wisconsin 程序 切片 工具 version 是 一个 支持 对 C 程序 操作 的 软件系统 它 包括 向 后 切片 、 向前 切片 和 消 片种 功能 ， 他们 能够 帮助 用户 获得 对 一个 程序 正在 做 什么 和 如何 做 的 理解 该 切片 工具 由 用来 建立 和 操作控制 流图 和 程序 相关 图 的 一个包 构成 ， 和 分析 C 程序 语法 的 一个 前端 类似 ， 也 把 它们 转换成 适用 于 切片 的 中间 表示 　 　 另外 ， 还有 利用 概念分析 的 PCTs ［ ］ 、 利用 度量 技术 的 PCTs ［ ］ 等等 ， 基于 类型 推理 的 PCTs ［ ］ 、 整 程序 分析 PCTs ［ ］ 等等 ， 限于 篇幅 ， 这里 不再 讨论 　 OOAF 简介 　 　 我们 正在 开发 一种 基于 CHG 的 分析 面向对象 程序 的 框架 — — OOAFOOAF 目前 具有 以下 功能 ： 　 　 利用 路径 等价 类 技术 识别 子 对象 ； 　 　 利用 路径 子 对象 进行 可见 方法 和 主导 方法 确定 ； 　 　 结合 确定 的 可见 方法 和 CHG 建立 可见 方法 类 层次 图 VMCHG ； 　 　 在 WMCHG 的 基础 上 计算 继承 集 和 改写 集 ， 确定 改写 边界 ； 　 　 构造 虚 函数调用 图 VFCG 　 　 OOAF 框架结构 由 以下 几 部分 组成 ： 　 　 词法 和 语法分析 器 用来 分析 输入 的 CJava 源程序 的 词法 和 语法 正确性 ； 　 　 CHG 产生器 对 词法 和 语法 正确 的 CJava 源程序 产生 CHG 图 并 负责 把 CHG 输入 CJava 程序 分析器 中 ； 　 　 CJava 程序 分析器 该 分析器 又 由 部分 组成 ： 　 　 　 　 ① 子 对象 识别器 ： 用来 识别 各个 类 结点 的 对象 包含 的 子 对象 的 情况 ； ② 方法 确定 处理器 ： 用于 确定 各个 对象 类 结点 可见 方法 和 主导 方法 ； ③ 继承 或 改写 集 计算器 ： 用来 计算 每个 方法 的 继承 集 和 改写 集 ， 并 确定 该 方法 的 改写 边界 ； ④ VMCHG 产生器 ： 用来 产生 VMCHG ， 并 把 VMCHG 输入 到 VFCG 产生器 　 　 VFCG 产生器 ： 它 利用 继承 改写 集 计算器 和 VMCHG 产生器 输入 的 继承 集 、 改写 集 、 VMCHG 等 构造 VFCG ， 并 报告 虚 函数调用 的 有关 信息 当然 ， OOAF 目前 还 只是 一个 功能 较弱 的 分析 静态 类型 面向对象 程序 的 框架 ， 我们 正在 逐步 集成 对象 的 类型 分析 、 程序 切片 、 概念分析 及 可视化 等 技术 ， 以 进一步 完善 OOAF 的 功能 　 结束语 　 　 以上 分别 对 软件 理解 基本 因素 、 方法 的 研究 现状 和 最新进展 进行 了 比较 全面 的 分析 和 研究 ， 我们 认为 ： 　 　 软件 理解 方法 一般 是 特定 于 某个 或 某 几个 层次 的 ， 即 ① 基于 机器码 和 中间代码 层 的 理解 ， 离不开 反汇编 和 反编译 技术 ； ② 基于 源程序 层 的 理解 ， 借助 逆向 工程 、 再 工程 、 再 结构 、 软件 再用 工程 等 技术 ； ③ 基于 语法 层 的 理解 、 程序 分段 、 程序 切片 、 程序 分析 等 技术 就是 其中 最 典型 的 代表 ； ④ 基于 程序 语义 层 的 理解 ， 模式匹配 、 格局 识别 、 概念 赋值 和 概念分析 等 都 是 进行 语义 级 的 软件 理解 和 分析 技术 　 　 软件 理解 过程 是 一个 逐层 推进 的 模式匹配 过程 ， 即 ① 程序 分析 进行 程序设计 语言 中 语法 模式匹配 ② 格局 识别 进行 程序设计 语言 领域 中 语义 模式匹配 ③ 概念 赋值 进行 应用领域 或 终端用户 领域 中 语义 模式匹配 　 　 本文 同时 介绍 了 我们 在 面向对象 软件 理解 和 程序 分析 方面 所 取得 的 一些 进展 ， 我们 构造 的 虚 函数调用 图 VFCG ［ ］ 和 面向对象 程序 的 分析 框架 OOAF ， 为 解决 静态 类型 面向对象 语言 中虚 函数调用 模型 化 提供 一种 可行 的 解决方案 　 　 虽然 WoodsS 和 YangQiang 形式 地 证明 了 软件 理解 问题 是 一个 NPhard 问题 ［ ］ ， 但是 从 不同 的 角度 ， 不同 的 层次 进行 软件 理解 仍然 是 可以 取得 进展 的 事实 已 证明 在 软件维护 过程 中 软件 理解 不仅 必不可少 ， 而且 正 日益 发挥 它 的 巨大作用 今后 ， 软件 理解 的 方法 更 注重 基本 理论 及 语法 语义 层 的 理解 所以 ， 我们 认为 概念分析 、 模式匹配 、 格局 识别 等 方法 将 是 以后 软件 理解 的 主要 方法 同时 ， 由于 精化 演算 技术 的 发展 和 完善 ， 利用 精化 演算 技术 进行 程序 理解 也 是 一种 今后 可取 的 方法 基金项目 ： 本 课题 得到 江苏省 应用 基础 基金项目 项目编号 BJ 资助 作者简介 ： 李必信 ， 男 ， 年生 ， 博士 研究生 ， 主要 研究 方向 为 面向对象 技术 、 程序 分析 、 软件 理解 等 郑国梁 ， 男 ， 年生 ， 教授 ， 博士生 导师 ， 主要 研究 方向 为 面向对象 技术 、 软件工程 、 软件开发 环境 等 李宣东 ， 男 ， 年生 ， 博士 ， 副教授 ， 主要 研究 方向 为 面向对象 技术 、 实时 系统 张勇翔 ， 男 ， 年生 ， 硕士 研究生 ， 主要 研究 方向 为 面向对象 技术 、 软件 理解 和 程序 分析 梁佳 ， 女 ， 年生 ， 硕士 研究生 ， 研究 方向 同 上 作者 单位 ： 李必信 　 郑国梁 　 李宣东 　 张勇翔 　 梁 　 佳 　 南京大学 计算机软件 新 技术 国家 重点 实验室 　 南京 　 　 南京大学 计算机科学 与 技术 系 　 南京 　 参考文献 　 　 BrooksRTowardsatheoryofthecomprehensionofcomputerprogramsIntlJournalofManMachinesStudies ～ 　 　 SolowayEEhrlichKEmpiricalstudiesofprogrammingknowledgeIEEETransonSoftwareEngineeringSE ～ 　 　 LetovskySSolowayECognitiveprocessesinsoftwarecomprehensionInSolowayEIyengaredsSedsEmpiricalStudiesofProgrammerFirstWorkshopNorwoodNJAlexPublisher ～ 　 　 LetovskySSolowayEDelocalizedplansandsoftwarecomprehensionIEEESoftware ～ 　 　 PenningtonNComprehensionstrategiesinprogrammingInOlsenGMSheppardSSolowayEedsEmpiricalStudiesofProgrammersSecondWorkshopNorwoodNJAblexPublisher ～ 　 　 vonMayrhauserVansAMFromsoftwarecomprehensiontotoolsrequirementsforanindustrialenvironmentInProcofndWorkshoponSoftwareComprehensionCapriItalyIEEEComputerSocietyPress ～ 　 　 vonMayrhauserVansAMComprehensionprocessesduringlargescalemaintenanceInProcofthIntlConfonSoftwareEngineeringSorrentoItalyIEEEComputerSocietyPress ～ 　 　 vonMayrhauserVansAMSoftwarecomprehensionduringsoftwaremaintenanceandevolutionComputer ～ 　 　 RobertOCallahanetalLackwitAprogramunderstandingtoolbasedontypeinferenceInProceedingsofthIntlConfonSoftwareEngineeringBoston ～ 　 　 JerdingDFetalVisualizinginteractionsinprogramexecutionInProceedingsofthInternationalConfonSoftwareEngineeringBoston ～ 　 　 DavidGroveetalCallgraphconstructioninobjectorientedlanguageACMSIGPLANNotices ～ 　 　 MargarethaWPAnalyzingthemeasurabilityinobjectorienteddesignsInOOPSLAConfProceedingsLasVegasNevada ～ 　 　 GregDefouwetalFastinterproceduralclassanalysisInProceedingsofPOPLSanDiegoCA 　 　 DannyBLangeYuichiNakamuraProgramexplorerAprogramvisualizerforCUSENIXAssociationConfonObjectOrientedTechnologiesCONTSBerkeleyCalif ～ 　 　 DannyBLangeYuichiNakamuraObjectorientedprogramtracingandvisualizationIBMResearchTokyoResearchLaboratoryResearchReportRT 　 　 DannyBLangeYuichiNakamuraInteractivevisualizationofdesignpatternscanhelpinframeworkunderstandingInProceedingsoftheACMConfonObjectOrientedProgrammingSystemsLanguagesandApplicationsOOPSLANewYorkACMPress 　 　 YucihiNakamuraDannyLangeObjectorientedvisualizationtohelpprogramunderstandingTransactionsofInstituteofElectronicsInformationandCommunicationEngineersIEICE 　 　 DarrenCAtkinsonWilliamGGriswoldThedesignofwholeprogramanalysistoolsInTheProceedingsofthethIntlConfonSoftwareEngineeringICSEBerlin ～ 　 　 LorenLarsenMarryJeanHarroldSlicingobjectorientedsoftwareInTheProceedingsofthethIntlConfonSoftwareEngineeringICSEBerlin ～ 　 　 FrankTipetalSlicingclasshierarchiesinCInTheProceedingsofthethAnnualACMConfonObjectOrientedProgrammingSystemLanguageandApplicationsOOPSLAACMSIGPLANNotecesNewYorkACMPress 　 　 MarkHarmanSebastianDanicicAmorphousprogramslicingInTheProceedingsofIWPCDearborn ～ 　 　 DannyBLangeYuichiNakamuraObjectorientedprogramtracingandvisualizationIEEEComputerSociety ～ 　 　 RamalingamGSrinivasanHAmemberlookupalgorithmforCInProceedingsofTheACMSIGPLANConfonObjectOrientedProgrammingSystemsLanguageApplicationOOPSLALasVegas ～ 　 　 TaegyunKimGyusangShinRestructuringOOdesignerACASEtoolforOMTInTheProceedingsofthethIntlConfonSoftwareEngineeringICSEKyoto ～ 　 　 MarryJeanHarroldNingCiReusedriveninterproceduralslicingInTheProceedingsofthethIntlConfonSoftwareEngineeringICSEKyoto ～ 　 　 SneltingGConceptAnalysis — — AnewframeworkforprogramunderstandingInProcACMSIGPLANSIGSOFTWorkshoponProgramAnalysisforSoftwareToolsandEngineeringPASTEMontreal ～ 　 　 CanforaGManciniLTortorellaMAworkbenchforprogramcomprehensionduringsoftwaremaintenanceInAnielloCimitileedInProceedingsofthWorkshoponProgramComprehensionIWPCLosAlamitosCalifoniaIEEEComputerSocietyPress ～ 　 　 CrimitileALuciaADeIdentifyingobjectsinLegacysystemInAnielloCrimitileedProceedingsofthWorkshoponProgramComprehensionIWPCLosAlamitosCaliforniaIEEEComputerSocietyPress ～ 　 　 KellerRPatternvisualizationofsoftwarecomprehensionInAnielloCrimitileedProceedingsofthWorkshoponProgramComprehensionLosAlamitosCaliforniaIEEEComputerSocietyPress ～ 　 　 WoodsSYangQiangTheprogramunderstandingproblemAnalysisofaheuristicapproachInTheProceedingsofthethIntlConfonSoftwareEngineeringICSEBerlin ～ 　 　 ChristianLindigGregorSneltingAssessingmodularstructureoflegacycodebasedonmathematicalconceptanalysisInTheProceedingsofthethIntlConfonSoftwareEngineeringICSEBoston ～ 　 　 GregorSneltingFrankTipReengineeringclasshierarchiesusingconceptanalysisEmailSneltingipscstubsde 　 　 PremDevanbuLauraEavesGEN — — AnanalyzergeneratorforCprogramsEmailPremresearchattcom 　 　 AntoniolGetalProgramunderstandingandmaintenancewiththeCANTOenvironmentEmailantoniolirstitcit 　 　 BinkleyAaronBStephenRSchachValidationofthecouplingdependencymetricasapredictorofruntimefailuresandmaintenancemeasuresInProceedingsoftheInternationalConferenceonSoftwareEngineeringKyoto ～ 　 　 李必信 ， 王云峰 ， 郑国梁 一种 在 静态 类型 面向对象 语言 中 构造 VFCG 的 方法 南京大学 学报 ， 待 发表 　 　 　 LiBixinWangYunfengZhangGuoliangAnapproachforconstructingVFCGinstaticallytypedobjectorientedlanguageJournalofNanjingUniversitytoappear 收到 日期 ： 改稿 日期 ：