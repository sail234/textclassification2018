微型机 与 应用 WEIXINGJIYUYINGYONG 　 Vol 　 No 　 PJAVA 多线程 编程 问题 分析 吕海莲 　 王巍 摘要 ： 多线程 编程 在 程序设计 中 的 重要性 以及 在 编程 中 所 注意 的 问题 ， 包括 多线程 的 分析 和 定义方法 、 线程 运行 中 的 合理 调度 、 资源 的 有效 分配 以及 解决 资源 冲突 的 有效性 措施 等 。 关键词 ： Java 语言 线程 同步 冲突 死锁 类 JAVA 前景 与 多线程 概念 　 　 JAVA 不仅 是 一门 语言 ， 它 已 成为 一门 技术 ， 例如 JAVA 芯片 技术 、 JAVA 编译 技术 、 基于 JAVA 的 信息家电 联网 技术 （ Jini ） 等 ， 并 以 它 的 平台 独立性 、 健壮性 、 JAVA 虚拟机 技术 等 特点 受到 广大 编程 者 青睐 。 JAVA 能 把 所有 东西 从 桌面 计算机 平稳 地 转换成 基于 网络 的 计算 ， 它 是 Web 浏览器 中 必须 具备 的 技术 ， 是 一个 完全 面向对象 的 语言 ， 是 有利于 处理 网络协议 的 程序综合 库 。 线程 是从 一个 完整 应用程序 分出 的 单独 的 处理 步骤 ， 是 程序 内部 的 一个 顺序控制 流 。 一个 小 程序 中 可 含个 或 多个 线程 并 可 同时 运行 ， 由于 单线程 一旦 运行 就 独占 线程 的 所有 时间 资源 ， 而 多线程 的 出发点 就是 提高 系统 的 并发 性 ， 因此 ， 引人注意 的 不是 一个 单独 的 线程 ， 而是 在 一个 程序 中 实现 多个 线程 ， 它 意味着 一个 程序 的 多行 语句 同时 执行 ， 即用 抢占 资源 的 方式 对 多个 线程 实现 轮流 执行 。 例如 HotJAVA 浏览器 就是 一个 多线程 的 应用 实例 。 在 JAVA 语言 中 ， 多线程 编程 已 成为 编程 的 一个 有效 工具 ， 可 编制 出 界面 友好 、 效率高 的 应用程序 。 　 　 JAVA 内在 支持 多线程 ， 其 线程 由 部分 组成 ： 　 　 （ ） 虚拟 CPU ， 封装 在 Java ． lang ． Thread 类中 。 　 　 （ ） CPU 所 执行 的 代码 ， 传送 给 Thread 类 。 　 　 （ ） CPU 所 处理 的 数据 ， 传送 给 Thread 类 。 　 　 JAVA 通过 多线程 有效 地 实现 了 多任务 的 并发 执行 ， 所以 ， 在 JAVA 多线程 编程 中 ， 不仅 考虑 多线程 自身 的 问题 分析 ， 还应 注意 各 线程 在 调度 中 出现 的 各种 情况 ， 下面 从 几个 方面 对 多线程 的 设计 进行 讨论 。 多线程 设计 与 创建 　 　 一个 程序 中含 几个 线程 应视 具体 事件 而定 ， 像 一个 弹球 游戏 一样 ， 为了 使球 在 运动 中 随时 响应 用户 的 输入 信息 ， 可 设计 个 线程 ： 一个 为 处理 用户 输入 的 主线 程 ； 一个 为 专门 处理 球 运动 的 球 线程 。 主线 程和球 线程 在 系统 的 调度 下 交替 执行 ， 形成 灵活 的 弹球 窗口 示例 。 确定 线程 后 ， 一般 用 Runnable 接口 实现 线程 的 创建 ， 它 比 不 支持 多重 继承 的 Thread 类 方法 有 更好 的 灵活性 。 ． 线程 编程 形式 　 　 在 Runnable 方法 中 可用 二种 编程 形式 ： 　 　 （ ） 采用 构造方法 。 在 子类 中先 定义 线程 ， 然后 在 构造方法 中 完成 线程 的 创建 和 启动 。 　 　 （ ） 采用 启动 方式 。 在 程序 中先 定义 线程 ， 再 设计 一个 start （ ） 方法 ， 在 start （ ） 方法 中 完成 线程 的 创建 和 启动 。 ． 线程 优先级 设置 　 　 线程 的 运行 由 调度 程序 完成 ， 调度 方式 有 抢先 式 （ preemptive ） 和 协作 式 （ cooperative ） 。 抢先 式 比 协作 式 有 更好 的 资源 调度 优势 ， 而 JAVA 支持 抢先 式 ， 因此 ， 在 多线程 程序 中 ， 分配 优先级 的 能力 非常 重要 ， 它 是 线程 调度 的 决策依据 ， 程序 中 的 一些 部分 可 根据 其 不同 重要 程度 而 有所 变化 ， 保证 按照 它们 的 价值 给 它们 以 相应 的 优先级 。 设置 优先级 必须 注意 以下 情况 ： 　 　 （ ） 优先级 要 用 ～ 之间 的 整数 来 确定 。 　 　 （ ） 线程 创建 时 ， 子 线程 继承 父 线程 的 优先级 。 　 　 （ ） 线程 创建 后 ， 可 通过 调用 setpriority （ ） 改变 线程 的 优先级 。 　 　 JAVA 运行 系统 选择 最高 优先级 的 线程 执行 ， 在 设计 时 ， 应 注意 让 低优先级 的 线程 有 机会 执行 ， 此时 高 优先级 的 线程 应该 适当 地 进入 睡眠 状态 。 ． 合理 建立 和 使用 线程 组 　 　 在 JAVA 中 所有 线程 都 是 线程 组 的 一部分 ， 可 根据 情况 建立 自己 的 线程 组或用 系统 默认 的 main 线程 组 。 采用 线程 组 结构 可 对 多线程 集中管理 ， 例如 可以 同时 启动 、 挂 起 或 终止 一个 线程 组中 的 所有 线程 。 在 应用 时应 注意 下列 方法 的 运用 ： 　 　 （ ） 找到 线程 所在 的 组 可用 getThreadGroup （ ） 方法 。 　 　 （ ） 线程 组 支持 访问 权限 ， 若 没有 定义 ， 允许 组中 的 线程 查询 和 寻找 其它 组 中线 程 的 信息 。 　 　 （ ） 在 缺省 情况 下 ， 创建 的 进程 没有 安全 级 ， 而 大多数 浏览器 不 允许 改变 安全 管理程序 ， 因此 ， 只有 在 应用程序 中 创建 SecurityManager 类 的 子类 ， 覆盖 那些 使用 了 线程 安全 级 的 方法 。 线程 状态 转换 的 正确 实现 　 　 每个 线程 都 有 一个 从 新 生态 （ newborn ） 到 死亡 态 （ dead ） 的 过程 ， 中间 经过 可 执行 态 （ runnable ） 、 执行 态 （ runing ） 、 阻塞 态 （ blacked ） 等 状态 ， 其 转换 及 相应 采取 的 实现 方法 如图所示 。 图 线程 状态 转换 示意图 　 　 在 多线程 设计 中 ， 对 每个 线程 的 存在 状态 要 进行 正确 的 转换 ， 对 一些 方法 要 慎重 。 　 　 （ ） 线程 不要 过长 地 占用 计算机 的 处理机 ， 应 在 运行 一段时间 后 调用 sleep （ ） 或 yield （ ） 方法 以便 给 其它 进程 机会 。 　 　 （ ） 慎重 使用 stop （ ） 方法 ， 避免 不发 警告 而 杀死 个 线程 ， 即 执行 终止 了 ， 而 程序 处在 什么 状态 不能 确定 ， 这样 就 会 杀死 小 应用程序 所在 的 主线 程 。 为此 可 遵循 下列 条件 ： 　 　 ① 次 只有 个 线程 运行 applet 代码 。 ② 在 applet 上 启用 start 。 要么 为 那个 applet 启动 个 线程 ， 要么 让 个 现成 的 线程 继续 运行 。 ③ 在 applet 上 启用 stop 导致 登记 个 请求 ， 让 运行 线程 停止 ， 后面 对 start 的 调用 可 取消 这一 请求 。 正确处理 多线程 之间 的 资源 利用 问题 ． 多线程 间 的 同步 　 　 线程 同步 提供 了 保证 不同 线程 按 适当 顺序 使用 共享资源 的 工具 。 线程 可 直接 访问共享 数据 ， 既有 相互之间 高效 通信 的 优点 ， 也 有 线程 间 任意 相互 干扰 的 弊端 。 安全 的 多线程 数据 使用 方案 要求 不同 线程 处理 不同 的 数据 ， 即 多个 线程 不能 共享 临界 区 。 例如 ： 有张 车票 供个 顾客 预定 ， 而 又 要求 个 顾客 尽可能 多地 预定 张 车票 ， 这张 车票 作为 共享资源 ， 可能 导致 张票 预定 给 个 顾客 的 情况 ， 针对 这种 情况 ， 设计 时应 采用 正确 的 同步 机制 。 　 　 （ ） 使用 关键字 synchronized 　 　 sychronized 关键字 是 给 临界 区 加上 锁 。 　 　 方法 ： 　 　 sychronized （ 实例 名 ） ｛ 　 　 ／ ／ 临界 区 　 　 … … ｝ 　 　 大括号 内 的 程序 属于 临界 区 ， 当某 一线 程 进入 临界 区后 ， 其它 线程 只能 等待 ， 用来 保证 临界 资源 只能 分配 给 个 线程 。 　 　 方法 ： 　 　 classsomeclass ｛ 　 　 　 … … 　 　 sychronizedaMethod （ ） ｛ 　 　 　 … … 　 　 ｝ ｝ 　 　 这种 方法 确保 当 个 线程 调用 了 某 实例 aMethod 操作 时 ， 其它 线程 不会 调用 该 实例 的 aMethod 操作 。 　 　 （ ） 采用 管程 （ monitor ） 　 　 通过 管程 来 限制 线程 的 相互作用 ， 可用 多个 线程 保护 数据 的 不同 ， 因 它 对 相关 的 对象 不 提供 天然 的 保护 ， 所有 要 靠 自己 慎重 选择 哪些 代码 包含 在 管程 中 。 ． 避免 死锁 　 　 若个 线程 同步 执行 时 需要 相互 打开 ， 就 会 出现 个 线程 依赖于 另个 要 打开 的 线程 而 形成 死锁 。 它 不是 资源 不够 引起 的 ， 而是 由 线程 的 调度 引起 的 。 对于 死锁 可用 下述 方法 解决 ： 　 　 （ ） 尝试 在 尽可能 短 的 时间 内 执行 锁定 的 代码 ， 占用 时间 越长 ， 另 一线 程 出现 和 需要 对象 的 可能性 越大 。 　 　 （ ） 当 你 从 另 一个 被 同步 的 方法 中 激活 被 同步 的 方法 时要 小心 ， 最好 是 清楚 地 定义 每个 线程 的 任务 ， 并 考虑 使用 什么 数据 和 什么 时候 使用 。 　 　 总之 ， 在 多线程 程序设计 中 ， 要 充分考虑 各种 可能 出现 的 情况 ， 并用 适当 的 方法 给予 解决 ， 使 线程 在 运行 过程 中 按 所 预期 定义 的 目标 进行 。 吕海莲 （ 河南 平顶山 师专 计算机系 　 ） 王巍 （ 河南 平顶山 师专 计算机系 　 ） 参考文献 ［ ］ 王克宏 ． JAVA 语言 编程技术 ． 北京 ： 清华大学出版社 ， ［ ］ 美 KanervaJ ． JAVA 常见 疑难 解 ． 北京 ： 北京大学出版社 ， ［ ］ 美 WalshA ． FronckowiakJ ． JAVA 宝典 ． 北京 ： 北京 电子 工业 出版社 ， ［ ］ 史惠康 ． JAVA 使用 编程技术 ． 北京 ： 中国 水利水电 出版社 ， 收稿 日期 ： － －