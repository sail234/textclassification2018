软件 学报 JOURNALOFSOFTWARE 　 Vol 　 No 　 P 用 XYZE 形式化 体系结构 风格 焦 文品 　 史忠植 摘要 　 该文 用 时序 逻辑 语言 XYZE 刻画 了 若干种 常见 的 体系结构 风格 在 刻画 风格 之前 首先 通过 研究 常见 组件 及 连接 方式 间 的 关系 分析 了 风格 之间 的 关系 然后 通过 对 特定 组件 和 连接 方式 的 组合 产生 了 完整 的 体系结构 风格 的 形式化 描述 关键词 　 软件体系结构 风格 形式化 XYZE 中图法 分类号 　 TPFormalizingArchitecturalStyleswithXYZEJIAOWenpin 　 SHIZhongzhiInstituteofComputingTechnologyTheChineseAcademyofSciencesBeijing 　 Abstract 　 InthispaperatemporallogiclanguageXYZEisusedtoformalizeseveralcommonarchitecturalstylesBeforethestylesdescribedtherelationshipamongthemisanalyzedbasedontherelationshipsamongcomponentsandconnectorsandthenthecompleteformaldescriptionsofthearchitecturalstylesarederivedfromthecompositionsofspecificcomponentsandconnectorsKeywords 　 SoftwarearchitecturestyleformalizationXYZE 　 　 随着 软件系统 规模 的 不断扩大 人们 理解 软件系统 的 角度 千差万别 对系统 的 理解 也 就 很 难 达成 共识 因此 以 形式化 的 方法 来 刻画 软件系统 不仅 能 明确 讲明 系统 的 真实 内涵 也 有助于 设计 和 使用 系统 的 有关 人员 更 准确 地 了解 系统 　 　 体系结构 风格 定义 了 一系列 系统 的 结构 组织 的 模式 ［ ］ 它 是 对 一类 具有 相似 结构 的 系统 的 抽象 体系结构 风格 既 定义 了 组件 及 连接 方式 的 各种 属性 又 规定 了 它们 的 组合 规则 和 限制 ［ ］ 研究 体系结构 风格 不仅 有助于 更 准确 地 把握 具有 特定 风格 的 软件系统 的 各种 特征 以便 设计 人员 能 在 系统结构 级 上 尽早 达成 共识 提高 系统 的 可 重用 性 ， 而且 能 帮助 设计 人员 更 清楚 地 了解 不同 体系结构 风格 间 的 异同 点为 使用 和 组合 不同 风格 的 组件 提供 指导 本文 将 利用 XYZE ［ ］ 对 几种 常见 体系结构 风格 进行 形式化 描述 　 　 XYZE 是 一种 以 线性 时序 逻辑 为 基础 的 形式化 程序设计 语言 它 提供 了 一套 形式化 规范 描述 软件系统 的 手段 在 XYZE 中 ， 所有 程序 单元 语句 、 程序 块 都 是 合式公式 另外 ， 它 还 允许 在 同一 程序 中 包含 下面 两种 命令 格式 ： 其中 LB 为 标号 控制变量 y 和 z 为 具体 的 标号 ＄ O 和 ◇ 分别 表示 时序 逻辑 中 的 “ 下 一次 ” 和 “ 最终 ” 运算符 而 R 和 Q 分别 为 前置 和 后置 断言 式 表示 算法 中 可 执行 的 一步 动作 状态 转换 ， 式 则 为 一次 过程 调用 的 规范 描述 　 　 可见 ， XYZE 既 适合 在 较 低层次 上 描述 具体 的 算法 又 能 在 较 高 的 抽象层次 上 对 程序 块 进行 规范 描述 又 因为 它们 都 是 合式公式 在 用 XYZE 规范 描述 各种 常见 组件 、 连接 方式 及 体系结构 风格 的 同时 还 可以 直接 检验 或 证明 规范 描述 的 一致性 和 正确性 　 　 一种 体系结构 风格 是 由 若干 组件 以 特定 的 连接 方式 组合而成 的 一类 系统 的 抽象 因此 ， 在 用 XYZE 形式化 风格 之前 我们 将 首先 利用 ER 图来 分析 组件 及 连接 方式 之间 的 关系 并 在 此基础 上 进一步 分析 风格 之间 的 关系 然后 根据 这些 关系 从 简到繁 逐步 对 较 原始 的 组件 和 连接 方式 进行 扩充 来 描述 各种 组件 、 连接 方式 最后 通过 对 特定 组件 和 连接 方式 的 组合 来 产生 完整 的 体系结构 风格 的 形式化 描述 相关 工作 　 　 体系结构 风格 为 人们 解决问题 提供 了 一套 简明 的 体系结构 实体 及 限制 的 说明 自从 体系结构 风格 提出 以来 ［ ］ 人们 就 试图 以 形式化 的 方法 来 精确 刻画 各种 体系结构 风格 　 　 在 文献 ［ ］ 中用 Z 表示法 Znotation 刻画 了 两种 风格 pipefilter 和 eventsystem 作者 首先 定义 了 体系结构 的 抽象 语法 接着 详细描述 了 风格 的 语义 模型 最后 又 定义 了 体系结构 的 具体 语法 并 通过 从 抽象 语法 到 语义 域 的 映射函数 提供 了 风格 的 具体 含义 　 　 在 文献 ［ ］ 中 通过 定义 一组 公理 和 推理 规则 将 风格 描述 成 一种 理论 利用 抽象 模式 到 具体 模式 之间 的 名字 映射 和 风格 映射 可以 证明 两种 模式 之间 的 相对 正确性 但 在 该 理论体系 中 揉 进 了 种 不同 的 形式化 方法 　 　 除此之外 众多 体系结构 描述语言 都 在 一定 程度 上 提供 了 某种 形式化 体系结构 风格 的 特定 手段 ［ ］ 但 这些 方法 普遍存在 下列 不足之处 在 研究 体系结构 风格 时 往往 不是 从 同一 角度 出发 如有 的 从 功能 的 角度 有 的 从 数据分布 的 角度 而 有 的 纯粹 是从 其 组件 布局 的 角度 这样 不仅 模糊 了 风格 之间 的 界限 相互之间 存在 交叉 而且 加大 了 以 统一 的 形式化 基础 刻画 各种 风格 的 难度 在 刻画 各种 风格 时 一般 只 规定 了 各种 元素 应 受到 的 限制 而 对于 通过 各种 连接 方式 将 组件 连接起来 之后 所 形成 的 系统 到底 是 什么 没有 清楚 地 描述 出来 风格 间 的 关系 　 　 在 刻画 风格 时 我们 除了 希望 从 简到繁 逐步 扩充 之外 也 希望 能 在 此 过程 中 充分 重用 已 定义 的 信息 因此 ， 在 用 XYZE 形式化 风格 之前 我们 首先 来 讨论一下 风格 之间 的 关系 而 风格 间 的 关系 是 由 组件 及 连接 方式 之间 的 关系 来 体现 的 　 常见 组件 间 的 关系 　 　 在 文献 ［ ］ 中 列出 了 很多 常见 的 组件 如 Computation （ 计算 功能 ） 、 Memory （ 数据 存储 ） 、 Manager （ 管理器 ） 、 Controller （ 控制器 ） 、 Link （ 链接 ） 、 Data （ 数据结构 ） 等 把 上述 组件 看成 实体 用 实体 联系 图 ER 图 可以 将 它们 之间 的 关系 表示 为 图图 中 各 组件 间 除了 具有 连线 所示 的 关系 之外 下层 组件 更为 原始 而 上层 组件 相对 比较 高级 Fig 　 Theentityrelationshipdeagramofcommoncomponents 图 　 常见 组件 间 的 实体 关系 图 　 常见 连接 方式 间 的 关系 　 　 在 文献 ［ ］ 中 列出 了 很多 常见 的 连接 方式 如 ProcedureCall （ 过程 调用 ） 、 DataFlow （ 数据流 ） 、 ImplicitTriggering （ 隐式 触发 ） 、 MessagePassing （ 消息传递 ） 、 SharedData （ 共享 数据 ） 等 把 上述 连接 方式 看作 实体 用 ER 图 可以 将 它们 之间 的 关系 表示 为 图 　 常见 风格 的 构成 成分 　 　 上述 常见 组件 及 连接 方式 的 不同 组合 可以 构成 很多 具有 不同 风格 的 体系结构 如 ： 　 　 ConcurrentProcesses 由 Computation 通过 MessagePassing 方式 组合而成 ； 　 　 PipeFilter 由 Computation 通过 ProcedureCall 方式 组合而成 ； 　 　 ClientServer 由 ComputationManager 通过 ProcedureCall 方式 组合而成 ； 　 　 EventBased 由 Controller 和 响应 事件 的 对象 Manager 通过 ImplicitTriggering 方式 组合而成 ； 　 　 ObjectOrientation 由 Manager 通过 MessagePassing 方式 组合而成 　 　 可以 看出 各种 体系结构 风格 间 的 关系 并 不是 简单 的 层次 关系 在 刻画 风格 时所 重用 的 一般 不是 其他 风格 的 整体 形式 规范 而是 那些 比 构成 该 风格 的 组件 或 连接 方式 更 原始 的 组件 或 连接 方式 的 规范 描述 用 XYZE 形式化 体系结构 风格 　 用 XYZE 描述 常见 组件 　 　 根据 前 文 所示 的 组件 关系 图 我们 在 描述 组件 时 依照 从 低级 到 高级 的 次序 进行 这样 ， 在 描述 较高级 的 组件 时 就 可以 直接 重用 低级 组件 的 描述 信息 　 　 Datastructure ％ Type ［ Struct － NameRecordField － List ］ ， 其中 Struct － Name 为 数据结构 的 名称 其 结构 定义 方式 与 Pascal 语言 中 的 Record 相似 　 　 Computation 　 　 在 XYZE 中 Computation 就是 过程 进程 或 函数 其 定义 为 ％ ProcProc － NameParameters ［ Statements ］ whereConstraint 其中 Proc － Name 为 过程 进程 名 对于 函数 还 需要 定义 返回值 的 类型 Statements 为 实现 该 过程 的 语句 序列 其 形式 如式 或式 　 　 Manager 　 　 在 XYZE 中 与 Manager 相对 应 的 对象 被 定义 成 一个 抽象数据类型 其 定义 为 ％ OOPROGObj － Name ［ DataStructure ； Computations ］ whereConstraint ， 其中 Obj － Name 为 对象 名 　 　 Controller 　 　 虽然 在 XYZE 中 没有 直接 定义 Controller 的 对应 成分 但 XYZE 中 的 进程 能够 通过 通道 channel 获取 环境 的 状态 信息 并 能 根据 所 获得 的 状态 触发 相应 的 进程 即 Controller 相当于 XYZE 中 的 选择 语句 ： 　 用 XYZE 描述 常见 连接 方式 　 　 在 XYZE 中 过程 调用 和 进程 通信 是 最 基本 的 两种 连接 方式 其他 各种 连接 方式 都 是 在 此基础 上 扩展 而来 的 　 　 ProcedureCall 　 　 在 XYZE 中 过程 调用 的 基本 形式 为设 被 调用 的 过程 名为 Callee 其 语义 为 其中 PQ 分别 为 过程 Callee 的 前置 和 后置 断言 　 　 MessagePassing 　 　 此 连接 方式 由 通道 channel 、 消息 发送者 及 接收者 senderreceiver 组成 设 连接 发送者 和 接收者 的 通道 名为 c 则 SenderReceiver 用 XYZE 可定义 如下 ： 那么 MessagePassing 可以 定义 成 Sender 和 Receiver 这 两个 并发 进程 的 组合 ： MessagePassing ‖ ［ SenderReceiver ］ ， 其 形式 语义 为 P → Quw ， Quw 表示 将 Q 中 所有 u 的 自由 出现 都 用 w 代替 ， 　 　 DataFlow 　 　 在 连接 方式 的 ER 图 如图所示 中 已经 指出 ， 数据流 由 存放数据 的 缓冲区 buffer 以及 向 缓冲区 发送 或 读取数据 的 操作 inout 组成 在 XYZE 中 inout 可以 分别 定义 为 假设 Data － Flow 以 先进先出 的 队列 方式 实现 ： 那么 DataFlow 可以 定义 成 in 和 out 这 两个 并发 进程 的 组合 ： Data － Flow ‖ ［ inout ］ 　 　 ImplicitTriggering 　 　 XYZE 是 一种 逻辑 语言 其中 的 各种 成分 都 可以 表示 成 逻辑 公式 因此 事件 event 在 XYZE 中 实质 上 也 是 一个 合式公式 设当 出现 事件 E 时所 触发 的 过程 或 进程 为 Reactor 则 这种 隐式 触发 可以 用 XYZE 定义 为 其 形式 语义 为 　 形式化 体系结构 风格 　 　 通过 组合 特定 的 组件 及 连接 方式 就 可以 得到 体系结构 风格 的 形式 描述 下面 我们 仅 就 几种 常见 风格 的 规范 描述 和 形式 语义 进行 刻画 　 　 ConcurrentProcesses 风格 　 　 设 系统 P 由 n 个 并发 进程 PPPn 组合而成 其中 Pi ｛ Ri ｝ Pi ｛ Qi ｝ 则 系统 定义 为 P ‖ ［ PPPn ］ 其 形式 语义 为 EventBased 风格 　 　 设 系统 S 中 存在 可 识别 的 事件 序列 EEEn 这些 事件 所 驱动 的 对象 有 ObjObjObjm 其中 事件 驱动器 controller 可以 用 XYZE 表示 为 所 驱动 的 对象 中 响应 对应 事件 的 进程 可以 定义 为 则 系统 可定义 为 S ‖ ［ ControllerObjObjObjn ］ 　 　 PipeFilter 风格 　 　 为 简单 起见 设此 风格 由 两个 FilterFF 通过 DataFlow （ 数据流 ） PipeP 连接 而成 其中 Filter 为 具有 MainSubroutine 风格 的 组件 它 由 InputDataProcessOutput 这个 子 过程 组成 整个 PipeFilter 可以 用图 表示 Fig 　 Apipefilterstyle 图 　 PipeFilter 风格 示意图 其中 而 　 　 于是 整个 PipeFilter 可以 定义 为 PipeFilter ‖ ［ FF ］ 　 　 ClientServer 风格 　 　 设 ClientServer 由 组件 ClientServer 组成 其中 若 ClientServer 间 的 连接 方式 为 MessagePassingMP 则 可定义 那么 ClientServer 可定义 为 CS ‖ ［ ClientServer ］ 结束语 　 　 与 其他 文献 ［ ］ 中 所 采用 的 形式化 策略 不同 我们 在 规范 描述 体系结构 风格 时 首先 单独 刻画 了 几种 常见 的 组件 及 连接 方式 这样 只 需 组合 特定 的 组件 和 连接 方式 就 能 得到 新 的 风格 即 在 定义 风格 时 可以 直接 重用 已 定义 好 的 规范 说明 为了 重用 已 描述 的 各种 规范 说明 我们 用 实体 联系 图 ER 图 描述 了 几种 常见 组件 及 连接 方式 间 的 关系 在 此基础 上 分析 了 体系结构 风格 之间 的 关系 我们 发现 由 组件 及 连接 方式 构成 的 体系结构 风格 之间 并 不是 简单 的 平行 关系 也 不是 层次 关系 而是 呈现 复杂 的 网状 关系 所以 要 重用 已有 的 规范 信息 只能 从 重用 组件 及 连接 方式 着手 　 　 根据 风格 间 的 关系 我们 采取 了 逐步 扩展 简单 风格 以 形成 复杂 风格 的 策略 用 时序 逻辑 语言 XYZE 刻画 了 几种 常见 的 体系结构 风格 　 　 我们 在 形式化 体系结构 风格 时 并 不 局限于 仅 给出 组件 、 连接 方式 及 风格 的 静态 属性 而是 要 说明 由 特定 组件 和 连接 方式 构成 的 风格 到底 是 什么 这 一点 正是 其他 形式化 方法 所 忽视 的 或者 是 做 得 不够 的 本文 研究 得到 国家 高科技 项目 基金 NoZT 资助 作者 焦 文品 年生 博士生 主要 研究 领域 为 智能 软件 软件工程 及其 理论 史忠植 年生 研究员 博士生 导师 ， 主要 研究 领域 为 人工智能 智能 软件 本文 通讯联系 人焦 文品 北京 中国科学院计算技术研究所 智能 计算机科学 室 作者 单位 焦 文品 中国科学院计算技术研究所 　 北京 　 史忠植 中国科学院计算技术研究所 　 北京 　 参考文献 ， ShawMGarlanDSoftwarearchitectureperspectivesonanemergingdisciplineNewJerseyPrenticeHallInc ， GarlanDShawMAnintroductiontosoftwarearchitectureInAmbriolaVTortoraGedsAdvancesinSoftwareEngineeringandKnowledgeEngineeringSingaporeWorldScientificPublishingCompany ～ ， TangZhisongAtemporallogiclanguageforsystemimplementationInNigelHRedsSystemsImplementationBerlinChapmanHall ， AbowdGAllenRGarlanDUsingstyletounderstanddescriptionsofsoftwarearchitectureSoftwareEngineeringNotes ～ ， MoriconiMQianXCorrectnessandcompositionofsoftwarearchitecturesACMSIGSOFTSoftwareEngineeringNotes ～ 本文 收到 原稿 收到 修改稿