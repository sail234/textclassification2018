计算机 应用 ComputerApplications 年 第卷 第期 VolNo 基于 事件驱动 状态机 的 多线 语音 应用 程序设计 刘宝旨 　 　 摘 　 要 　 本文 介绍 了 事件驱动 状态机 的 工作 原理 ， 在 此基础 上 ， 给出 了 一种 多线 语音 应用 程序设计 方案 。 　 　 关键词 　 计算机 电话 集成 ， 状态机 ， 多任务 函数 　 　 MULTILINESPEECHAPPLICATIONPROGRAMDESIGNBASEDONTHEEVENTDRIVENSTATEMACHINELiuBaozhiComputerCenterShandongJiningMedicalCollegeShandongJining 　 　 Abstract 　 ThisarticleintroducestheworkprincipleoftheeventdrivenstatemachineBasedonitthisarticlegivesakindofmeansaboutthemultilinespeechapplicationprogramdesign 　 　 Keywords 　 ComputertelephoneintegrateStatemachineMultitaskfunction 　 引言 　 　 进入 九十年代 计算机 声讯 服务 迅速 发展 ， 计算机 电话 集成 （ CTI ） ［ ］ 技术 应运而生 。 在 我国 计算机 声讯 服务 系统 的 研究 分为 两类 ［ ］ ： 一类 是 以 硬件 为主 的 计算机 电话 语音卡 的 开发 和 研制 另一类 是 以 软件 为主 的 高级 开发 平台 及 应用程序 的 研究 。 本文 介绍 的 一种 声讯 服务 系统 的 实现 方法 则 属于 第二类 。 　 状态机 　 　 在 声讯 系统 中 ， 常 采用 有限 状态机 模式 ［ ］ 来 实现 各种 功能 。 状态机 是 一个 事件驱动 的 程序 模型 ， 其 处理 条件 和 相关 动作 的 逻辑 都 被 定义 在 一个 表中 ， 该表 描述 了 应用程序 中 所有 可能 的 处理 状态 及 驱使 应用程序 从 一个 状态 转到 另 一 状态 的 事件 。 　 状态 及其 类型 　 　 状态 是 有限 状态机 在 某 一 时刻 的 状况 ， 它 是 由 状态表 给出 的 。 系统 给出 与 功能 相适应 的 完整 的 状态图 ， 它 与 事件 表 一起 ， 使 系统 得以 运转 。 　 　 在 有限 状态机 中 ， 每 一个 状态 有 两种 过程 ： 一种 CURRENT 状态 过程 ， 准备 状态 正常 工作 的 环境 和 条件 ， 并 将 evtcode 返回 给 主控 函数 ， 完成 状态 转移 等 。 另 一种 NEXT 状态 过程 ， 执行 该 状态 对应 函数 ， 实现 语音 处理 功能 ， 并 将 errcode 返回 给 主控 函数 。 其 形式化 描述 如下 ： 　 　 structstateintprocess 状态 处理器 函数 、 状态 转移 intnext 完成 初始化 （ RWB 重新 赋值 ） 、 基本 语音 操作 处理 　 　 状态 类型 分为 语音 处理 状态 比如 放音 、 录音 、 访问 数据库 等 、 信令 状态 对应 系统 处于 收发 信令 的 状态 ， 如 摘机 、 挂机 等 及其 它 状态 如 空闲 状态 。 　 　 用户 可 根据 应用 系统 功能 的 扩展 随时 向 有限 自动 状态机 增加 状态 ， 如 ： 语音信箱 、 传真 信箱 、 设置 密码 访问 权限 等 。 　 事件 及其 类型 　 　 事件 是 系统 的 外部 输入 信号 或 内部 驱动 信号 。 事件 类型 有 ： 　 　 自然 事件 ： 系统 运行 中 自然 发生 的 事件 。 例如 ， 语音 播放 结束 ， 摘机 挂机 完成 等 引起 的 事件 。 　 　 程序 事件 ： 描述 程序执行 过程 中 执行 结束 返回 的 状态 ， 以利于 系统 进行 异常 处理 、 状态 跳转 等 功能 。 例如 ： 有效 无效 的 访问 ， 关键码 达到 最大 录音 时间 等 。 　 　 中断 事件 ： 键盘 中断 事件 、 通信 设备 中断 事件 等 。 　 　 用户 自定义 事件 ： 用户 根据 需要 自己 定义 的 事件 。 可 由 函数 putevt 将 用户 自定义 事件 加入 到 事件队列 中来 完成 。 　 　 　 多线 语音 应用 程序设计 原理 　 事件队列 、 事件 表 　 　 事件队列 用来 识别 和 响应 同时 在 多个 通道 上 发生 的 行为 。 它 就 象 一个 管道 多个 来源 的 事件 流 进 同一 管道 。 事件队列 为 每 一个 事件 提供 一个 独特 的 位置 ， 同时 还 保存 最近 发生 事件 的 历史记录 ， 从而 允许 应用 程序处理 同时 发生 在 多个 通道 上 的 事件 。 　 　 事件队列 的 操作 基于 FIFO 。 当 应用程序 使用 gtevtblk 函数 从 事件队列 中读 一个 事件 时 ， 最早 的 事件 从 事件队列 中 移出 并且 被 置入 事件 块 EVTBLK 。 EVTBLK 是 一个 数据结构 ， 它 用来 保存 一个 来自 于 事件队列 的 事件 。 　 　 事件队列 记录 了 来自 于 驱动程序 的 事件 。 应用程序 通过 设备 类型 、 板 号 、 事件 发生 的 通道 号 来 识别 事件 ， 并 通过 调用 gtevtblk 函数 以及 时 的 方式 连续 地 服务 于 事件队列 。 快速 地 处理事件 以便 应用程序 对 用户 的 输入 保持 响应 是 很 重要 的 。 　 　 事件 表 给出 了 系统 可能 发生 的 各种 事件 ， 从而 保证 了 整个 状态机 正常 、 连续 、 稳定 地 运行 。 　 状态 转移 表 　 　 状态 的 转移 是 由 相关 事件驱动 的 。 在 状态 转移 表中 ， 每 一个 状态 都 规定 了 其 基于 的 事件 发生 后 状态机 转向 的 另 一个 状态 ， 如果 发生 的 事件 与 第一 状态 不 存在 逻辑关系 ， 状态 转移 表 的 下 一个 状态 将 统一 被 看作 一 固定 的 错误 状态 来 处理 。 状态 转移 表 举例 如下 ： 　 　 currentstate 　 　 　 　 event 　 　 　 　 　 　 　 　 nextstate 　 　 PlayMessage 　 　 　 RingsReceived 　 　 　 　 　 Error 　 　 　 　 　 　 　 　 　 　 OffhookCompleted 　 　 　 Error 　 　 　 　 　 　 　 　 　 　 LineDisconnect 　 　 　 　 　 GoOnhook 　 　 　 　 　 　 　 　 　 　 EndofFileonPlay 　 　 　 　 LineIdle 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 多任务 函数 　 　 多任务 函数 及其 实现 多线 语音 应用程序 能 同时 在 多通道 上 执行 任务 ， 其 执行 并发 操作 的 能力 是 由 语音 软件 的 多任务 函数 实现 的 。 当 多任务 函数 被 调用 时 ， 他会 返回 控制权 给 程序 以便 在 从 执行 函数 到 完成 的 这 段时间 里 ， 应用程序 能 同时 执行 其它 操作 ， 比如 ， 开始 执行 一个 其它 通道 的 函数 。 多任务 函数 一般 在 通道 级 上 执行 ， 比如 自动 拨号 、 语音 播放 等 ， 它 不 影响 系统 中 的 其它 通道 。 　 　 多数 多任务 函数 在 通道 上 执行 耗时 较长 的 输入输出 操作 ， 这 正是 语音 软件 将 控制权 返回 给 调用 程序执行 其它 操作 的 原因 。 然而 ， 当 控制权 返回 给 应用程序 时 ， 应用程序 必须 阻止 另 一个 函数 在 同一个 正在 执行 操作 的 通道 上 操作 。 　 　 多任务 函数 具有 以下 特点 ： 当 一个 多任务 函数 在 一个 通道 上 操作 时 ， 通道 忙 ； 当 没有 多任务 函数 在 通道 上 操作 时 ， 通道 闲 。 如果 你 试图 在 忙 通道 上 执行 一个 多任务 函数 将 发生 E — MTACT 错误 。 一旦 当前 多任务 函数 结束 ， 你 才 可以 在 这个 通道 上 执行 下 一个 多任务 函数 。 　 　 识别 和 响应 多任务 函数 ： 多线 语音 应用程序 能够 响应 同时 发生 在 多个 通道 上 的 行为 。 通道 代表 一串 事件 ， 它 允许 应用程序 识别 和 响应 通道 上 发生 的 特殊 事件 。 事件 提供 关于 函数 的 进展 和 完成 的 反馈 ， 指明 其它 通道 行为 的 发生 。 一般 情况 下 ， 事件 常 被 称为 结束 事件 ， 因为 大部分 事件 表示 操作 结束 。 　 　 总之 ， 多任务 函数 实现 了 多 进程 处理 。 多任务 操作 一旦 在 软件 中 发出 一道 指令 ， 该 任务 立即 提交 给 语音卡 ， 由 其 在 后台 完成 该 任务 ， 同时 ， 程序 控制权 已 转回 应用软件 的 下 一 语句 。 简单 地说 ， 就是 将 播放 这样 耗时 长 的 操作 放在 后台 ， 由 语音卡 完成 。 而 前台 仅仅 完成 界面 输入 、 多任务 函数 的 调用 以及 一些 必须 独占 CPU 但 耗时 极短 的 单任务 的 执行 。 　 状态机 逻辑 流程图 　 　 状态机 逻辑 流程图 是 状态 转移 表 的 图形 表示 ， 一般 地 它 分为 事件驱动 、 当前 状态 和 下 一个 状态 三大 处理 模块 。 图示 如下 　 　 图 　 　 在 系统 中 ， 每 一个 通道 定义 一个 状态机 。 大多数 情况 下 ， 所有 的 通道 将 有 同样 的 状态 逻辑 ， 并且 所有 的 通道 可以 复制 一样 的 状态机 结构 。 应用程序 使用 状态机 来 管理 每 一个 通道 的 程序 流 。 　 　 实际 执行 的 程序 流 主要 由表中 的 数据 而 不是 程序 的 逻辑 决定 的 ， 这 反映 了 事件驱动 的 原理 。 　 　 通道 状态机 的 建立 步骤 ： 　 　 为 每 一个 通道 列出 所有 可能 的 状态 ； 　 　 列出 所有 可能 的 改变 通道 状态 的 事件 ； 　 　 创建 一个 状态 转换 表 ， 该表为 每 一个 状态 定义 了 基于 当前 发生 的 事件 的 下 一个 状态 ； 　 　 利用 状态 转换 表 ， 设计 处理事件 的 程序流程 。 　 状态机 的 扩充性 　 　 事件驱动 的 状态机 具有 良好 的 开放性 根据 用户 的 要求 可 对 其 增加 相应 的 状态 以 完成 功能 扩展 。 对于 增加 的 某个 状态 应 根据 状态机 的 事件 将 其 加入 状态 转移 表中 ， 其 具体 状态 处理 仍然 要 分为 当前 状态 和 下 一个 状态 并 给出 对应状态 的 状态 出口 处理 。 以 密码 设置 为例 介绍 状态 增加 后 的 转移 流程图 如下 ： 　 　 状态 处理 描述 ： curent — state 　 　 　 　 　 　 next — stateST — OFFHK ： 　 ReturnST — promtST — promt 　 　 　 　 　 　 ST — promt 　 ReturnST — digits 　 　 　 Play 提示 输入 密码 ST — promt 　 　 　 　 　 　 ST — promt 　 ReturnST — digits 　 　 　 Play 提示 再 输入 一遍 密码 ， 确认 ； ST — promt 　 　 　 　 　 　 ST — promt 　 　 　 　 　 　 　 　 　 　 　 　 Play 提示 密码 设置 完毕 ； ST — digits 　 　 　 　 　 　 ST — digits 　 ReturnST — promt 　 　 　 输入 密码 ST — digits 　 　 　 　 　 　 ST — digits 　 比较 判断 ： 　 比较 正确 ReturnST — prompt 　 　 　 　 　 　 输入 确认 密码 　 比较 不 正确 ReturnST — prompt 　 执行 流程 如下 ： 　 　 　 　 　 　 　 ST — prompt ［ C ］ ST — prompt ［ N ］ 　 　 　 　 　 　 　 ST — prompt ［ C ］ ST — digits ［ N ］ 　 　 　 　 　 　 　 ST — digits ［ C ］ ST — prompt ［ N ］ 　 　 　 　 　 　 　 ST — prompt ［ C ］ ST — digits ［ N ］ 　 　 　 　 　 　 　 ST — digits ［ C ］ ST — prompt ［ N ］ 　 　 　 　 　 　 　 ST — prompt ［ N ］ 　 　 　 结束语 　 　 利用 上述 设计 方法 我们 开发 出 一个 综合性 的 医疗 信息 声讯 系统 ， 该 系统 除了 具备 一般 的 声音 录制 和 回放 功能 外 ， 利用 状态机 的 扩充性 ， 通过 增加 状态 ， 使 用户 可以 通过 电话 访问 文本 信息 ， 通过 电话 查询数据库 等 。 如果 接入 互联网 ， 经过 适当 的 改进 ， 可以 实现 电话 访问 电子邮件 的 功能 。 　 　 刘宝旨 　 讲师 ， 硕士 。 研究 方向 ： 计算机网络 、 多媒体技术 。 　 　 作者 单位 ： 刘宝旨 （ 山东 济宁 医学院 计算机 中心 　 山东 ． 济宁 ） 参考文献 ［ ］ 　 王晶 如 等 计算机 电话 综合 系统 的 构成 与 应用 现代 电信 科技 ； ［ ］ 　 张 延平 电话 语音 系统 的 集成 和 设计 世界 电信 ， ； ［ ］ 　 VoicesoftwarereferenceforMSDOSDialogicCorporation 　 　 收稿 日期 修改稿