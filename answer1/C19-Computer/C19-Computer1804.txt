微型机 与 应用 MICROCOMPUTERITSAPPLICATIONS 　 No 　 No 　 P 用 VB 的 定时器 控件 产生 精确 的 定时 董静薇 　 李欣 摘要 ： 分析 Timer 控件 的 个 重要 属性 及用 Timer 控件 产生 定时器 事件 的 定时 精度 ， 根据 应用程序 对 定时 的 要求 提出 种用 Timer 控件 产生 精确 定时 的 方法 。 关键词 ： Timer 控件 定时 精度 时间 校准 　 　 在 工业 控制 中有 许多 需要 定时 完成 的 操作 ， 如 ： 定时 显示 当前 时间 ， 定时 刷新 屏幕 上 的 进度条 ， 上位 机 定时 向下 位机 发送 命令 和 传送数据 等 。 VisualBasic 语言 提供 了 定时器 控件 Timer 来 完成 定时 中断 的 功能 ， 对 其 编程 后 可 在 一定 的 时间 间隔 执行 某些 操作 。 但 由 Timer 控件 的 Interval 属性 （ 定时 间隔 属性 ） 确定 的 定时 时间 精度 很 低 ， 不 超过 ／ s ， 这 对于 很多 要求 精确 定时 的 控制系统 来说 是 远远不够 的 。 本文 在 详细 讨论 Timer 控件 的 特点 与 局限性 之后 ， 针对 不同 情况 下 精确 定时 的 要求 ， 提出 种用 Timer 控件 产生 精确 定时 的 方法 。 VisualBasic 的 Timer 控件 　 　 Timer 控件 响应 时间 的 流逝 ， 它 独立 于 用户 ， 在 相等 的 时间 间隔 不断 接受 定时器 事件 ， 产生 定时器 中断 。 每个 Timer 控件 必须 要 与 窗体 关联 ， 因此 要 创建 定时器 应用程序 就 必须 至少 创建 个 窗体 ， 此 窗体 若 不 需要 完成 其它 操作 ， 就 可以 使 窗体 不 可见 。 Timer 控件 在 设计 时 出现 在 窗体 上 ， 所以 可以 选定 这个 控件 ， 查看 属性 ， 编写 事件 过程 。 在 程序运行 时 定时器 控件 不 可见 ， 所以 其 位置 和 大小 无关紧要 。 Timer 控件 有个 与 定时 功能 有关 的 重要 属性 。 Enabled 属性 　 　 定时器 的 Enabled 属性 不同于 其它 对象 的 Enabled 属性 。 对于 大多数 对象 ， Enabled 属性 决定 对象 是否 响应 用户 触发 的 事件 ； 对于 Timer 控件 ， 将 Enabled 属性 设为 True 和 False 时会 启动 和 停止 定时器 操作 。 在 定时器 已经 启动 的 情况 下 改变 定时 间隔 属性 后 ， 再次 将 Enabled 属性 设为 True 则 会 停止 现 定时 过程 ， 立即 重新 以新 的 设置 开始 定时 。 Interval 属性 　 　 Interval 属性 指定 定时 间隔 ， 即 每次 产生 定时器 事件 之间 的 毫秒 数 。 间隔 的 长度 取决于 定时 要求 ， 因为 存在 某些 内部 错误 的 可能性 ， 常将 间隔 设 为 定时 的 一半 。 它 的 取值 在 ～ ， 之间 （ 包括 这个 数值 ） ， 即用 Timer 控件 产生 的 最长 定时 时间 约 为 s 。 若 设置 Interval 属性 为 ， 则 相当于 关闭 定时器 。 如果 应用程序 正在 进行 对系统 要求 很 高 的 操作 ， 例如 长 循环 高强度 的 运算 或 正在 访问 驱动器 、 网络 或 端口 ， 则 应用程序 定时器 事件 的 间隔 可能 比 Interval 属性 指定 的 间隔 长 。 　 　 由于 系统 每秒 生成 个 时钟 信号 ， 所以 即使 Interval 属性 的 单位 是 ms ， 定时 间隔 的 实际 精度 也 不会 超过 s 。 可见 ， 用 Interval 属性 设置 的 时间 间隔 不 准确 ， 每次 产生 定时器 事件间隔 最大 误差 能 达到 ms ， 其 累积 误差 将会 急剧 增大 。 经 实验 发现 ， 设置 个 Timer 控件 的 Interval 属性 为 ms ， 每 产生 次 定时器 事件 ， 将 秒 计数 单元 加 作为 累计 的 时间 ， 同时 读取 系统 时钟 ， 即 实际 时间 ， 则 程序运行 min 后此 累计 时间 比 实际 时间 要慢 大约 min 。 将 Interval 属性 减小 ， 直至 ms 时 ， 实验 结果 毫无 变化 。 再设 Interval 属性 为 ms 时 累计 时间 又 比 实际 时间 偏快 。 而且 随着 程序运行 时间 的 增加 ， 其 误差 也 越来越 大 。 可见 ， 要 确保 时间 准确 ， 应 在 需要 时 检查 系统 时钟 ， 而 不能 在 内部 追踪 积聚 的 时间 。 要 使用 Timer 控件 在 精确 的 时间 间隔 内 执行 某些 操作 或 累计 较长 的 时间 ， 则 必须 对 Timer 控件 的 定时 进行 校准 。 时间 校准 方法 　 　 根据 应用程序 所 需要 的 精确 定时 的 不同 情况 ， 下面 以 产生 s 的 精确 时间 为例 介绍 种 时间 校准 的 方法 。 查询 等待 法 　 　 要 产生 s 的 定时 ， 可 将 s 分成 个 部分 ， 每 段长度 为 ms 。 当 程序 在 每秒钟 的 结尾 部分 （ ms ～ s ） 无 其它 操作 时 ， 可用 循环 等待 的 办法 使 时间 在 每秒 的 末尾 对齐 。 设 Timer 控件 的 Interval 属性 为 ms ， 则 在 产生 次 定时器 事件 后 （ 此时 实际 时间 已 大于 ms ） ， 不再 等待 第 次 定时器 事件 ， 而是 反复 查询 当前 系统 时钟 。 当 系统 时钟 的 秒数 加后 ， 即 表示 下 s 开始 ， 此时 重新启动 定时器 控件 ， 使 它 开始 新一轮 的 定时 。 这种 方法 的 优点 是 简单明了 ， 且 每秒 都 非常 准确 。 需要 指出 的 是 ， 用 这种 方法 校准 时 在 第一次 启动 Timer 控件 前 也 要 反复 查询 系统 时钟 ， 使 它 在 某 秒 刚 开始 时 立即 启动 。 　 　 在 程序 中 ， t 表示 用 Timer 控件 定时 累加 并 校准 后 的 秒 值 。 程序运行 后 ， 可 在 窗口 中 显示 系统 时钟 和 用 Timer 控件 定时 累加 产生 的 时钟 ， 可以 看出 二者 是 完全 同步 的 。 　 　 程序 ： 　 　 Dimt ， t ， t ， tAsInteger 　 　 PrivateSubFormLoad （ ） 　 　 DimttAsString 　 　 t ＝ 　 　 t ＝ 　 　 Timer ． Interval ＝ 　 　 Timer ． Enabled ＝ False 　 　 tt ＝ Time ′ 读取 当前 时间 　 　 tt ＝ Mid （ tt ， ， ） 　 　 t ＝ CInt （ tt ） 　 　 　 　 ′ 读出 秒值 　 　 　 Do 　 　 　 　 tt ＝ Time 　 　 　 　 tt ＝ Mid （ tt ， ， ） 　 　 　 　 t ＝ CInt （ tt ） 　 　 LoopUntilt ＝ （ t ＋ ） Mod 　 　 Timer ． Enabled ＝ True 　 　 　 　 ′ 启动 定时器 控件 　 　 t ＝ t 　 　 EndSub 　 　 PrivateSubTimerTimer （ ） 　 　 DimtAsInteger 　 　 t ＝ t ＋ 　 　 Ift ＝ Then 　 　 　 Do 　 　 　 　 tt ＝ Time 　 　 　 　 tt ＝ Mid （ tt ， ， ） 　 　 　 　 t ＝ CInt （ tt ） 　 　 LoopUntilt ＝ （ t ＋ ） Mod 　 　 　 　 t ＝ t 　 　 　 　 Timer ． Enabled ＝ True 　 　 　 　 ′ 重新启动 定时器 控件 　 　 　 　 t ＝ 　 　 　 　 t ＝ t ＋ 　 　 　 　 ′ 秒加 　 　 　 　 Ift ＝ Then 　 　 　 　 　 　 t ＝ 　 　 　 　 　 　 t ＝ t ＋ 　 　 　 　 ′ 分加 　 　 　 　 EndIf 　 　 　 　 Form ． Label ． Caption ＝ CStr （ t ） ＆ “ ： ” 　 　 　 　 Form ． Label ． Caption ＝ CStr （ t ） 　 　 　 　 Form ． Label ． Caption ＝ Time 　 　 　 　 ′ 显示 系统 时钟 　 　 EndIf 　 　 EndSub 动态 校正 法 　 　 当 应用程序 在 每秒钟 的 各个 阶段 （ 每 ms ） 都 有 特定 的 操作 而 不能 使用 上述 的 查询 等待 方法 校准 时 ， 可以 采用 更加 灵活 的 动态 校正 法 。 经上述 实验 可知 ： 次 ms 定时 比 实际 s 的 时间 要长 ， 而次 ms 定时 比 实际 s 时间 要 短 。 那么 可以 在 每 产生 次 定时器 事件 时读 一次 系统 时钟 ， 得到 当前 的 秒 值 ， 再 与 累加 计数 得到 的 秒 值 比较 。 若 累加 值 偏小则 表明 累加 时间 慢 了 ， 将 Timer 控件 的 Interval 属性 设为 ms ， 重新启动 定时器 ； 若 累加 值 偏大 ， 则 恢复 Interval 属性 为 ms 。 　 　 这种 方法 的 特点 是 ： 不是 每秒钟 都 十分 精确 ， 但 却 消除 了 累积 的 时间误差 ， 无论 程序运行 多少 时间 定时 误差 均 为 正负 s 。 与 第一种 方法 比较 ， 动态 校正 法 的 优点 是 没有 循环 等待 的 时间 ， 从而 不 占用 系统 更 多 的 资源 。 　 　 在 程序 中 ， TimerCount 为 定时 ms 计数器 ， 取值 范围 ～ 。 Clock 为 秒 的 累加 值 ， 取值 范围 为 ～ 。 程序 ： DimTimerCountAsIntegerDimClockAsIntegerPrivateSubFormLoad （ ） Form ． Timer ． Interval ＝ 　 　 ′ 先 设定 时 时间 间隔 为 msTimerCount ＝ 　 　 　 　 ′ 定时 ms 计数器 清零 Clock ＝ CInt （ Mid （ Time ， ， ） ） 　 　 　 ′ 取 当前 时间 的 秒 值 Form ． Timer ． Enabled ＝ True 　 　 　 ′ 启动 定时器 控件 EndSubPrivateSubTimerTimer （ ） DimClickAsIntegerTimerCount ＝ TimerCount ＋ 　 　 　 　 ′ 定时 ms 计数器 加 IfTimerCount ＝ Then 　 　 　 　 　 ′ 定时 s 时间 到 　 　 Clock ＝ CInt （ Mid （ Time ， ， ） ） 　 　 ′ 取 当前 时间 的 秒 值 　 　 Clock ＝ （ Clock ＋ ） Mod 　 　 ′ 定时 累加 得到 的 秒 值 　 　 IfClock ＞ AndClock ＞ Then 　 　 ′ 为 防止 加 　 　 　 　 ′ 跳变 到 时 出现 错误 ， 秒值 为 和 时 不 做 处理 　 　 　 　 IfClock ＞ （ Clock ＋ ） ModThen 　 　 　 　 　 　 Form ． Timer ． Interval ＝ 　 　 　 ′ 累加 值 偏 小 ， 缩短 定时 时间 间隔 　 　 　 　 　 　 Form ． Timer ． Enabled ＝ True 　 　 　 ′ 重新启动 定时器 控件 　 　 　 　 Else 　 　 　 　 　 　 IfClock ＞ （ Clock ＋ ） ModThen 　 　 　 　 　 　 　 Form ． Timer ． Interval ＝ 　 　 ′ 累加 值 偏大 ， 增大 定时 时间 间隔 　 　 　 　 　 　 　 Form ． Timer ． Enabled ＝ True 　 　 ′ 重新启动 定时器 控件 　 　 　 　 　 　 EndIf 　 　 　 　 EndIf 　 　 EndIf 　 　 TimerCount ＝ 　 　 ′ 定时 ms 计数器 清零 EndIfEndSub 　 　 程序运行 后 ， Click 是 经过 动态 校正 的 秒 值 ， 可以 用 它 在 内部 追踪 累积 时间 或 用来 执行 一些 需要 与 下位 机 同步进行 的 操作 。 董静薇 （ 哈尔滨理工大学 西区 信箱 ） 李欣 （ 哈尔滨理工大学 西区 信箱 ） 参考文献 ， MokelvyM ， MartinsenR ． VisualBasic 开发 使用手册 ． 北京 ： 机械 工业 出版社 ， 收稿 日期 ： － －