软件 学报 JOURNALOFSOFTWARE 年 第卷 第期 VolNo 一种 分布 对象 的 并行程序 设计 框架 王 　 晨 　 周颖 　 张德富 摘 　 要 　 计算 性能 和 合成 性能 对于 基于 工作站 网 的 软件 十分 重要 但 由于 缺乏 相应 的 开发 环境 现在 这 类 软件 在 这 两 方面 还 做 得 很 不够 尤其 是 合成 性能 十分 薄弱 该文 提出 并 实现 了 一种 基于 分布 对象 的 并行程序 设计 框架 力图 使 分布 对象 能 提供 高性能 的 并行计算 服务 同时 也 使 并行算法 获得 一种 良好 的 封装 和 复用 机制 经过 一些 并行算法 的 测试 ， 表明 该 框架 具有 实用价值 关键词 　 分布 对象 并行程序 设计 工作站 网 框架 中图法 分类号 　 TPADistributedObjectBasedFrameworkforParallelProgrammingWANGChenZHOUYingZHANGDefuStateKeyLaboratoryforNovelSoftwareTechnologyNanjingUniversityNanjingDepartmentofComputerScienceandTechnologyNanjingUniversityNanjingAbstract 　 ThecomputationalandcompositionalfeaturesareveryimportantintheconstructionofsoftwarefortheworkstationclustersHoweverduetothelackofsuitablesupportingenvironmentofsoftwaredevelopmentmostexistingdistributedparallelsoftwaresystemsareweakinthesetwoaspectsespeciallyinthecompositionalfeatureInthispaperadistributedobjectbasedframeworkforparallelprogrammingisproposedThegoalsoftheframeworkarefirstgettinghighparallelcomputingefficiencysecondconstructingamechanismtoencapsulateandreuseparallelprogramTheframeworkistestedbysomeparallelalgorithmstheresultsindicatethattheframeworkishelpfulKeywords 　 Distributedobjectparallelprogrammingworkstationclustersframework 　 　 目前 越来越 多 的 分布 并行 软件系统 将 它们 的 平台 确定 在 异构 型 工作站 网 （ workstationclusters ） 之上 为 这种 环境 提供 的 计算 模式 也 正在 从 RPC （ remoteprocedurecall ） 向 CORBAcommonobjectrequestbrokerarchitecture ［ ］ 演化 其 总 的 趋势 在于 ［ ］ 第一 增强 网络 互操作性 （ interoperability ） 第二 增强 软件 的 可 合成 性 （ compositional ） 但 对于 试图 充分利用 工作站 网上 的 处理 资源 进行 并行计算 而言 这种 演进 却 没有 带来 实质性 的 帮助 原因 有 两个 方面 一是 缺乏 对 并行计算 模型 的 支撑 使 并行程序 的 编写 依然 是 件 烦琐 而 低效 的 事情 二是 实现 效率 不高 缺乏 对 高速 网络 程序接口 的 支持 分布 对象 由于 地理位置 的 分散 而 拥有 自己 的 处理 资源 也 因此 具有 潜在 的 并行 能力 在 分布 对象 系统 中 提供 并行计算 服务 也 是 一种 自然 的 要求 　 　 近年 出现 的 MPIPVMExpress 等 基于 messagepassing 的 工作站 网络 并行计算 环境 更 增加 了 人们 对于 在 这种 平台 上 进行 并行计算 的 需求 但 这 几种 并行计算 环境 提供 给 程序员 的 基本上 都 是 一个 消息传递 库 需要 程序员 自己 去 匹配 进程 （ 或 线程 ） 之间 的 通信 这样 做 的 缺点 在于 如同 用 汇编语言 写 串行 程序 一样 并行程序 的 书写 较为 困难 代码 难于 控制软件 难以 进行 复用 　 　 基于 这种 原因 我们 提出 一种 分布 对象 的 并行程序 设计 框架 DOPPF （ distributedobjectsparallelprogrammingframework ） 尝试 解决 以上 问题 并 保持 分布 对象 的 可 复用 特性 分布 对象 的 并行性 分析 　 　 传统 的 对象 计算 模式 由 一串 调用 链 组成 除了 初始化 对象 外 其他 对象 的 激活 都 通过 另 一个 对象 调用 它 的 公共 方法 来 实现 可以 说 它们 的 方法 调用 是 遵循 一种 invokebyotherobject 的 方式 被 调用者 称为 supplier 对象 调用者 称做 被 调用者 的 客户 （ client ） 在 分布式 环境 中 这种 对象 调用 方式 由 RPC 演变成 远程 方法 调用 RMI （ remotemethodinvocation ） ［ ］ 但 分布 对象 关注 的 只是 激活 远程 对象 并 获取 服务 因此 RMI 也 如 RPC 一样 没有 利用 本身 的 潜在 并行性 client 总是 不管 调用 点 以下 的 代码 是否 与 调用 的 结果 相关 而 阻塞 直到 supplier 的 调用 方法 执行 完 我们 称 这种 方式 为 同步 远程 方法 调用 它 的 作用 有 两个 方面 一是 实现 分布 对象 调用 的 位置 透明性 二是 使 client 与 supplier 保持 一定 的 同步 关系 　 　 为了 获得 并行 效率 ， 我们 显然 还 需要 有 使 client 和 supplier 能够 并行执行 的 异步 调用 方式 这 需要 处理 以下 几 方面 的 问题 　 　 使 supplier 能够 同时 处理 多个 请求 并 在 某些 时候 能 将 这些 请求 的 处理 分布 到 另外 的 空闲 工作站 上 称为 对象 内 的 并行 　 　 对于 某些 需要 在 几个 请求 之间 保持 supplier 的 状态 的 client 而言 supplier 还 需要 具有 向 client 提供 原子 操作 的 事务处理 （ transaction ） 的 机制 这是 CORBA 这类 框架 中 具有 的 服务 　 　 使 client 在 远程 方法 调用 后 可以 继续执行 直到 需要 这次 调用 的 结果 称为 对象 间 并行 　 　 supplier 由于 容纳 了 多个 线程 的 执行 自身 状态 是 不 稳定 的 也就是说 其 属性 可以 被 多个 线程 所 改变 其中 有些 改变 不是 某些 client 所 导致 的 ， 但 却是 它们 所 需要 了解 的 这 需要 supplier 和 client 间 的 一种 异步 通信 方式 在 分布 对象 中 被 称为 事件 服务 （ eventservice ） 但 其 实现 效率 并 不能 满足 并行计算 的 需要 　 　 作为 一种 标准 CORBA 制定 了 分布 环境 中 软件 构件 的 通用 接口 形式 但 要 使 这种 标准 广为 接受 就 应当 使 之 适应 尽量 多 的 应用领域 我们 提出 的 DOPPF 表明 并行计算 是 属于 这些 领域 的 参照 CORBA 这个 框架 更 强调 对 并行计算 方式 的 支持 和 框架 本身 的 实现 效率 接口定义 语言 中 对 主动性 继承 的 多种手段 并 以此 作为 实现 对象 内 并行 的 一种 方式 分布 对象 的 并行程序 设计 框架结构 　 　 OOframwork 是 一个 类 的 集合 由 这些 类 合作 可 解决 某一 问题 或 提供 某种 能力 复用 一个 framework 意味着 继承 它 的 类 并 通过 重载 其中 的 方法 来 精化 这些 类有 两种 方式 的 OOframework ［ ］ calledframework 和 callingframework 我们 的 DOPPF 包含 了 这 两种 方式 一个 简化 的 用户 视图 如图所示 图 　 DOPPF 视图 　 　 DOPPF 由 客户 方 和 服务 方 （ 分布 对象 的 实现 ） 两 部分 组成 其下 是 运行 时刻 支撑 环境 主要 提供 消息 传输 用于 分布 对象 定位 的 名 服务 等 接口 客户 方 包括 客户 应用 和 若干个 主动 对象 的 Stub 采用 calledframework 的 形式 客户 应用 实例 化由 DOPPF 生成 的 Stub 类 就 可以 创建 其实 例 并 通过 通常 的 方法 调用 享受 位于 不同 地址 空间 的 supplier 对象 提供 的 服务 而 服务 方 实际上 就是 一个 完整 的 supplier 对象 采用 callingframework 的 形式 主要 体现 在 两个 方面 一方面 DOPPF 生成 的 控制线 程在 运行 时 根据 客户 和 请求 调用 程序员 实现 的 supplier 对象 的 功能 另一方面 对于 supplier 对象 自身 状态 不 稳定 的 情况 其中 的 事件 服务 机制 也 采用 callingframework 的 形式 这 是因为 事件 服务 的 大部分 功能 和 总体 框架 均 由 Eventservice 类 定义 实现 程序员 需要 做 的 只是 实现 具体 的 事件 调度 方法 由该 框架 管理 事件 服务 的 方方面面 的 工作 　 　 图中 的 Stub 是 supplier 对象 在 客户 方 的 映象 Stub 类 实际上 是 一个 经过 改造 的 supplier 类 它 和 supplier 的 类 定义 大致 相当 有 相同 的 名字 、 相同 的 public 方法 和 public 变量 只是 内部 实现 完全 不 一样 调用 其中 的 方法 就 相当于 向 远程 supplier 对象 请求 执行 相应 的 方法 stub 保证 了 分布 对象 的 位置 透明性 　 　 图中 的 Notify 消息 是 在 使用 事件 服务 时 ， supplier 对象 向 client 发送 的 异步 信息 它 也 需要 通过 底层 通信 环境 传递 给 相应 的 Stub 将 它 单独 表示 是 为了 和 一般 方法 调用 中 的 返回 消息 区分 出来 ， 因为 这一 消息 并 不 通过 ControlThreadStub 通道 来 传递 　 　 DOPPF 对 程序员 达到 了 很 高 程度 的 透明性 不论 supplier 是 远程 对象 还是 本地 对象 客户程序 对 它 的 使用 方式 都 是 一样 的 消息传递 中 的 数据 打包 （ marshal ） 、 解包 （ unmarshal ） 以及 目标 对象 定位 等 问题 都 由 DOPPF 生成 的 代码 自动 完成 而 描述 分布 对象 的 IDL （ interfacedefinitionlanguage ） 语法 也 十分 简单 接口定义 语言 （ IDL ） 　 　 DOPPF 提供 的 IDL 主要 是 对 C 类 定义 的 扩充 使 其能 描述 分布 对象 的 动态 特征 另外 在 对象 声明 中 也 扩充 了 其 主动 和 被动 属性 的 转换 修饰 在 类 定义 时 指定 其实 例 是否 为 主动 对象 而类 实现 以及 客户 应用 部分 不需 任何 改动 扩充 语法 如下 其中 DOPPF 的 新增 关键字 加黑 表示 与 C 语法 相同 的 部分 略去 　 　 〈 classdefinition 〉 ∷ ［ Active ］ class 〈 classname 〉 ［ 〈 inheritancelist 〉 ］ 　 　 　 〈 classbody 〉 　 　 〈 inheritancelist 〉 ∷ ‘ ’ 〈 inheritancesegment 〉 ｜ 〈 inheritancelist 〉 〈 inheritancesegment 〉 　 　 〈 inheritancesegment 〉 ∷ ［ 〈 accessspecifier 〉 ］ 〈 classname 〉 ［ 〈 activespecifier 〉 ］ 　 　 〈 accessspecifier 〉 ∷ public ｜ private ｜ protected ｜ callback 　 　 〈 activespecifier 〉 ∷ actively ｜ passively ｜ 〈 partspecifier 〉 　 　 〈 partspecifier 〉 ∷ ［ 〈 activemethod 〉 ］ ［ 〈 activevariable 〉 ］ 　 　 〈 activemethod 〉 ∷ ‘ ［ ’ makeactivemethod ‘ ’ 〈 methoddeclarelist 〉 ‘ ］ ’ 　 　 〈 activevariable 〉 ∷ ‘ ［ ’ makeactivevariable ‘ ’ 〈 variabledeclarelist 〉 ‘ ］ ’ 　 　 由 Activeclass 模板 实例 化 的 对象 默认 为 主动 对象 但 也 可以 使用 这种 模板 生成 被动 对象 对象 声明 的 语法 做 如下 扩充 　 　 〈 objectdeclaration 〉 ∷ ［ actively ｜ passively ］ 〈 Activeclassname 〉 〈 objectname 〉 ［ parameter ］ ‘ ’ 分布 对象 方法 调用 的 语义 同步 调用 　 　 主要 针对 函数 形式 的 方法 调用 如 retactiveobjargarg 有 返回值 而且 返回值 对 下面 的 程序执行 有 影响 这种 调用 是 同步 的 客户 必须 等待 直到 服务 方 完成 调用 、 返回 结果 才 可 继续 往 下 执行 这种 调用 方式 的 另 一个 作用 就是 使 并行执行 的 程序 保持 一定 的 同步 关系 　 　 另外 为了 减小 这种 调用 的 参数传递 开销 DOPPF 实现 中将 参数 及 调用 方法 无 阻塞 地 传递 到 分布 对象 的 消息 队列 中 这样 可以 减少 同步 点 同时 提高 同步 调用 的 效率 异步 调用 　 　 主要 针对 过程 形式 的 方法 调用 如 activeobjargarg 这种 调用 没有 返回值 但会 引起 分布 对象 状态 的 改变 过程 型 方法 调用 是 异步 进行 的 客户 在 调用 后 立即 往 下 执行 ， 不必 等待 服务 方 是否 完成 操作过程 型 的 调用 有利于 并行执行 因此 在 并行 要求 较 高 的 分布式 程序 中应 尽量 多地 使用 过程 型 调用 获取 对象 状态 的 方式 有 两种 ① PULL 方式 由 客户 在 需要 时用 DOPPF 的 预 编译器 自动 生成 的 本地 方法 — — getvariable 获取 状态 ② PUSH 方式 client 登记 相应 的 处理函数 由 supplier 通过 事件 服务 的 方式 通知 状态 的 改变 同样 参数 的 传递 也 是 无 阻塞 的 异步 消息 处理 框架 　 　 如图所示 DOPPF 生成 的 stub 中 包含 了 一个 异步 消息 的 监听 线程 当 supplier 的 异步 消息 到达 时 它 自动 调用 对象 登记 的 callback 方法 近来 出现 一些 通信 结构 允许 用户 进程 存取 网络 界面 并 提出 了 一些 异步 消息 的 处理 模式 如 activemessagesinglethreadedupcalls 以及 popupthreads 文献 ［ ］ 在 分析 了 这 几种 通信 模式 的 表达能力 和 效率 后 认为 即使 在 高速 网络 条件 下 牺牲 表达能力 以 获取 效率 也 是 不 可取 的 DOPPF 中 的 异步 消息 处理 采用 了 面向 popupthreads 的 方式 但 为 保持 对象 的 封装 特性 和 减小 client 方 并发 控制 的 复杂性 在 每个 需要 事件 服务 的 分布 对象 的 stub 中 只 提供 一个 监听 线程 由 这个 线程 根据 不同 的 事件 号 调用 相应 的 客户 callback 句柄 这样 stub 中 只 需 处理 两个 线程 的 并发 控制 降低 了 死锁 发生 的 可能性 而且 由于 同一 结点 上 同时 运行 的 线程 数 减少 处理机 的 overhead 也 相应 降低 图 　 适合 并行计算 的 事件 服务 框架 继承 问题 　 　 很多 主动 对象 的 实现 都 避而不谈 继承 问题 因为 它们 将 控制线 程等 表示 主动 行为 的 机制 固定 在 类 定义 中 这种 实现 方式 不利于 继承 而 我们 的 主动 对象 模式 则 不同 定义 Active 类 和 定义 传统 的 passive 类 没有 区别 控制线 程由 DOPPF 自动 生成 分布 属性 只是 作为 运行 时 的 一种 属性 而 对 类 的 继承 和 对象 的 类型 没有 影响 至于 并发 机制 则 完全 由 用户 控制 当前 这方面 的 研究进展 甚微 各种 并发 机制 继承 方式 带来 的 复杂性 往往 要 大于 提供 给 用户 的 好处 如 第节 所述 DOPPF 在 客户端 的 尝试 是 减少 不必要 的 并发 线程 数量 以此 降低 并发 控制 的 复杂程度 因此 Active 类 完全 像 passive 类 一样 可 支持 继承 但 由于 加入 了 Active 类类 继承 的 关系 比 以前 复杂 大致说来 可 分为 下列 种 情况 父类 为 Active 子类 为 passive 父类 为 passive 子类 为 passive 父类 为 passive 子类 为 Active 父类 为 Active 子类 为 Active 其中 第种 为 最 一般 的 继承 情况 不 加以 讨论 其他 种 情况 都 涉及 到 主动 对象 类 的 继承 其 语法 、 语义 和 被动 对象 类 的 继承 大致相同 考虑 到 虽然 主动 对象 的 行为 是 在 另 一个 地址 空间 发生 它 的 对象 类 的 子类 实例 中 这些 行为 未尝不可 在 本地 发生 我们 在 DOPPF 中 增加 个 行为 修饰 关键字 passivelyactivelymakeactivemethod 和 makeactivevariablepassively 表明 无论 父类 是 主动 还是 被动 的 子类 中父 类 的 行为 都 在 当前 进程 的 上下文 中 运行 actively 则 相反 无论 父类 是 主动 还是 被动 的 子类 中父 类 的 行为 都 以 另 一个 进程 的 形式 （ 远程 或 本地 ） 在 不同 的 地址 空间 运行 后 两个 关键字 介于 前 两者之间 父类 只有 部分 行为 需要 在 远程 发生 即 那些 由 这 两个 关键字 指明 的 方法 和 变量 　 　 这种 继承 机制 使得 supplier 可以 继承 别的 主动 对象 类 属性 从而 使得 supplier 可以 将 某些 客户 请求 分布 到 其他 处理机 上 同时 运行 获得 对象 内 的 并行性 　 　 下面 分别 讨论 这种 情况 　 　 父类 为 Active 子类 为 passive 语法 为 　 　 class 〈 classname 〉 ［ public ｜ private ｜ protected ］ 〈 basename 〉 ［ actively ｜ 〈 makeactive 〉 ］ 　 　 缺省 的 行为 修饰 是 passively 表示 子类 的 实例 是 纯粹 的 被动 对象 所有 行为 均 在 本地 发生 行为 修饰 为 actively 时 表示 父类 中 的 远程 行为 依然 在 远程 发生 而 子类 自身 的 行为 在 本地 发生 〈 makeactive 〉 修饰 可 将 父类 的 部分 行为 保留 在 远程 发生 这 也 是 继承 方式 实现 的 对象 内 并行 　 　 父类 为 Active 子类 为 Active 语法 为 Activeclass 〈 classname 〉 ［ public ｜ private ｜ protected ］ 〈 basename 〉 ［ passively ｜ 〈 makeactive 〉 ］ 　 　 缺省 的 行为 修饰 是 actively 表示 子类 是 纯粹 的 主动 对象 所有 行为 均 发生 在 远程 行为 修饰 为 passively 时 表示 父类 的 远程 行为 在 本地 发生 子类 自身 定义 的 行为 在 远程 发生 　 　 　 　 〈 makeactive 〉 作用 同 上 　 　 父类 为 passive 子类 为 Active 语法 为 　 　 Activeclass 〈 classname 〉 ［ public ｜ private ｜ protected ］ 〈 basename 〉 ［ actively ］ ［ 〈 makeactive 〉 ］ 　 　 缺省 的 行为 修饰 是 passively 表示 父类 的 行为 在 本地 发生 而 子类 的 行为 在 远程 发生 行为 修饰 为 actively 时 表示 子类 和 父类 的 行为 都 在 远程 发生 〈 makeactive 〉 作用 同 上 类库 　 　 类库 是 OOFramework 的 重要 组成部分 DOPPF 中 的 类库 分为 系统 级 和 算法 级 两 部分 系统 级 主要 提供 分布 对象 的 异步 事件 服务 （ eventservice ） 、 并发 控制 、 事务 服务 （ transactionservice ） 算法 级 的 类 主要 提供 一些 常用 封装 好 的 并行算法 比如 矩阵 乘 、 二维 图像 平滑 算法 、 常 微分方程 求解 等 由于 工作站 网络 环境 计算 模式 相对 各种 并行机 而言 各 处理机 的 连接 方式 比较 统一 因此 工作站 网上 的 并行算法 具有 比较 好 的 可扩展性 （ scalability ） 适于 封装 和 复用 DOPPF 的 实现 技术 　 　 使用 DOPPF 编写 分布 并行 应用程序 的 过程 是 这样 的 　 　 首先 定义 并 实现 服务 方 supplier 类 注意 在 定义 时用 规定 的 语法 描述 它 的 主动 特征 其次 用 DOPPF 预 处理器 处理 supplier 类 的 定义 文件 生成 客户 和 服务 两 方面 的 stub 代码 stub 中 的 通信 调用 使用 PVM 提供 的 函数 再次 实现 客户 方 应用程序 使用 supplier 的 地方 都 用 clientstub 中 的 Stub 类 替代 最后 分别 编译 客户 和 服务 方 程序 　 　 一个 分布 并行 应用程序 的 生成 过程 如图所示 图 　 分布 并行 应用程序 生成 过程 计算 实例 及 分析 　 　 MasterSlave 是 一种 使用 很广 的 并行计算 模式 在 DOPPF 中 MasterSlave 可以 这样 理解 客户 应用 是 一个 大 计算 量 任务 可 分为 多个 小 任务 每个 小 任务 都 由 一个 主动 对象 （ slave ） 管理 客户 应用 本身 也 可能 是 一个 类 的 实例 Master 对象 包含 几个 主动 对象 分别 并行 完成 一部分 任务 Master 与 Slave 可以 是 同构 的 （ 具有 相同 的 类 定义 但 具有 不同 的 主动 或 被动 修饰 ） 也 可以 是 异构 的 （ 具有 不同 的 类 定义 ） 下面 的 例子 使用 了 这种 计算 模式 通过 这种 方式 算法 获得 了 较 好 的 封装 和 复用 能力 Mandelbrot 算法 　 　 我们 在 Ethernet 连接 的 SGIindySUNsparc 工作站 网上 测量 了 此 算法 的 加速 比 最大 迭代 次数 设定 为 分别 在 大小 为 的 窗口 中 显示 M 集 的 图像 结果 如表 （ 其中 每列 表示 所用 工作 站台 数 ） 和 图 、 所示 个 处理机 时 并行处理 效率 比个 时 高 一些 主要 原因 是 个 处理机 时 的 任务分配 是 均衡 的 而 个 处理机 时 略有 不均 数据量 大时 加速 比较 高是 由于 Ethernet 上 的 小 报文 传递 overhead 与 大 报文 相差无几 表 SpeedupPPPEfficiencyPPP 图 　 Mandelbrot 算法 效率 曲线 　 　 　 　 　 　 图 　 Mandelbrot 算法 加速 曲线 矩阵 乘法 　 　 矩阵 乘法 是 大 运算量 、 大 通信量 的 例子 我们 试图 从中 观测 工作站 网上 计算 这 类 问题 的 效率 采用 分块 算法 C ［ ATAT ］ ［ BBblocknum ］ 通信量 为 ncommcost （ 通信 开销 随 处理机 数 的 增加 而 增加 ） 如表 和 图 、 所示 表 SpeedupPPPPEfficiencyPPPP 图 　 矩阵 乘法 的 效率 曲线 　 　 　 　 　 图 　 矩阵 乘法 的 加速 曲线 表 、 图和图 是 的 矩阵 乘 在 专用 高速 网络连接 的 TRANSPUTER 上 和 工作站 网上 的 加速 和 效率 比较 表 SpeedupPPPPEfficiencyPPPPTT 图 　 矩阵 乘法 的 效率 曲线 　 　 　 　 　 图 　 矩阵 乘法 的 加速 曲线 （ TRANSPUTER 和 NOW 的 比较 ） （ TRANSPUTER 和 NOW 的 比较 ） 　 　 通信量 的 上升 是 处理机 增加 而 并行处理 效率 下降 的 主要 原因 最后 给出 的 是 TRANSPUTER 上 进行 矩阵 运算 （ ） 的 加速 比 由于 个 处理机 的 TRANSPUTER 采用 环形 连接 因此 数据分布 的 传递 路径 过长 每个 处理机 都 要 参与 这些 数据 传递 导致 加速 比 下降 另外 TRANSPUTER 上 的 并行程序 设计 语言 采用 CSP 模型 使 传递 子 矩阵 的 处理机 不能 重叠 通信 时间 进行 计算 这 也 是 TRANSPUTER 这类 专用 网络连接 的 并行机 在 某些 问题 上 低效率 的 原因 　 　 因为 框架 生成 的 通信 代码 是 基于 PVM 的 因此 与 直接 使用 PVM 的 非 OO 程序 相比 上面 两例 的 效率 与其 相差 不 大 结论 　 　 由 上 可以 看出 在 工作站 网 环境 下 进行 并行计算 是 能 获得 比较 好 的 性能 的 利用 分布 对象 构造 并行程序 设计 框架 不会 引起 并行计算 overhead 的 很大 增加 或者说 它 不是 降低 并行 效率 的 主要 因素 分布 对象 的 并行程序 设计 框架 可以 使 程序员 注重 描述 问题 领域 状况 替 他们 自动 完成 了 通信 的 匹配 过程 提供 多样 的 分布 对象 方法 调用 语义 可以 使 程序员 能 根据 不同 问题 选取 最好 的 方式 面向对象 方法 提供 了 良好 的 软件 复用 能力 工作站 网 又 具备 很 好 的 可扩展性 因此 构造 通用 的 并行算法 类库 使用 OO 方法 封装 复用 并行算法 能 使 分布 的 处理 资源 得到 更加 充分 的 利用 并 提高 并行 软件 的 开发 质量 和 效率 　 　 本文 研究 得到 国家 高科技 项目 基金 资助 作者 王晨 年生 博士生 主要 研究 领域 为 分布 并行 系统 和 面向对象 技术 周颖女 年生 硕士 ， 主要 研究 领域 为 分布 对象 技术 张德富 年生 教授 博士生 导师 主要 研究 领域 为 并行处理技术 和 分布式系统 　 　 本文 通讯联系 人 张德富 ， 南京 南京大学 计算机科学 与 技术 系 作者 单位 ： 南京大学 计算机软件 新 技术 国家 重点 实验室 南京 　 　 　 　 　 南京大学 计算机科学 与 技术 系 南京 　 　 　 　 　 Emailzhangdfnetranjueducn 参考文献 ［ ］ VinoskiSCORBAintegratingdiverseapplicationswithindistributedheterogeneousenvironmentsIEEECommunicationsMagazine ～ ［ ］ NierstraszOComposingactiveobjectsInAghaGWegnerPYonezawaAedsResearchDirectionsinObjectbasedConcurrencyCambridgeMAMITPress ～ ［ ］ JavaRemoteMethodInvocationSpecificationavailableinftp ∥ ftpjavasoftcomdocsjdkrmispecJDKps ［ ］ SparksSBennerKFarisCManagingobjectorientedframeworkreuseIEEEComputer ～ ［ ］ LangendoenKBhoedjangRBalHModelsforasynchronousmessagehandlingIEEEConcurrency ～ （ 收稿 ）