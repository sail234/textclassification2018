软件 学报 JOURNALOFSOFTWARE 年 　 第卷 　 第期 　 Vol 　 No 　 DRTUNIX 系统 的 任务调度 庞丽萍 　 吕 文安 　 韩宗芬 摘要 　 任务调度 是 分布式 实时 系统 的 核心 问题 之一 文章 概述 了 实时 系统 的 任务调度 ， 结合 DRTUNIX 系统 的 实际 情况 ， 提出 了 一种 任务调度 算法 ， 并 对 算法 的 优点 进行 了 分析 关键词 　 分布式 实时操作系统 ， 实时 任务 ， 调度 ． 中图法 分类号 　 TPTaskSchedulinginDRTUNIXSystemPANGLipingL ü WenanHANZongfenSchoolofComputerScienceandTechnologyHuazhongUniversityofScienceandTechnology 　 Wuhan 　 Abstract 　 TaskschedulingisoneofthekeyproblemsindistributedrealtimesystemsThetaskschedulinginrealtimesystemsisintroducedinthispaperHavingtakensomepracticalcircumstancesinDRTUNIXsystemintoaccountanalgorithmoftaskschedulingisproposedandthemeritsofthealgorithmareanalysedKeywords 　 Distributedrealtimeoperatingsystemrealtimetaskscheduling 　 　 随着 微电子 技术 和 计算机 科学技术 的 发展 ， 计算机 已 被 广泛应用 于 科学研究 和 工业生产 的 许多 领域 分布式 实时 系统 在 实时性 、 可靠性 、 可扩展性 、 容错性 、 自治 性 和 并行性 等 方面 较 一般 的 实时 系统 更为 突出 和 强大 ， 能够 满足 许多 复杂 实时 应用 的 需要 ， 因此 ， 分布式 实时 系统 的 支撑 软件 — — 分布式 实时操作系统 是 当今 计算机科学 领域 的 研究 热点 之一 DRTUNIX 系统 是 我们 研制 的 基于 UNIX 的 分布式 实时操作系统 　 　 分布式 实时 系统 最 本质 、 最 关键 的 特征 是 实时性 和 可预测性 实时 系统 的 正确性 不仅 与 计算结果 的 逻辑 正确性 有关 ， 还 与 产生 计算结果 的 时间 有 密切关系 ， 因此 ， 实时 系统 的 首要 目标 是 满足 系统 内 实时 任务 的 时间 约束 ， 合理 地 调度 并 执行 它们 ， 使 其能 在 各自 的 限期 deadline 之前 完成 任务调度 是 分布式 实时 系统 的 核心 问题 之一 ， 已 证明 在 不加 任何 限制 条件 的 情况 下 ， 分布式 实时 系统 的 任务调度 问题 是 一个 NP 难度 问题 ［ ］ 本文 将 讨论 DRTUNIX 系统 的 任务调度 问题 基本概念 及 定义 　 　 定义 一个 周期 任务 Tpi 可用 如下 四元 式 描述 Tpi 〈 CiPiRiDi 〉 　 　 　 Ci ≤ Di ， Pi ， ≤ Ri 其中 Ci 表示 最大 计算 时间 （ 在 通常 情况 下 ， 周期 任务 Tpi 的 计算 时间 要 小于 Ci ） ， Pi 表示 周期 ， Ri 表示 到达 时间 ， Di 表示 期限 　 　 对于 Tpi 的 第 k 次 执行 （ fk ≤ ） 有 ： 就绪 时间 为 RikPi ； 最大 计算 时间 为 Ci 期限 为 RikPiDi 周期 任务 在 每个 周期 的 一次 执行 可 称为 该 周期 任务 的 一个 实例 或 一次 执行 请求 　 　 定义 一个 非 周期 任务 Tapj 可用 如下 三元 式 描述 Tapj 〈 CjRjDj 〉 　 　 　 Cj ， ≤ Rj ， RjCj ≤ Dj 其中 Cj 表示 最大 计算 时间 ， Rj 表示 到达 时间 ， Dj 表示 期限 　 　 定义 给定 一个 实时 任务 集 MTpTpTpiTapTapTapj ， 多处理机 任务调度 即 是 求 M 的 一组 子集 Miik ， 使得 　 　 〈 a 〉 Miik 两 两 不 相交 ， 且 ； 　 　 〈 b 〉 对于 每 一个 Miik 中 的 周期 任务 与非 周期 任务 ， 当 将 它们 分配 在 一台 处理机 上 执行 调度 时 ， 能 满足 各自 的 时间 约束条件 　 　 满足 上述 〈 a 〉 、 〈 b 〉 条件 的 调度 称为 有 保证 调度 ［ ］ ， 它 能 保证 每个 实时 任务 在 其 限期 前 完成 ， 其中 k 为 这种 调度 所 需 的 处理机 数目 在 这里 ， 假定 除 处理机 外 ， 其他 所有 的 资源 都 是 可以 满足 的 显然 ， 这里 的 解 不是 唯一 的 ， 甚至 子集 的 个数 k 也 不 唯一 ， 当然 希望 子集 Mi 的 个数 k 越小越 好 当 具有 有 保证 调度 子集 Mi 的 个数 k 是 最 小时 ， 就 称 这个 解为 该 问题 的 最优 解 ， 求 这种 最优 解 的 问题 是 一个 NP 难度 问题 　 实时 系统 任务调度 概述 　 　 任务 是 分布式 实时 系统 中 可 被 调度 及 保证 的 实体 ， 在 处理机 上以 进程 的 形式 运行 分布式 实时 系统 任务调度 要 考虑 的 因素 很多 ， 如果 兼顾 所有 的 因素 ， 将 使 调度 问题 变得 异常 复杂 ， 导致 失去 实用价值 因而 在 实际 应用 中 ， 为了 简化 问题 ， 往往 只 考虑 部分 因素 在 许多 时候 都 假设 系统 除 处理机 之外 的 其他 资源 是 足够 多 的 ， 并且 不 考虑 任务 之间 复杂 的 同步 问题 ， 而仅 考虑 任务 的 时间 约束 我们 在 本文 中 的 叙述 也 是 以此 为 前提 的 　 　 实时 任务 包括 周期 任务 和 非 周期 任务 通常 在 一个 实时 系统 中 这 两类 任务 并存 一般来说 ， 周期 任务 是 系统 要 处理 的 主要 任务 ， 占用 处理机 时间 较 多 ； 而 非 周期 任务 则 是 系统 为了 处理 一些 意外 情况 或 紧急事件 所 需 执行 的 任务 ， 占用 处理机 时间 较 少 ， 而且 非 周期 任务 的 数目 也 很小 因而 任务调度 的 常见 处理过程 是 先 调度 周期 任务 ， 在 能 保证 周期 任务 时间 约束条件 的 基础 上 ， 再 考虑 如何 调度 非 周期 任务 ， 并 保证 其 期限 　 　 虽然 分布式 实时 系统 的 任务调度 要 比单 处理机 实时 系统 复杂 得 多 ， 但 前者 是 以后 者 为 基础 的 ， 因此 我们 有 必要 先 讨论一下 单 处理机 实时 系统 的 任务调度 单 处理机 实时 系统 通常 采用 基于 优先级 的 可 抢占 调度 到 目前为止 ， 已 提出 了 许多 比较 成熟 的 基于 优先级 的 调度 算法 ， 比较 有 代表性 的 算法 有 最早 期限 优先 算法 、 最小 松弛 时间 优先 算法 和 速率 单调 算法 其中 最早 期限 优先 算法 和 最小 松弛 时间 优先 算法 属于 动态 优先级 调度 算法 ， 速率 单调 算法 属于 静态 优先级 调度 算法 现已 证明 在 单 处理机 实时 系统 中 ， 速率 单调 算法 和 最早 期限 优先 算法 分别 是 最优 的 静态 和 动态 优先级 调度 算法 ［ ］ 从 一般 意义 上 来说 ， 动态 优先级 调度 算法 在 性能 上要 优于 静态 优先级 调度 算法 例如 对于 周期 任务 的 调度 ， 最早 期限 算法 所 能 取得 的 处理机 利用率 在 理论 上 可 高达 ， 而 速率 单调 算法 一般 为 ［ ］ 相对而言 ， 动态 优先级 调度 本身 所 需 开销 过大 ， 而 静态 优先级 调度 则 简单 得 多 ， 并且 速率 单调 算法 是 最优 的 静态 优先级 调度 算法 ， 它 还 具有 其他 的 一些 优点 ， 如 对 其 稍加 变化 就 可 有效 地 处理 调度 算法 的 稳定性 、 对非 周期 任务 的 响应 及 优先级 反向 等 问题 ［ ］ ， 所以 ， 速率 单调 算法 及其 变种 在 国外 是 实时 任务调度 研究 领域 的 热点 之一 ， 已有 人 推导 出 在 单 处理机 实时 系统 中 速率 单调 算法 调度 的 充分 必要条件 ［ ］ 　 　 分布式 实时 系统 的 任务调度 是 NP 难度 问题 ， 因此 很多 人 尝试 用 不同 的 启发式 算法 寻找 次优 解在 分布式 实时 系统 中 ， 通常 将 同一个 周期 任务 的 每个 实例 放在 同一 台 处理机 上 运行 ， 对 周期 任务 不 存在 动态 迁移 ， 但 允许 非 周期 任务 动态 迁移 ， 实际上 对 周期 任务 采取 的 是 一种 静态 调度 策略 常常 采用 如下 调度 方案 ［ ］ ： 每个 处理机 上 有 局部 调度 器 和 全局 的 分布 式调度 器 系统 中 的 每个 节点 确保 完成 本 节点 上 的 周期 任务 ， 同时 允许 非 周期 任务 随机 到达 任何 节点 ， 当 局部 调度 器 无法 保证 该 非 周期 任务 的 时间 约束 时 ， 提交 分布 式调度 ， 将 其 迁移 到 一个 合适 的 节点 上去 各种 不同 调度 算法 只是 在 非 周期 任务 的 迁移 时机 、 迁移 策略 等 方面 有所不同 ， 从而 导致 实际 运行 的 性能 有所区别 ， 但 总的来说 所 付出 的 开销 也 是 比较 大 的 　 　 分布式 实时 系统 的 任务调度 是 国内外 研究 的 热点 之一 但 这些 研究 有 的 仅仅 局限于 理论 上 的 探讨 ， 考虑 实际 的 因素 较 少 ， 因而 实用性 不强 有 的 则 完全 从 实用 的 角度 出发 ， 为了 使 问题 简化 ， 尽量 用 一些 简单 的 调度 算法 ， 导致 在 理论 上 无 可取之处 因此 有 必要 在 这方面 作 进一步 的 研究 ， 并 结合 一些 实际 因素 ， 为 DRTUNIX 系统 设计 一个 有效 、 实用 的 有 保证 调度 算法 　 DRTUNIX 系统 的 任务调度 　 　 实时 系统 的 首要 目标 是 满足 任务 的 时间 约束 ， 从 这个 角度 来说 ， 对 实时 任务 最好 采用 静态 调度 在 只 考虑 任务 的 时间 约束 的 条件 下 ， 已 提出 了 许多 静态 调度 算法 ， 例如 RMNF ［ ］ RMFF ［ ］ FFDUFRMBF 等 ， 它们 都 是 基于 速率 单调 算法 的 ， 但 这类 算法 有 一个 不足之处 是 要求 周期 任务 的 周期 等于 其 期限 而 在 实际 中 ， 许多 实时 应用 的 期限 往往 小于 其 周期 本文 将 针对 这 类 问题 提出 相应 的 处理 方案 ， 这样 可 满足 更 多 问题 的 需要 为了 方便 地 说明 问题 ， 我们 先作 如下 假设 和 说明 　 　 系统 是 同构 的 ； 　 　 每台 处理机 上 采用 基于 固定 优先级 的 可 抢占 调度 策略 ； 　 　 提交 的 实时 任务 包括 周期 任务 和 非 周期 任务 ； 　 　 周期 任务 只能 在 系统 开始 工作 之前 一次性 提交 ， 系统 在 运行 过程 中 不再 接收 任何 周期 任务 ； 　 　 对于 周期 任务 Tpi 而言 ， Ri ， Di ≤ Pi ； 　 　 不 考虑 任务 之间 复杂 的 同步 问题 ， 在 调度 时 将 任务 之间 的 同步 、 通信 等 作为 一种 开销 考虑 进来 ， 将 有 交互 关系 的 多个 任务 尽量 分配 到 同一 台 处理机 上 ； 　 　 通过 测量 任务调度 的 各 部分 系统 开销 ， 将 这些 开销 平摊 到 各 任务 的 计算 时间 中 去 ， 这样 在 任务调度 时 就 考虑 了 系统 开销 　 对非 周期 任务 的 处理 　 　 在 一个 分布式 实时 系统 中 ， 周期 任务 在 系统 开始运行 时 就 已 确定 ， 而 非 周期 任务 则 在 系统 整个 运行 过程 中 随时 都 有 可能 到达 因此 对于 周期 任务 可以 采用 静态 调度 的 方式 来 保证 其 期限 ， 而 对于 非 周期 任务 由于 其 到达 的 随机性 用 静态 调度 的 方式 很难 保证 其 期限 不管 在 什么 时候 ， 非 周期 任务 实际上 要 由 节点 上 的 局部 调度 器 （ 即 通常 所说 的 进程 调度 ） 来 明确 保证 其 期限 ， 在 任务调度 这 一级 很难 既 达到 较 好 的 调度 性能 又 能 绝对 保证 各非 周期 任务 的 期限 在 允许 任务 （ 一般 是 指非 周期 任务 ） 动态 迁移 的 分布式 实时 系统 中 ， 如果 一个 节点 发现自己 不能 保证 某一非 周期 任务 的 期限 ， 可以 将 其 迁移 到 系统 中 另外 一个 适当 的 节点 上 运行 ， 以 保证 其 期限 在 DRTUNIX 系统 中 ， 由于 采用 静态 调度 ， 不 存在 任务 迁移 ， 所以 只好 采用 一定 的 冗余 措施 ， 即 增设 周期 任务 ， 由 它 参与 调度 ， 代表 非 周期 任务 去 竞争 处理机 资源 　 　 虽然 非 周期 任务 是 随机 到达 的 ， 但 分布式 实时 系统 一般 都 有 其 具体 的 应用 背景 在 这 一 应用 背景 下 ， 非 周期 任务 最大 计算 时间 C 、 到达 的 最小 间隔时间 P 等 是 可以 预先 知道 的 ， 可 根据 这些 信息 在 系统 内 增设 周期 服务器 来 响应 非 周期 任务 的 请求 周期 服务器 实质 上 也 是 一个 周期 任务 一般来说 ， 在 一 具体 应用 背景 下 ， 如果 非 周期 任务 的 数目 不 多 ， 则 只 需 增设 一个 周期 服务器 ， 否则 可以 多 增设 几个 ； 周期 服务器 的 计算 时间 置 为 非 周期 任务 的 最大 计算 时间 C ， 周期 和 期限 均 置 为 非 周期 任务 到达 的 最小 间隔时间 P ， 到达 时间 置 为 　 　 周期 服务器 S 可 简单 地 表示 为 S 〈 CP 〉 ， 用 周期 服务器 S 响应 非 周期 任务 的 基本 思想 是 由 S 代替 各非 周期 任务 去 竞争 处理机 资源 假设 周期 服务器 S 管理 的 时间 为 STA ， 其 初始值 为 ， 每当 系统调度 到 周期 服务器 S 运行 时 ， 具体操作 如下 ： 　 　 STASTAC ； 　 　 如果 存在 非 周期 任务 正在 等待 或刚 到达 ， 则 系统 响应 非 周期 任务 ， 并 从 STA 中 减去 用 掉 的 时间 ； 　 　 如果 没有 非 周期 任务 在 等待 ， 也 没有 非 周期 任务 到达 ， 却 有 周期 任务 在 等待 ， 则 假设 正在 等待 的 优先级 最高 的 周期 任务 为 Tpi ， 系统 就 将 本该 分配 给 周期 服务器 S 的 处理机 时间 用于 运行 Tpi ， 直到 Tpi 被 新来 的 非 周期 任务 抢占 ， 或者 是 运行 完毕 ， 或者 是 系统 分配 给 S 的 处理机 时间 用 完 ， 相应 地 从 STA 中 减去 用 掉 的 时间 ； 在 随后 调度 到 Tpi 时 ， Tpi 向 S 归还 刚才 所用 的 时间 加在 STA 中 ， S 可用 这部分 时间 继续 响应 非 周期 任务 或 “ 借给 ” 当前 优先级 最高 的 周期 任务 ， 依此类推 　 　 实际上 周期 服务器 S 管理 的 时间 并非 系统 在 每个 周期 分配 给 它 的 计算 时间 C ， 最初 分配 给 它 的 处理机 时间 是 C ， 但 随着 系统 的 运行 ， S 管理 的 时间 可能 被 分割 成 一段段 的 时间 片 ， 但 实际上 ， 系统 在 每个 周期 分配 给 它 的 处理机 时间 总量 仍为 C 将 该 周期 服务器 S 与 用户 提交 的 任务 集中 的 周期 任务 一起 调度 并 分配 处理机 ， 然后 把 所有 的 非 周期 任务分配 给 周期 服务器 S 所在 的 处理机 这样 ， 任务 集中 的 非 周期 任务 可由该 周期 服务器 S 在 系统 中 的 某 一台 处理机 上代 它们 去 竞争 处理机 资源 ， 对 整个 实时 任务 （ 包括 周期 任务 和 非 周期 任务 ） 的 调度 则 可 转化 为 对 单一 的 周期 任务 的 调度 ， 既 简化 了 调度 本身 的 工作 ， 又 增加 了 系统 行为 的 可预测性 　 对 周期 任务 的 处理 　 　 定理 设在 一台 处理机 上 有 一组 周期 任务 ， 按 优先级 从 高到 低 的 顺序排列 依次 为 Tp ， Tp ， Tpn ， 对于 其中 的 周期 任务 Tpm ， 定义 NmminkWmkkPm ≤ 其中 m ≤ ， k ≥ ， x ， 如果 满足 ， 则 这组 周期 任务 在 该 处理机 上 存在 可行 调度 　 　 证明 ： 假设 分配 给 周期 任务 Tpj 的 优先级 为 j ， j 越小则 其 对应 的 优先级 越高先 考查 任务 组中 任意 一 周期 任务 Tpi 期限 的 满足 情况 ： 　 　 Cj ［ tPj ］ Ci 是 时间 区间 ［ t ］ 内 周期 任务 Tp ， Tp ， Tpi 的 所有 执行 请求 和 Tpi 的 第次 执行 请求 对 处理机 的 累积 需求量 ， 这时 可以 忽略 周期 任务 Tpi ， Tpi ， Tpn 的 执行 请求 ， 因为 它们 的 优先级 比 Tpi 低 ， 能够 被 抢占 当且 仅 当 Cj ［ tPj ］ Ci ≤ t （ tDn ） 时 才能 保证 Tpi 的 第次 执行 请求 的 期限 ， 因为 在 t 时刻 处理机 已 完成 Tpi 的 第次 执行 请求 及 优先级 比 它 高 的 其他 计算 ； 显然 满足 Cj ［ tPj ］ Cit 的 最小 t 值 就是 Tpi 的 第次 执行 请求 的 完成 时刻 如果 没有 优先级 为 i 或 更 高 优先级 的 计算 要 处理 ， 则 开始 于 时刻 的 i 级 忙 周期 将 在 Tpi 的 第次 执行 请求 完成 时 结束 　 　 如果 WiDi ≤ ， 则 Tpi 的 第次 执行 请求 的 期限 能 得到 保证 ； 若 WiPi ≤ ， 则 i 级 忙 周期 结束 如果 WiDi ≤ 而 WiPi ， 则 Tpi 的 第次 执行 请求 的 期限 能 得到 保证 ， 但是 在 超过 时刻 Pi 时 ， i 级 忙 周期 却 未 结束 现在 我们 考查 Tpi 的 第次 执行 请求 ， 如果 用 周期 任务 Tpi ′ （ 其 最大 计算 时间 为 Ci ， 期限 为 PiDi ） 代替 Tpi ， 则 当且 仅 当 WiPiDi ≤ 时 Tpi 的 第次 执行 请求 的 期限 能 得到 保证 ， 此时 若 WiPi ， 就 必须 检查 周期 任务 Tpi 后面 的 执行 请求 期限 的 满足 情况 ； 实际上 ， Tpi 的 前 Ni 个 执行 请求 是 i 级 忙 周期 的 一部分 （ 因为 总 的 处理机 利用率 不会 超过 ， 所以 Ni 的 值 是 有限 的 ） ， 这样 ， 如果 WikkPiDi ≤ ， 则 Tpi 的 期限 能 得到 保证 依此类推 ， 如果 对于 任务 组中 每 一个 周期 任务 Tpj 都 有 WjkkPjDj ≤ ， 即 WjkkPjDj ≤ ， 则 任务 组中 每 一个 周期 任务 的 期限 都 能 得到 保证 ， 也 就是 这组 周期 任务 在 该 处理机 上 存在 可行 调度 　 　 说明 ： 任务 组中 的 周期 任务 可 根据 需要 选择 一种 优先级 分配 策略 ， 例如 ， 按 其 周期 、 重要性 等 分配 优先级 ， 但是 要 注意 ， 任务 的 优先级 一旦 分配 就 保持 不变 　 　 算法 　 　 对 周期 任务 排队 ， 将 有 交互 关系 的 任务 按 周期 非减 的 顺序 排 在 一起 ， 位于 队列 的 前面 ， 其他 任务 按 周期 非减 的 顺序 挂 在 队列 的 后面 ， 假设 重排 后 的 顺序 为 Tp ， Tp ， Tpm ； 　 　 初始化 ： i ， M ； 　 　 将 周期 任务 Tpi 分配 给 处理机 M ， ii ； 　 　 j ； 　 　 　 　 若 周期 任务 Tpi 与 其他 某些 任务 有 交互 关系 ， 如果 Tpi 是 这些 有 交互 关系 的 任务 中 最先 被 调度 到 的 ， 则 Mj ， 转 ， 否则 ， j 等于 与 Tpi 有 交互 关系 的 任务 所在 的 处理机 号 ； 　 　 　 　 如果 Tpi 和 已 分配 到 处理机 j 上 的 任务 一起 在 该 处理机 上 存在 可行 调度 ， 即 ： 　 　 若 将 Tpi 和 已 分配 到 处理机 j 上 的 任务 按 周期 非减 顺序排列 ， 任务 编号 为 n ， 满足 ： 该 处理机 利用率 小于 或 等于 且 WykkPyDy ≤ 则 将 Tpi 分配 到 处理机 j 上去 ， 转 ； 　 　 否则 ， 如果 jM ， 则 Mj ， 转 ； 否则 ， jj 转 ； 　 　 若 所有 的 周期 任务 都 已 分配 完毕 ， 则 算法 终止 ； 否则 ， ii ， 转 　 　 注 ： M 的 最终 值 是 调度 该 周期 任务 集所 需 的 处理机 数 　 算法 性能 分析 与 说明 　 　 为了 简化 问题 ， 许多 文献 在 讨论 多处理机 实时 系统 的 任务调度 时 ， 往往 假设 周期 任务 的 周期 与 期限 重合 ， 即 在 一个 周期 内 ， 周期 任务 的 期限 就是 本次 周期 的 结束 时间 与 同类 算法 （ 如 RMNFRMFFFFDUFRMBF 等 ） 相比 ， 本文 提出 的 调度 算法 最大 的 优点 是 允许 周期 任务 的 期限 小于 周期 ， 这 在 一定 程度 上 会 扩大 算法 的 应用 范围 作为 本 算法 处理 的 一种 特殊 情况 ， 当 周期 任务 的 期限 等于 周期 时 ， 通过 模拟实验 比较 本 算法 与 RMNFRMFFFFDUFRMBF 等 算法 的 性能 发现 对于 同 一组 实时 任务 ， 用 本文 的 算法 调度 所 需 的 处理机 数 不会 多于 后面 几种 算法 调度 所 需 的 处理机 数 ， 也就是说 ， 相对 于 一些 同类 算法 来说 ， 本文 的 算法 不仅 适用范围 宽 ， 而且 性能 不比 它们 差 　 　 在 模拟实验 中 ， 根据 本文 开始 的 定义 ， 每个 周期 任务 Tpi 包括 个 参数 ： 最大 计算 时间 Ci 周期 Pi 到达 时间 Ri 及 期限 Di 此外 ， 本 算法 还作 了 如下 假设 ： Ri ， Di ≤ Pi 在 满足 这些 条件 的 情况 下 ， 随机 生成 若干组 周期 任务 每组 任务 不少 于个 ， 依次 以 其中 的 每 一组 周期 任务 作为 输入 ， 同时 用 RMNFRMFFFFDUFRMBF 等 算法 及 文献 ［ ］ 中 提出 的 新 算法 和 本文 的 算法 分别 进行 处理 ， 确定 能否 将 所有 的 周期 任务 都 分配 完毕 ， 若 存在 一个 调度 ， 就 得到 该 周期 任务 集所 需 的 处理机 数 调度 结果显示 ： 对于 同 一组 周期 任务 ， 用本 算法 调度 所 需 的 处理机 数不比 其他 几种 算法 需要 的 多 ， 这 实际上 意味着 本 算法 与 其他 几种 算法 相 比较 ， 适用范围 要广 一些 ， 性能 也 较 好 　 　 其次 ， 本 算法 能够 同时 保证 周期 任务 和 非 周期 任务 的 期限 ， 增强 了 系统 的 可 预测 能力 目前 的 文献 中 ， 很少 讨论 到 同时 保证 多处理机系统 的 周期 任务 和 非 周期 任务 的 期限 这个 问题 ； 有 的 文献 仅 专门 讨论 如何 调度 周期 任务 ， 从而 保证 其 期限 ， 根本 未 涉及 调度 非 周期 任务 的 问题 ； 另外 还有 一些 文献 研究 了 在 假设 已 保证 了 周期 任务 期限 的 情况 下 ， 对于 非 周期 任务 ， 只能 在 不 影响 对 周期 任务 的 调度 的 前提 下 设法 加快 其 响应 时间 ， 却 不能 事先 绝对 地 保证 其 期限 ， 从而 降低 系统 的 预测 能力 本文 的 算法 能 同时 保证 周期 任务 和 非 周期 任务 的 期限 ， 增强 了 系统 的 预测 能力 　 　 此外 ， 相对 于 有些 文献 中 提出 的 许多 任务调度 算法 而言 ， 本 算法 还 考虑 了 有 交互 关系 的 任务 的 调度 调度 原则 是 ： 将 有 交互 关系 的 多个 任务 尽量 分配 到 同一 台 处理机 上 如果 这样 做 与 确保 任务 的 期限 有 矛盾 、 可以 将 它们 分 在 不同 的 处理机 上 ， 同时 将 任务 之间 的 同步 、 通信 等 开销 考虑 进来 ， 并作 适当 的 处理 　 结束语 　 　 分布式 实时 系统 的 任务调度 是 一个 很 复杂 的 问题 ， 不 存在 一个 对 所有 情况 都 适用 的 通用 解 ， 许多 学者 在 研究 这 类 问题 时 往往 先作 一些 假设 和 限制 本文 在 已 提出 的 一类 算法 的 基础 上 ， 为 DRTUNIX 系统 提出 了 一种 任务调度 算法 ， 虽然 该 算法 有 一些 改进 之 处 ， 但是 所 考虑 的 因素 还是 有限 的 我们 下 一步 的 研究 将 考虑 包括 处理机 IO 以及 通信 信道 等 存在 任务 竞争 的 常用 资源 的 调度 ， 对 存在 复杂 同步 关系 任务 的 调度 也 将 进行 研究 　 本文 研究 得到 国防 预研 基金 资助 本文 通讯联系 人 ： 庞丽萍 武汉 华中理工大学 计算机科学 与 技术 学院 作者简介 ： 庞丽萍 ， 女 ， 年生 ， 教授 ， 主要 研究 领域 为 并行 分布式 程序设计 ， 分布式 实时操作系统 　 　 　 　 　 吕 文安 ， 年生 ， 硕士生 ， 主要 研究 领域 为 分布式 实时操作系统 ， UNIX 系统 　 　 　 　 　 韩宗芬 ， 女 ， 年生 ， 副教授 ， 主要 研究 领域 为 分布式 实时操作系统 ， 软件工程 作者 单位 ： 华中理工大学 计算机科学 与 技术 学院 　 武汉 　 参考文献 ： ［ ］ BurnsASchedulinghardrealtimesystemsareviewSoftwareEngineeringJournal ： ～ ［ ］ 刘键 分布式 计算机系统 基础 ． 北京 ： 人民邮电出版社 ， LiuJianDistributedComputerSystemsBeijingPeoplesPostsTelecommunicationsPublishingHouse ［ ］ LiuCLLaylandJWSchedulingalgorithmsformultiprogramminginahardrealtimeenvironmentJournalofACM ～ ［ ］ LehoczkyJPShaLDingYTheratemonotonicschedulingalgorithmexactcharacterizationandaveragecasebehaviorInDougLockeedProceedingsofIEEERealtimeSystemsSymposiumLosAlamitosCAIEEEComputerSocietyPress ～ ［ ］ ShaLLehoczkyJPRajkumarRSolutionsforsomepracticalproblemsinprioritizedpreemptiveschedulingInKangShinedProceedingsofIEEERealtimeSystemsSymposium ～ ［ ］ BurchardALiebeherrJOhYFetalNewstrategiesforassigningrealtimetaskstomultiprocessorsystemsIEEETransactionsonComputers ～ ［ ］ DhallSKLiuCLOnarealtimeschedulingproblemOperationsResearch ～ 收稿 日期 ： ， 修改 日期 ：