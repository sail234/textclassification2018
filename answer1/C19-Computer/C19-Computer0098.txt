计算机 应用 COMPUTERAPPLICATIONS 年 第卷 第期 VolNo 时间 序列 数据 立方 的 存储 与 聚集 计算 唐常杰 　 杨 　 峰 　 于 中华 　 相 利民 　 左 　 　 摘 　 要 　 本文 讨论 了 从 时 序数 建造 、 存储 数据 立方 ， 以及 聚集 计算 的 算法 ， 其中 N 算法 和 扩展 的 EN 算法 可以 方便 地 将 一个 N （ N ） 维 数据 立方 转换 为 三维 数据 立方 ， 大大降低 了 IO 次数 ， 极大地提高 了 运行 效率 。 　 　 关键词 　 数据 采掘 ， 数据 立方 ， 聚集 计算 ， 时态 数据 THESTORAGEANDAGGREGATIONONTHEDATACUBEFORTIMESERIESTangChangjie 　 YangFeng 　 YuZhonghua 　 XiangLimin 　 ZuoJieComputerDepartmentSichuanUniversity 　 SichuanChengdu 　 　 Abstract 　 ThispaperproposesthealgorithmstobuildstorageandaggregatethedatacubefortemporaldataAmongthemthealgorithmNandENcanconverttheNdimensionaldatacubeintoadimensionaldatacubewithlowIOcostandhighperformance 　 　 Keywords 　 DataminingDatacubeAggregationTemporaldata 　 　 　 　 在 现实生活 中 ， 有 大量 与 时间 有关 的 数据 称为 时序 数据 或 时态 数据 。 从 时序 数据 中 发现 指示 例如 周期 模式 具有 广泛 的 应用 前景 。 　 对 时序 数据 采掘 的 意义 及 难点 　 　 决策者 在 决策 之前 ， 常常 需要 从 历史性 数据 即 时态 数据 了解 相关 对象 的 规律 和 趋势 ， 对 未来 进行 预测 。 例如 ， 对 消费者 进行 分析 ， 发现 哪些 人 更加 可能 会 对 邮件 宣传 作出反应 ； 预测 消费 贷款 的 可能 结果 预测 呆帐 ， 坏帐 ； 预测 电视台 在 各种 节目 方案 下 的 收视率 ， 以 更好 地 编排节目 ， 增加 广告 收入 等等 。 　 　 从 时序 数据 中 发现 规律 ， 至少 有 两个 困难 ∶ 数据量 大 ； 发现 模式 例如 周期 的 算法 。 先驱者 经过 探索 ， 指出 多维 数据 立方 是 解决 这些 困难 的 基本 数据结构 之一 。 　 　 作为 OLAP 联机 事务 分析 的 工具 ， 多维 数据 立方 在 实现 时有 两种 方案 ， 即 基于 关系数据库 的 ROLAP 和 基于 多维 数据库 的 MOLAP 。 ROLAP 中 数据 单元 为 元组 ， 适合 于 大型 的 数据 集 ， 其 优势 在于 稀疏 数据 在 关系数据库 中比 在 数组 中 存贮 得 更加 紧密 。 MOLAP 直接 使用 特殊 的 数据结构 （ 如 稀疏 数组 ） 来 实现 多维 数据 立方 ， 数组 的 维 作为 坐标轴 。 根据 一个 数据 单元 在 稀疏 数组 中 的 位置 ， 可以 推导 出 它 在 多维 数据 立方 中 的 准确 位置 。 但是 ， 当 数据 比较 稀疏 的 时候 ， 这种 方法 存贮 效率 低 。 压缩 技术 成为 需要 解决 的 关键问题 。 图 　 三维 数据 立方 　 多维 空间 位置矢量 与 一维 数组 互换 　 　 设 被 处理 数据 对象 有 N 维 ， 分别 记为 DD … … DN 。 对 每 一维 增加 个值 Sum ， 对象 在 Di 维上 的 值 为 didi … … ， diSUM 。 为了 方便 ， diSUM 表示 为 Di ｜ Di ｜ 。 每 一个 维 Di 都 有 ｜ Di ｜ 个值 。 用 矢量 V （ vv … … ， vN 来 表明 数据 立方 单元 多维 空间 中 的 位置 。 一个 数据 立方 单元 的 地址 中 至少 有 一个 vj 等于 ｜ Dj ｜ ， 其中 j ≥ ， 并且 jN 。 用 矢量 V ｜ D ｜ … … ， ｜ DN ｜ ） 表示 的 数据 立方 单元 对应 于 分组 Sum 。 　 　 例 ： 从图 中 ， 三维 数据 立方 的 维 DDD 的 大小 为 ： ｜ D ｜ ｜ D ｜ ｜ D ｜ 。 di 是 ， di 是 ， 依次 类推 。 i 。 数据 立方 单元 V 就 代表 着 单元 VSumSumSum 。 地址 是 V 的 数据 单元 保存 着 以下 内部 数据 单元 的 和 VVVVV 。 数据 单元 V 也 存放 着 其它 一些 内部 数据 单元 的 和 ： SVVVVSVVVVV 。 外部 数据 单元 V 的 值 要 由 内部 数据 单元 集合 S 或者 S 中 的 值来 决定 。 　 　 数据 立方 是 面向 查询 驱动 而 设置 的 ， 所以 维 的 数目 直到 建立 数据 立方 的 要求 发出 之前 是 未知 的 。 多维 立方 是 用 一维 数组 来 实现 的 。 例如 ， 上面 图中 的 数据 立方 的 单元 就是 这样 排列 的 ： V 和 V 分别 排 在 一维 数组 中 的 第个 和 第个 位置 。 而 最后 一个 数据 单元 V 处于 第个 位置 ， 因为 数据 立方 中 一共 有个 数据 单元 。 　 　 下面 的 算法 将 数组 位置 转化 为 多维 空间 位置矢量 ， 其 逆向 算法 思路 类似 ， 限于 篇幅 这里 略去 细节 ， 参见 http 。 　 　 算法 ： 　 数组 位置 转为 多维 空间 位置矢量 　 　 ProcedureVectorIndexVectorVv … … vNindexN 是 数据 立方 的 维数 foriiNiindexviindex ｜ DI ｜ endforindexvNreturnindex 　 数据 立方 的 存储 方案 　 　 当 数据 立方 的 维数 增加 时 ， 查询 代价 迅速 增加 。 为了 探索 比较 不同 方法 的 效果 我们 集成 了 下列 的 方法 ， 由 用户 在 使用 时 选配 。 ． 　 将 数据 立方 压缩 在 一维 数组 中 　 　 通常 ， OLAP 数据 立方 中 的 数据 非零 。 排除 这些 空 单元 是 简单 有效 的 方法 ， 只 需 记录 非空 单元 的 数据 及 偏移量 。 由于 稀疏 矩阵 必须 在 压缩 之前 就 产生 并且 填充 ， 所以 压缩 后 的 数组 将 是 根据 单元 偏移量 排序 的 。 否则 须 重新 排序 ， 或 消除 重复 单元 。 这是 时间 换 空间 的 方法 。 　 利用 B 树 压缩 数据 立方 　 　 不需 分配 大量 内存 ， 使用 以 单元 偏移量 作为 键值 将 数据 单元 插入 B 树 ， 花费 较 小 ， 但是 叶 节点 指针 所指 的 数据 单元 总是 按照 偏移量 的 升序 排列 的 。 根据 键值 就 可以 访问 多维 数组 中 的 任何 一个 非空 单元 。 　 分块 存储 　 　 将 数组 分块 ， 每块 是 一个 稀疏 数组 可 放入 内存 中 。 分块 中 只有 外部 单元 或 只有 内部 单元 。 通常 ， 外部 单元 远远 小于 内部 单元 ， 并且 会 比 内部 单元 更 频繁 被 访问 。 给定 一个 N 维 数据 立方 ， 分块 存储 的 方法 将 它 分解 为 比较 小 的 块 ， 并且 将 每 一个 块 作为 一个 对象 存储 在 外存 中 。 多数 分块 在 各个 维 上面 有 相同 的 大小 。 将 每 一个 分块 都 作为 数据 单元 来 处理 。 ． 　 仿 ROLAP 存储 方法 　 　 将 压缩 后 的 数组 放在 关系数据库 的 表中 ， 表中 包含 下列 字 段 ， 数据 单元 的 偏移量 ， 该 单元 在 多维 空间 中 的 各个 维 上面 的 度量 ， 第一 维 ， 第二 维 ， … 等等 。 每 一元 组是 一个 压缩 过 的 数据 单元 。 当 所有 的 数据 单元 都 插入 到 这个 表中 之后 ， 它们 会 被 建立 索引 ， 可 快速 地 查找 到 指定 单元 。 　 聚集 计算 　 　 聚集 计算 （ 包括 总和 ， 均值 ， 最大值 ， 最小值 ） 是 传统 的 分析 工具 。 进行 聚集 计算 是 对 一个 数据仓库 建造 数据 立方 的 主要 目的 。 我们 希望 进行 聚集 计算 的 时候 消耗 最少 ， 一般 要 选择 最小 的 维 进行 计算 。 例如 在 图 中 ， 为了 计算 外部 数据 单元 （ Sum ） ， 我们 首先 选择 沿着 D 进行 计算 。 　 朴质 聚集 算法 　 　 输入 ： 　 n 维 数组 A ［ DD … Dn ］ ， ｜ Di ｜ 为 第 i 维 的 长度 in 。 G 为 一 聚集 函数 。 DiDi … … Din 为 DD … … Dn 的 真 子集 ， 且 DD … … DnDiDi … … DikDjjn 。 　 　 输出 ： 　 DiDi … … Din 对应 的 n 维 数组 B 。 　 　 步骤 ： 　 分配 D ［ ］ D ［ ］ … … D ［ j ］ 的 数组 空间 M ； 外层 循环 ford ［ n ］ d ［ n ］ D ［ n ］ d ［ n ］ 　 　 ford ［ n ］ d ［ n ］ D ［ n ］ d ［ n ］ 　 　 　 … … 　 　 　 ford ［ j ］ d ［ j ］ D ［ j ］ d ［ j ］ 　 　 　 　 　 　 　 　 ford ［ j ］ d ［ j ］ D ［ j ］ d ［ j ］ 　 　 　 　 　 　 … … 　 　 　 　 　 ford ［ ］ d ［ ］ D ［ ］ d ［ ］ 　 　 　 　 　 　 　 ford ［ ］ d ［ ］ D ［ ］ d ［ ］ 　 　 　 依 key 从小到大 的 顺序 从 B 树中 读入 下 一个 元组 ， 并 加到 M ［ d ［ ］ ］ ［ d ［ ］ ］ … ［ d ［ j ］ ］ 单元 中 。 　 　 保存 计算结果 到 表示 B 的 B 树中 。 　 　 ford ［ j ］ d ［ j ］ D ［ j ］ d ［ j ］ 　 　 　 ord ［ ］ d ［ ］ D ［ ］ d ［ ］ 　 　 　 ford ［ ］ d ［ ］ D ［ ］ d ［ ］ 　 　 　 　 根据 key 的 定义 在 B 中 计算 新 的 key 　 　 　 　 将 key ， M ［ d ［ ］ ］ ［ d ［ ］ ］ … ［ d ［ j ］ ］ 二元 组 　 　 　 　 插入 到 表示 B 的 B 树中 。 　 　 　 　 本 算法 将 N 维 数据 立方 聚集 为 N 维 数据 立方 。 反复 调用 ， 可 将 N 维 数据 立方 聚集 到 一个 数据 单元 上面 。 实用 中 ， 人们 往往 需要 将 N 维 数据 立方 （ N ） 聚集 为 三维 数据 立方 ， 以便 观察 数据 。 因此 ， 我们 提出 了 如下 的 改进 算法 。 　 数据 立方 聚集 改进 算法 N 算法 　 　 输入 ： nn 维 数组 A ［ DD … Dn ］ ， ｜ Di ｜ 为 第 i 维 的 长度 in 。 G 为 一 聚集 函数 。 DiDiDi 为 DD … Dn 的 真 子集 ， ≤ iii ≤ n ， 并且 i ≠ ii ≠ ii ≠ i 。 　 　 输出 ： DiDiDi 所 对应 的 维 数组 B 。 　 　 步骤 ： 　 ForII ｜ Di ｜ I 　 　 　 　 　 　 　 　 ForJJ ｜ Di ｜ J 　 　 　 　 　 　 　 　 　 　 ForKK ｜ Di ｜ K 　 　 　 　 　 　 　 　 　 　 B ［ I ］ ［ J ］ ［ K ］ 　 　 A ［ d ］ … ［ I ］ … ［ J ］ … ［ K ］ … ［ dn ］ 　 　 　 　 　 　 　 　 　 　 其中 dp ≠ Idp ≠ Jdp ≠ K 　 　 　 　 　 　 　 　 　 　 　 　 本 算法 可 改进 为 下面 的 NM 算法 ， 将 N 维 数据 立方 一次性 转换 为 M 维 数据 立方 （ MN ） 。 　 数据 立方 聚集 推广 算法 NM 算法 　 　 输入 ： 　 n 维 数组 A ［ DD … Dn ］ ， ｜ Di ｜ 为 第 i 维 的 长度 in 。 G 为 一 聚集 函数 。 DiDi … Dim 为 DD … Dn 的 真 子集 ， ≤ iii … im ≤ n ， 并且 i ≠ i ≠ im 。 　 　 输出 ： 　 计算 DiDi … Dim 所 对应 的 m （ mn ） 维 数组 B 　 　 步骤 ： 　 　 　 ForII ｜ Di ｜ I 　 　 　 ForJJ ｜ Di ｜ J 　 　 　 　 ForKK ｜ Di ｜ K 　 　 　 　 　 B ［ I ］ ［ J ］ ［ K ］ 　 　 　 　 　 A ［ d ］ … ［ I ］ … ［ J ］ … ［ K ］ … ［ dn ］ ， 　 　 　 　 　 其中 dp ≠ Idp ≠ Jdp ≠ K 　 　 　 　 　 　 N 的 扩展 算法 EN 算法 　 　 N 算法 计算 量 较大 ， IO 次数 较 多 ， 利用 外部 数据 单元 的 暂时 存放 聚集 计算 的 中间 值 ， 可以 把 效率 提高 一个 数量级 。 算法 要点 如下 ∶ 步骤 ： ① 分配 ｜ D ［ ］ ｜ ｜ D ［ ］ ｜ … ｜ D ［ n ］ ｜ 的 数组 空间 ； 　 　 ② 从 数组 A 中 取出 一个 数据 单元 a ［ j ］ ［ j ］ … ［ jn ］ ； 　 　 ③ 让 a ［ j ］ ［ j ］ … ［ jn ］ 分别 在 各个 维 相应 的 Sum 单元 中 投影 ， A ［ Sum ］ ［ j ］ … ［ jn ］ ， A ［ j ］ ［ Sum ］ … ［ jn ］ … … A ［ j ］ ［ j ］ … ［ Sum ］ ； 　 　 ④ 从 A 中 取出 下 一个 数据 单元 ， 执行 ③ ； 如果 没有 更 多 数据 单元 ， 跳转 ⑤ ； 　 　 ⑤ 计算 三维 数据 立方 ForII ｜ Di ｜ I 　 ForJJ ｜ Di ｜ J 　 　 ForKK ｜ Di ｜ K 　 　 B ［ I ］ ［ J ］ ［ K ］ A ［ Sum ］ … ［ I ］ … ［ J ］ … ［ K ］ … A ［ dp ］ 其中 dp ≠ Idp ≠ Jdp ≠ K 　 　 　 测试 　 　 测试数据 　 采用 了 加拿大 SimonFraser 大学 开发 的 商品化 数据 采掘 系统 DBMiner 所带 的 演示 数据 。 数据 存储 为 MicrosoftAccess 的 MDB 文件 。 包括 CategoryDetailedcategorynameregioncountrycitycostrevenuequantity ， time 等 个 字 段 ， 一共 有条 记录 。 　 　 软硬件 环境 　 WinPentiumCPU ， M 内存 。 　 　 测试 内容 　 建立 数据 立方 ， 作 聚集 计算 、 使用 采掘 周期 规律 。 　 　 主要 测试 结果 　 任意 选择 三个 维 （ 字 段 ） 来 建立 数据 立方 ， 如果 使用 N 算法 建造 数据 立方 大约 需要 分钟 的 时间 ； 而 使用 EN 算法 ， 大约 只 需要 分钟 的 时间 。 可见 EN 算法 比 N 算法 提高效率 一个 数量级 。 还 能 给出 出拟 周期 值 关于 采掘 周期 规律 的 算法 另文 叙述 。 注 ： 本文 研究 得到 国家自然科学基金 号 和 教育部 留学 回国 人员 启动 基金 资助 。 作者简介 ： 唐常杰 　 教授 。 杨峰 　 硕士 。 于 中华 　 相 利民 　 副教授 。 左 　 硕士 研究生 。 研究 方向 均 为 数据库 、 知识 工程 。 作者 单位 ： 四川大学 计算机系 　 四川 成都 （ ） 参考文献 ［ ］ 　 WHInmonBuildingtheDataWarehouseQEDTechnicalPublishingGroupWellesleyMassachusetts ［ ］ 　 RKimballTheDataWarehouseToolkitJohnWileySonsNewYork ［ ］ 　 SChaudhuriUDayalAnoverviewofdatawarehousingandOLAPtechnologyACMSIGMODRecord ［ ］ 　 RAgrawalRSrikantMiningsequentialpatternsInProcIntConfDataEngineeringMarch ［ ］ 　 唐常杰 等 从 Web 数据 中 采掘 逆 周期 规律 数据库 研究进展 — — 第十五届 全国 数据库 学术会议 论文集 ， 成都 ： ［ ］ 　 HongjunLuJiaweiHanStockMovementPredictionAndNDimensionalInterTransactionAssociationRulesSimonFraserUniversity 收稿 日期