软件 学报 JOURNALOFSOFTWARE 　 Vol 　 No 　 P 基于 SharedNothing 的 并行 Hash 连接 算法 效率 分析 李庆华 　 睢 海燕 　 邓冲 摘要 　 该文 研究 了 基于 SharedNothing 结构 的 几种 常用 并行 连接 算法 分析 了 影响 查询 响应 时间 的 各种因素 在 此基础 上以 多种 硬件 成分 作为 参数 建立 一个 代价 分析模型 使用 该 模型 计算 并行 Hash 算法 在 每个 处理机 上 的 平均 任务 执行 时间 和 总 的 查询 响应 时间 并 比较 了 几种 算法 在 不同 硬件 配置 下 的 执行 效率 所 提出 的 模型 和 分析方法 为 评价 和 选取 并行 连接 算法 提供 了 一种 可行 的 途径 关键词 　 查询 并行处理 并行 连接 查询 响应 时间 性能 评价 模型 中图法 分类号 　 TPAnalysisoftheEfficiencyofParallelHashJoinAlgorithmsBasedonSharedNothingLIQinghua 　 SUIHaiyan 　 DENGChongNationalHighPerformanceComputingCenterWuhan 　 LIQinghua 　 SUIHaiyan 　 DENGChongSchoolofComputerScienceandTechnologyHuazhongUniversityofScienceandTechnologyWuhan 　 Abstract 　 BasedonthesharednothingconstructionthevariousfactorswhichmayaffectthequeryrespondingtimeofparalleljoinalgorithmsareanalyzedAcostanalysismodelisproposedtocalculatetheaveragetaskexecutiontimeoneachprocessorandthetotalqueryrespondingtimeTheexecutionefficienciesofdifferentparallelHashalgorithmsbasedonthevariationofmemoryarecomparedThepresentedmodelandtheanalysismethodhaveprovidedafeasiblewaytoevaluateandchooseparalleljoinalgorithmsKeywords 　 Queryparallelprocessingparalleljoinqueryrespondingtimemodelofperformanceevaluation 　 　 多年 来 并行 连接 算法 一直 是 并行 查询 优化 中 的 一个 研究 热点 ［ ］ 人们 在 串行 算法 的 基础 上 已 提出 了 种 有效 的 并行 连接 算法 ： 并行 嵌套循环 （ nestloop ） 连接 算法 、 并行 排序 归并 （ sortmerge ） 连接 算法 和 并行 哈希 （ Hash ） 连接 算法 大量 文献 表明 ［ ］ 当 处理 相等 连接 、 关系 很大 且 内存 足够 大时 Hash 连接 算法 有 明显 的 优势 由于 其 高效性 和 容易 被 并行 化 的 特性 并行 Hash 连接 算法 的 研究 引起 了 人们 的 关注 相继 提出 了 多种 基于 Hash 的 并行 连接 算法 ［ ］ 　 　 基于 SNsharednothing 结构 如何 评价 一个 连接 算法 的 性能 如何 根据 实际 的 应用 选取 连接 算法 需要 一个 好 的 性能 评价 模型 然而 经 多年 研究 至今 尚未 提出 一个 能 被 广泛 接受 的 、 好 的 性能 评价 模型 　 　 本文 首先 研究 了 基于 SN 结构 的 SimpleHashGraceHashHybridHash 这种 并行 连接 算法 分析 了 影响 查询 响应 时间 的 各种因素 然后 以 多种 硬件 成分 作为 参数 建立 一个 代价 分析模型 使用 该 模型 来 计算 并行 Hash 算法 在 每个 处理机 上 的 平均 任务 执行 时间 和 查询 响应 时间 并 分析 了 内存容量 、 网络 传输速度 、 处理机 数等 硬件 参数 对 这种 算法 执行 效率 的 影响 从而 为 如何 评价 和 选取 并行 连接 算法 提供 了 一种 可行 的 途径 并行 Hash 连接 算法 　 　 假定 系统 中有 P 个 处理机 R 和 S 是 作 连接 运算 的 两个 关系 R 为 其中 较 小 的 关系 这种 算法 都 采用 散列 水平 划分 法 RiSi 分别 表示 处理机 i 上 的 R 分片 和 S 分片 实际 的 连接 运算 由 对 分块 建造 Hash 表 building 和 探测 匹配 元组 probing 实现 　 并行 SimpleHashJoin 算法 　 　 Stepl 处理机 iip 从 本地 磁盘 读取 Ri 对 其中 每个 元组 的 连接 属性 用 Hash 函数 h 进行 散列 ， 以 决定 其 处理机 号 j 如果 ji 则 将 其 放入 本地 的 写盘 缓冲区 否则 放入 相应 的 远程 处理机 的 通信 缓冲区 中当 缓冲区 满时 写 回 磁盘 或 向 远程 处理机 发送 同时 处理机 接收 并 合并 从 其余 P 个 处理机 发送 来 的 元组 在 这 一步 结束 时 关系 R 在 各个 处理机 间 重新分配 　 　 Step 以 同样 的 Hash 函数 在 各个 处理机 间重 分配 S 　 　 Step 各个 处理机 分别 定义 自己 的 Hash 函数 h 并行 地 做 SimpleHashJoin 最后 进行 结果 合并 　 并行 GraceHashJoin 算法 　 　 分配 阶段 　 　 Stepl 处理机 iip 从 本地 磁盘 读取 Ri 对 其中 每个 元组 的 连接 属性 用 Hash 函数 h 进行 散列 ， 以 决定 其 处理机 号 j 和 桶 号 k （ kBB 与 处理机 数 无关 只 需 保证 每个 桶 的 Hash 表 能够 装入 本地 的 内存 ） 若 它 属于 本 处理机 的 某个 桶 则 存入 相应 的 写盘 缓冲区 否则 放入 相应 的 远程 处理机 的 通信 缓冲区 中当 缓冲区 满时 写 回 磁盘 或 向 远程 处理机 发送 同时 处理机 接收 并 合并 从 其余 P 个 处理机 发送 来 的 桶 在 这 一步 结束 时 关系 R 在 各个 处理机 间 重新分配 　 　 Step 以 同样 的 Hash 函数 在 各个 处理机 间重 分配 S 　 　 连接 阶段 　 　 处理机 i （ ip ） pardo 　 　 ForjtoB 重复 StepStep 　 　 Step 从 磁盘 读出 R ′ ij 创建 Hash 表 　 　 Step 从 磁盘 读出 S ′ ij 用 每 一个 元组 探测 R ′ ij 的 Hash 表 输出 结果 　 并行 HybridHashJoin 算法 　 　 并行 HybridHashJoin 算法 和 并行 GraceHashJoin 算法 的 主要 区别 在于 ： GraceHashJoin 算法 在 第步 中 利用 多余 的 内存 来 存放 第个 桶 的 文件 而 HybridHashJoin 算法 则 利用 这片 内存 来 构造 第个 桶 的 Hash 表 因而 在 第步 S 中 属于 第个 桶 的 元组 可以 立刻 探测 内存 Hash 表而 无需 再 保存 于 临时文件 中 两个 算法 都 是 由 小 关系 的 大小 来 决定 桶 的 数量 　 　 分配 阶段 　 　 Stepl 处理机 iip 从 本地 磁盘 读取 Ri 对 其中 每个 元组 的 连接 属性 用 Hash 函数 h 进行 散列 ， 以 决定 其 处理机 号 j 用 函数 h 决定 其桶 号 k （ kBB 与 处理机 数 无关 只 需 保证 每个 桶 的 Hash 表 能够 装入 本地 的 内存 ） 若 它 属于 本 处理机 且 k 则 元组 插入 到 内存 的 Hash 表中 ； 若 属于 本 处理机 但 k ≠ 则 存入 相应 的 写盘 缓冲区 ； 若 不 属于 本 处理机 ， 则 放入 相应 的 远程 处理机 的 通信 缓冲区 中当 缓冲区 满时 写 回 磁盘 或 向 远程 处理机 发送 同时 处理机 接收 从 其余 P 个 处理机 发送 来 的 桶 用 函数 h 决定 其 插入 Hash 表中 或 写入 磁盘 在 这 一步 结束 时 关系 R 在 各个 处理机 间 重新分配 　 　 Step 以 同样 的 Hash 函数 划分 Si 若 属于 本 处理机 的 第个 桶 则 将 它 与 Ri 内存 Hash 表 匹配 连接 若 属于 本 处理机 的 其余 桶 则 存入 磁盘 若 属于 其他 处理机 则 发送到 相应 的 处理机 　 　 连接 阶段 　 　 处理机 i （ ip ） pardo 　 　 ForjtoB 重复 StepStep 　 　 Step 从 磁盘 读出 R ′ ij 创建 Hash 表 　 　 Step 从 磁盘 读出 S ′ ij 用 每 一个 元组 探测 R ′ ij 的 Hash 表 输出 结果 算法 的 响应 时间 分析 　 　 在 理想 情况 下 各个 处理机 承担 相同 的 任务 具有 相同 的 执行 时间 此时 查询 响应 时间 即 等于 任意 一个 处理机 上 的 任务 执行 时间 但是 由于 受 很多 因素 的 影响 某些 任务 在 完成 到 可以 提交 时 存在 一段时间 间隔 称为 同步 延时 导致 算法 同步 延时 的 因素 主要 有 数据偏斜 dataskew ， 它 包括 元组 放置 偏斜 、 选择 偏斜 、 重 分布 偏斜 、 乘积 偏斜 另外 ， 还有 一些 随机因素 ， 比如 因 数据 放在 不同 磁盘 的 不同 地方 而 导致 不同 的 数据 读取 时间 、 通信 网络 的 随机 通信 延迟 等 ［ ］ 　 　 用 Q ≤ Q ≤ 表示 数据分布 偏斜 Q 表示 关系 中含 最高 偏斜 属性 值 的 一个 片段 被 分配 到 一个 特定 的 桶 假定 关系 的 剩余 部分 在 属性 值上 的 分布 相对 均匀 当 处理机 个数 为 P 且 Q ≤ P 时 可 视为 无 偏斜 否则 有 偏斜 i 表示 任一 处理机 号 ； k 表示 接受 偏斜 桶 的 处理机 号 ； j 表示 不同于 k 的 任一 处理机 号 ； T 表示 查询 响应 时间 ； Ti 表示 处理机 i 上 的 平均 任务 执行 时间 ； Ticpu 表示 处理机 i 上 的 cpu 时间 由 cpu 处理 元组 时间 处理 物理 IO 时间 和 cpu 处理机 间通信 时间 组成 ； Tidisk 表示 处理机 i 上 的 磁盘 传输 时间 ； Tinet 表示 处理机 i 上 的 网络 传输 时间 　 　 根据 在 第节 中 所 描述 的 算法 在 流水线 并行 的 情况 下 处理机 i 上 的 平均 查询 响应 时间 Ti 近似 为 TiMAXTicpuTidiskTinet 整个 系统 的 查询 响应 时间 为 算法 的 代价 公式 　 　 以往 对于 并行 连接 算法 的 研究 模式 是 提出 一种 改进 的 并行算法 然后 对 它 进行 性能 分析 ［ ］ 在 这种 模式 中 代价 分析 处于 被动 地位 而且 分析方法 比较 片面 对 影响 算法 的 因素 考虑 不全 在 本文 中 ， 我们 从 一个 新 的 角度 出发 建立 一种 代价 分析模型 用 这种 模型 来 评价 并 选择 合适 的 并行 连接 算法 我们 将 综合 考虑 影响 查询 响应 时间 的 诸多 因素 建立 一个 基于 多种 硬件 参数 的 代价 分析模型 定性 地 推导 种 Hash 连接 算法 的 代价 公式 模型 中 描述 了 系统 个 主要 资源 （ CPUIO 和 互联网 ） 的 重叠 刻画 了 数据偏斜 （ 包括 重 分布 偏斜 和 乘积 偏斜 ） 和 同步 延迟 等 因素 对 执行 效率 的 影响 利用 本文 提出 的 代价 模型 我们 可以 分析 并行 连接 算法 在 各种 硬件 配置 下 的 执行 效率 为 查询 优化 中 并行 连接 算法 的 选取 提供 理论依据 对 新 的 连接 算法 设计 也 具有 一定 的 指导意义 　 参数 配置 　 　 P 表示 处理机 数 ； μ 表示 处理机 速度 （ cpu 每秒 执行 指令 数 ； M 表示 每个 处理机 的 可用内存 ； RS 表示 参与 连接 的 关系 ； β 表示 连接 选取 率 ； γ 表示 内存 与 小 关系 的 比率 ； H 表示 散 列表 膨胀系数 ； RiSi 表示 初始 库 划分 后 处理机 i 上 的 R 和 S 片段 ； R ′ iS ′ i 表示 数据 重新分配 后 处理机 i 上 用来 作 连接 的 Hash 桶 ； Fi 表示 在 有 各种 输出 缓冲区 的 情况 下 R ′ i 的 Hash 表可 被 装入 内存 的 部分 ； Tio 表示 磁盘 传送 时间 （ 以页 为 单位 ） ； Tnet 表示 网络 传送 时间 （ 以页 为 单位 ） ； Id 表示 启动 一次 IO 的 路径 长 （ 指令 数 ； Icomm 表示 在 网络 上 交换 一次 消息 的 路径 长 ； Icomp 表示 比较 两个 属性 的 路径 长 ； IHash 表示 计算 属性 值 的 散列值 的 路径 长 ； Ibuild 表示 构造 一个 连接 输出 元组 的 路径 长 ； Imove 表示 在 内存 中 移动 一个 元组 的 路径 长 ； ｜ X ｜ 表示 X 中 的 页数 ； ｛ X ｝ 表示 X 中 的 元组 数 　 并行 Hash 算法 代价 公式 　 　 并行 HybridHash 算法 第 阶段 IO 存取 页面 数 ： Nio ｜ Ri ｜ ｜ Si ｜ Fi ｜ R ′ i ｜ ｜ S ′ i ｜ 　 上标 表示 阶段 下同 　 　 IO 存取时间 ： TidiskNioTio 　 　 从 网络 发送 和 接受 的 页面 数 ： Nnet ｜ Ri ｜ ｜ Si ｜ pp ｜ R ′ i ｜ ｜ S ′ i ｜ 　 　 网络 传送 时间 ： TinetNnetTnet 　 　 CPU 处理 元组 时间 ： Ticpu ｛ Ri ｝ ｛ Si ｝ ｛ R ′ i ｝ ｛ S ′ i ｝ IHashImove μ NioId μ NnetIcomm μ 说明 ： 为 方便 计算 将 连接 运算 的 时间 统一 在 第 阶段 来 计算 　 　 第 阶段 　 　 IO 存取 页面 数 ： NioFi ｜ R ′ i ｜ ｜ S ′ i ｜ 　 　 IO 处理 元组 时间 ： TidiskNioTio 　 　 CPU 处理 元组 时间 ： TicpuFi ｛ R ′ i ｝ ｛ S ′ i ｝ IHashImove μ S ′ i ｝ HIcomp μ ｛ R ′ i ｝ ｛ S ′ i ｝ β Ibuild μ NioId μ 因而 最终 处理机 上 的 IO 存取时间 ： Tidisk ｜ Ri ｜ ｜ Si ｜ Fi ｜ R ′ i ｜ ｜ S ′ i ｜ Tio 　 　 网络 传送 时间 ： Ninet ｜ Ri ｜ ｜ Si ｜ ppTnet 　 　 CPU 处理 元组 时间 ： Ticpu ｛ Ri ｝ ｛ Si ｝ Fi ｛ R ′ i ｝ ＋ ｛ S ′ i ｝ IHashImove μ ｛ S ′ i ｝ HIcomp μ ＋ 　 　 ｛ R ′ i ｝ ｛ S ′ i ｝ β Ibuild μ ｜ Ri ｜ ｜ Si ｜ Fi ｜ R ′ i ｜ ｜ S ′ i ｜ Id μ ＋ 　 　 ｜ Ri ｜ ｜ Si ｜ pp ｜ R ′ i ｜ ｜ S ′ i ｜ Icomm μ GraceHash 算法 处理机 i 上 的 IO 存取时间 ： Tidisk ｜ Ri ｜ ｜ Si ｜ ｜ R ′ i ｜ ｜ S ′ i ｜ Tio 　 　 网络 传送 时间 ： Tinet ｜ Ri ｜ ｜ Si ｜ ppTnet 　 　 CPU 处理 元组 时间 ： Ticpu ｛ Ri ｝ ｛ Si ｝ ｛ R ′ i ｝ ｛ S ′ i ｝ IHashImove μ ｛ S ′ i ｝ HIcomp μ ＋ 　 　 ｛ R ′ i ｝ ｛ S ′ i ｝ β Ibuild μ ｜ Ri ｜ ｜ Si ｜ ｜ R ′ i ｜ ｜ S ′ i ｜ Id μ ＋ 　 　 ｜ Ri ｜ ｜ Si ｜ pp ｜ R ′ i ｜ ｜ S ′ i ｜ Icomm μ 并行 Simple 算法 　 　 处理机 i 上 的 IO 存取时间 ： Tidisk ｜ Ri ｜ ｜ Si ｜ γ ｜ R ′ i ｜ ｜ S ′ i ｜ Tio 　 　 网络 传送 时间 ： Tinet ｜ Ri ｜ ｜ Si ｜ ppTnet 　 　 CPU 处理 元组 时间 ： Ticpu ｛ Ri ｝ ｛ Si ｝ γ ｛ R ′ i ｝ ｛ S ′ i ｝ IHashImove μ ＋ 　 　 γ ｛ Si ｝ HIcomp μ ｛ R ′ i ｝ ｛ S ′ ｝ β Ibuild μ ＋ 　 　 ｜ Ri ｜ ｜ Si ｜ γ ｜ R ′ i ｜ ｜ S ′ i ｜ ） Id μ ＋ 　 　 ｜ Ri ｜ ｜ Si ｜ pp ｜ R ′ i ｜ ｜ S ′ i ｜ Icomm μ 结 　 论 　 　 在 这 一节 中 我们 将 定性 地 分析 上 节 推导 出 的 公式 比较 种 连接 算法 在 不同 主存 容量 、 不同 处理机 个数 、 不同 网络 传输率 和 数据偏斜 时 的 执行 效率 从中 得到 一组 有 意义 的 结论 我们 以 自行 研制 的 “ 并行 数据库 查询 系统 ” 为 支撑 ［ ］ 在 以 多台 微机 连成 的 局域网 上 进行 了 大量 模拟实验 用 Wisconsinbenchmark 基准 测试 得到 的 并行 连接 算法 性能 曲线 证明 本文 中 所 建立 的 代价 分析模型 是 合理 的 运用 这个 模型 可以 方便 地 寻找 系统资源 并行度 的 平衡点 发现 影响 算法 性能 的 瓶颈 之 所在 因而 这种 模型 和 分析方法 为 评价 和 选取 并行算法 提供 了 一条 可行 的 途径 在 Wisconsinbenchmark 基准 测试 中 连接 两个 关系 R 和 SR 含有 一万条 元组 每条 元组 有 Bytes ） S 含有 万条 元组 （ 每条 元组 有 Bytes ） 　 主存 容量 对 算法 响应 时间 的 影响 　 　 ） HybridHashJoin 算法 始终 有 较 高 的 执行 效率 　 　 ） SimpleHashJoin 和 HybridHashJoin 算法 都 是 对 内存 敏感 的 算法 当 内存 与 小 关系 的 比率 γ 从 到 变化 时 算法 的 执行 时间 都 会 减少 当小 关系 可 全部 置入 内存 时 两个 算法 都 有 相同 的 执行 时间 当 γ 从降 至 时 在 HybridHashJoin 算法 中 意味着 有 一半 的 关系 要 写 回 磁盘 当 γ 降 至 以下 时 SimpleHashJoin 算法 需 将 相同 记录 重复 写回 磁盘 效率 急剧 降低 　 　 ） GraceHashJoin 算法 对 内存 不 敏感 当 内存 减少 时 连接 阶段 划分 的 桶 数 B 增大 而桶 数 增加 意味着 增加 一个 小 的 调度 开销 在 γ 降 至 以下 后 GraceHashJoin 与 HybridHashJoin 算法 应有 近似 相同 的 响应 时间 　 　 ） 运行 HybridHashJoin 算法 要求 每个 处理机 的 最小 内存 量 为 ｜ R ′ i ｜ 低于 这个 值 算法 不能 启动 以后 随着 内存 的 增加 执行 时间 降低 当 内存 增至 与 R ′ i 一样 大时 执行 时间 明显降低 此后 再 增大 内存 执行 时间 的 变换 趋于 平缓 这一 结论 意味着 只要 处理机 内存 满足 最低 启动 点 加上 一些 缓冲 开销 可 将 多余 内存 满足 其他 应用 也 不致 过分 损害 算法 的 性能 　 　 图 刻画 了 γ 在 从 到 变化 时种 算法 的 响应 时间 FigThecomparisonofthreealgorithmsresponsetime 图 　 种 算法 的 响应 时间 比较 　 互连网 传输率 对 算法 响应 时间 的 影响 　 　 从 代价 公式 可以 看出 种 算法 的 网络 传输 时间 相同 因而 在 互连网 传输率 变化 时 性能 曲线 有 近似 相同 的 变化趋势 　 　 ） 在 高性能 互连网 中 网络带宽 随 处理机 规模 接近 线性 增加 因而 只有 在 网络 传输率 较 低时 算法 表现 为 网络 受限 执行 时间 随 传输率 的 增大 而 减小 在 一个 特定 点 以后 算法 成为 CPU 受限 增大 传输率 对 执行 时间 没有 影响 　 　 ） 对于 总线 式 互连网 网络带宽 在 所有 处理机 之间 共享 且 不 随 处理机 数目 增加 而 增大 当 处理机 数目 很大 时 算法 将 始终 表现 为 网络 受限 执行 时间 随着 传输率 的 增大 而 线性 降低 远远 高于 同样 条件 下 高性能 互连网 的 执行 时间 　 　 ） 基于 总线 式 互连网 结构 的 并行 系统 用于 并行 连接 查询 的 效率 很 低 　 　 图 a 刻画 了 在 高性能 互连网 中当 网络 传输率 增加 时 HybridHashJoin 算法 响应 时间 的 变化趋势 图 b 刻画 了 在 单总线 结构 中当 网络 传输率 增加 时 HybridHashJoin 算法 响应 时间 的 变化趋势 FigTheresponsetimeatdifferentnetworktransferrateintheparallelHybridHashJoinalgorithm 图 　 并行 HybridHashJoin 算法 网络 传输率 与 响应 时间 的 关系 　 处理机 数对 算法 响应 时间 的 影响 　 　 ） 在 高性能 互连 网络 中当 处理机 数较 小时 算法 是 网络 受限 增大 处理机 数 执行 时间 会 减少 以后 随着 处理机 数 的 增加 算法 成为 CPU 受限 的 处理机 数 增加 意味着 增加 系统 的 并行处理 能力 算法 的 执行 时间 应有 线性 加速 　 　 ） 在 SN 结构 中 在 具有 大量 处理机 的 并行 系统 中 关系 全 分段策略 并 不是 适当 的 方法 文献 ［ ］ 中 定义 最优 并行度 n 为 使 一个 操作 的 并行执行 具有 最小 响应 时间 的 处理机 数 最优 加速 比 s 为 一个 操作 以 最优 并行度 并行执行 时 的 加速 比令 N 表示 关系 中 元组 数目 C 表示 处理 一个 元组 所 需 的 时间 S 表示 调度 器 启动 一个 进程 花费 的 时间 则 noCNSsn 可以 看到 最优 并行度 与 系统 参数 有关 而 最大 加速 比 只能 是 这个 数目 的 一半 　 　 图 刻画 了 在 处理机 数 增加 时 HybridHashJoin 算法 响应 时间 的 变化趋势 FigTheresponsetimeinvariousnumberofprocessorsintheparallelHybridHashJoinalgorithm 图 并行 HybridHashJoin 算法 处理机 数 与 响应 时间 的 关系 　 IO 与 CPU 并行度 的 影响 　 　 从 上节 的 代价 公式 可知 IO 与 CPU 并行度 之间 存在 一个 平衡点 在 一定 范围 内 算法 是 IO 受限 的 增加 每个 处理机 内 的 磁盘 数 ， 即 增加 磁盘 的 并行度 可 显著 减少 算法 响应 时间 这一 结论 告诉 我们 ， 分层 并行 结构 对 并行 连接 操作 是 可行 的 结构 　 数据偏斜 对 算法 响应 时间 的 影响 　 　 ） 数据偏斜 对 算法 效率 有 严重 影响 算法 的 执行 时间 总是 由 偏斜 最 严重 的 那个 处理机 的 执行 时间 决定 　 　 ） 在 分配 阶段 后 ， 如果 一个 处理机 得到 大量 元组 则 可能 发生 桶 溢出 现象 因而 如果 内存 较大 使得 关系 无需 分桶 可 减少 数据偏斜 带来 的 影响 本文 研究 得到 国家 高科技 项目 基金 NoZD 资助 作者 李庆华 年生 教授 博士生 导师 ， 主要 研究 领域 为 并行处理 与 高性能 计算 分布式系统 智能 软件 睢 海燕 女年生 硕士生 主要 研究 领域 为 并行处理 与 高性能 计算 分布式系统 邓冲 女 ， 年生 工程师 ， 主要 研究 领域 为 并行处理 本文 通讯联系 人 李庆华 武汉 华中理工大学 计算机 学院 作者 单位 ： 李庆华 国家 高性能 计算中心 　 武汉 　 睢 海燕 国家 高性能 计算中心 　 武汉 　 邓冲 国家 高性能 计算中心 　 武汉 　 李庆华 华中理工大学 计算机 学院 　 武汉 　 睢 海燕 华中理工大学 计算机 学院 　 武汉 　 邓冲 华中理工大学 计算机 学院 　 武汉 　 参考文献 ， DeWittDJAmultiprocessororganizationforsupportingrelationaldatabasemanagementsystemsIEEETransactionsonComputers ～ ， BitonDParallelalgorithmsfortheexecutionofrelationaldatabaseoperationACMTransactionsonDatabaseSystems ～ ， YangLiParallelexecutionforcomplexqueryandimplementationtechniquesforparalleldatabasesystems ［ PhDThesis ］ ChangshaNationalUniversityofDefenseTechnology 杨利 复杂 查询 并行执行 及 并行 数据库系统 实现 技术 的 研究 ［ 博士学位 论文 ］ 长沙 国防科技大学 ， SchneiderDADewittAperformanceevaluationoffourparalleljoinalgorithmsinasharednothingmultiprocessorenvironmentInMaierDedProceedingsoftheACMSIGMODBaltimoreACMPress ～ ， ChenMSYuPSSchedulingandprocessorallocationforparallelexecutionofmultijoinqueriesInIEEEComputerSocietyedProceedingsofthethInternationalConferenceonDataEngineeringTempeArizonaLosAlamitos ： IEEEComputerSocietyPress ～ ， WaltonBAtaxnomyandperformancemodelofdataskeweffectsinparalleljoinsInLohmanGMedProceedingsoftheVeryLargeDataBaseCA ： MorganKaufmannPublishersInc ～ ， SeethaSLakshmiPhilipSYuEffectivenessofparalleljoinsIEEETransactionsonKnowledgeandDataEngineering ～ ， LiQinghuaGaoYanDengChongetalResearchonparallelquerysystemindatabaseonMIMDmodelHighTechnologyLetters ～ 李庆华 高燕 邓冲 等 MIMD 模型 上 的 数据库 并行 查询 系统 高技术 通讯 ～ 本文 收到 原稿 收到 修改稿