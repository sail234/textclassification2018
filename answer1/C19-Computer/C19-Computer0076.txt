计算机 工程 COMPUTERENGINEERING 年 第卷 第期 VolNo 系统安全 检测 的 研究 及 应用 刘淳 ， 汪为 农 摘要 ： 描述 了 一种 系统安全 的 模型 ， 并 对 应用程序 作 了 形式 上 的 描述 。 基于 以上 两点 ， 设计 实现 了 Unix 下 的 一个 基于 规则 的 安全 检测工具 通过 模型 （ 系统 和 应用程序 ） 的 建立 ， 对 主机 系统 的 分析 和 一组 规则 的 使用 ， 模拟系统 中 特权 流 和 信息流 的 相互作用 。 关键词 ： 系统安全 ； 风险 ； 模型 ； 检测 ； 基于 规则 ResearchofSystemSecurityCheckandApplicationLiuChunWangWeinongDepartmentofComputerShanghaiJiaotongUniversityShanghai 【 Abstract 】 HerewepresentaformalmodelofsystemsecurityThekeyimprovementisthedescriptionofinteractionbeweensubjectsandobjectInadditionwepresentformaldescriptionofsystemapplicationsespeciallyprivilegedprogramsBasedonthemodelandprogramdescriptionwedesignandimplementarulebasedsecuritychecdtoolonUnixBymodelingofthesystemanalyzingthetargethostandusingofrulesthesecurityofthetargethostcanbeconsideredinawhole 【 Keywords 】 SystemsecurityRiskModelCheckRulebased 操作系统 安全 模型 　 　 Unix 是 个 较 安全 的 系统 ， 有 一定 的 安全 机制 ， 如 身份验证 用户 口令 和 权限 控制 等 ； 同时 Unix 又 是 个 相当 复杂 的 系统 ， 许多 程序 协同工作 ， 其中 就 有 不少 特权 程序 。 图 给出 了 Unix 系统 特权 的 一个 简化 模型 ， 对 其他 的 操作系统 也 是 适用 的 。 图 Unix 系统 特权 的 简化 模型 　 　 最底层 是 操作系统 核心 ， 管理 所有 的 资源 如 内存 ， 磁盘 ， 文件 ， CPU 。 资源 只能 通过 系统 调用 来 访问 。 核心 通常 提供 对 资源 的 保护 机制 ， 所以 顶层 的 用户 进程 行为 被 核心 所 约束 ， 防止 了 违反 安全 的 操作 。 然而 ， 一个 系统 通常 还 包括 特权 进程 中层 ， 为了 完成 其 功能 可以 绕过 核心 的 安全 机制 。 这些 特权 进程 ， 都 有 自己 的 安全 机制 ， 防止 被 滥用 。 核心 加上 特权 进程 ， 构成 了 整个 系统 的 安全 保护 系统 。 该 安全 保护 系统 各 模块 之间 的 相互 联系 和 依赖 关系 是 如此 复杂 ， 对于 用户 来说 ， 了解 安全 保护 系统 各 部分 之间 的 联系 ， 并 使 安全 系统 正常 工作 ， 并非 是 一种 容易 的 事情 。 “ 管理 Unix 是 一种 艺术 ” 。 因此 ， 需要 一种 自动 工具 来 分析 Unix 系统 的 安全 状况 。 　 　 在 BLP 模型 中 ， 主体 Subject 是 绝对 主动 的 ， 而 对象 Object 是 绝对 被动 的 。 用 BLP 模型 来 描述 Unix 的 错综复杂 的 安全 保护 系统 时 ， 就 会 遇到困难 。 这 主要 是因为 Unix 的 应用程序 有 自己 的 行为 方式 ， 对 各 应用程序 来说 ， 有 许多 默认 的 文件 是 控制 驱动 应用程序 的 。 也就是说 ： 主体 和 对象 之间 的 关系 不仅仅 是 单向 的 主体 对 对象 的 Read 、 Write 、 Execute 、 Chmod 等 ， 还有 对象 对 主体 的 Control 。 安全 模型 的 数学 描述 　 　 考虑 到 实际 操作系统 中 主体 与 对象 之间 相互 制约 的 关系 ， 提出 以 〈 主体 ， 对象 ， 关系 〉 为 主要 元素 的 安全 模型 ， 系统 定义 为 B × M × H 。 其中 ： 　 　 B 是 S × T × R × O 的 子集 ； 　 　 M 是 系统 的 存取控制 矩阵 ， 在 这里 ， 不 考虑 主体 与 对象 之间 的 时间 相关性 ； 　 　 H 是 对象 的 树形 结构 ； 　 　 S ： 主体 ， 由序 偶 〈 User ， Program 〉 构成 ， 其 空间 、 时间 的 相关性 由 TR 给出 ； 　 　 T ： 一组 顺序 关系 ， 表示 主体 与 客体 之间 关系 的 时间 特性 ， 可 看成 是 一组 时间 点 ； 　 　 R ： 关系 。 这里 ， 关系 不仅仅 是 单向 的 Subject 对 Object 的 操作 ， 如 ReadBind ， Write ， Create ， Remove 等 ， 还有 Object 对 Subject 的 关系 ， 如 Control ， 以及 以上 各 关系 的 闭包 ： Read ， Write ， Control ； 　 　 O ： 对象 ， 可以 是 文件 ， 设备 包括 磁盘 ， 内存 映像 ， 网络 端口号 ， TTY 终端 ， X 窗口 等 。 直接存取 关系 　 　 Read ， Write ， Scan ， Create ， Chmod 关系 的 定义 考虑 的 是 信息流 的 操作 ， Control 关系 的 定义 考虑 的 是 特权 流控制 流 的 操作 。 ReadWriteCreateControl 的 定义 及图 例如 下 ： 　 　 定义 主体 SiCanRead 对象 Om ， 记为 CanReadSiOm ， 　 　 定义 主体 SiCanWrite 对象 Om ， 记为 CanWriteSiOm ， 　 　 定义 对象 OmControl 主体 Si ， 记为 ControlBySiOm ， 　 　 定义 表明 ： 在 系统 中 ， 主体 和 对象 的 相关性 ， 不仅仅 表现 在 主体 可 ReadWrite 对象 ， 还 表现 为 对象 控制 主体 。 　 　 定义 主体 SiCanScan 对象 Om ， 记为 CanScanSiOm ， 这是 Unix 的 特性 ， 在 其他 基于 树形 目录 结构 的 操作系统 中 ， 如 Novell 、 WindowsNT ， 也 是 适用 的 。 　 　 以上 几点 ， 说明 了 主体 Si 对 对象 Om 所 拥有 的 权限 ， 但 主体 Si 对 对象 Om 实际 访问 情况 还 依赖于 对象 的 树形 结构 。 目录 结构 兼容性 　 　 在 实际 的 操作系统 中 ， 设备 与 文件系统 是 以 树形 结构 存储 的 。 Unix 的 文件系统 是 典型 的 例子 ： 　 　 定义 ： 对象 Op 是 Ot 的 父亲 ， 记为 ParentOpOt 。 　 　 其中 ， 与 目录 结构 相关 的 安全 规则 限制 是 ： 　 　 RuleD ： ScanSiOp ∧ CanScanSiOt ∧ ParentOpOtScanSiOt ； 　 　 RuleD ： ScanSiOp ∧ CanReadSiOt ∧ ParentOpOtReadSiOt ； 　 　 RuleD ： ScanSiOp ∧ CanWriteSiOt ∧ ParentOpOtWriteSiOt 。 　 　 即 Si 只有 在 访问 Ot 的 父 目录 时 ， 才 能够 访问 Ot 。 　 　 RuleD ： ScanSiOp ∧ CanWriteSiOp ∧ ParentOpOtWriteSiOt 。 如果 Si 能够 写 Ot 的 父 目录 ， 则 Si 能够 替换 Ot ， 可以 认为 Si 能够 写 Ot 。 用户 bin 可以 写 etc ， 就 可以 替换 etcpasswd 。 间接 存取 关系 　 　 所有 的 间接 存取 关系 都 是从 直接存取 关系 和 主体 与 对象 之间 相互 制约 关系 演化 而 来 。 　 　 间接 ReadIndirectRead ， 记为 readSiVm ， 　 　 规则 WriteSmOi ∧ ReadSnOiReadSnSm 　 　 规则 WriteSmOi ∧ ReadSnOiReadSnSm 　 　 间接 WriteIndirectWrite ， 记为 writeSiVm ， 　 　 规则 ReadReadControlByControlBySiOm ∧ WriteSiOnWriteOmOn 　 　 规则 ReadControlBySiSm ∧ WriteSiOnWriteSmOn 　 　 间接 ControlByIndirectControlBy ， 记为 ControlBySiVm ， 　 　 规则 WriteWriteSmOi ∧ ControlBySnOiControlBySnSm 　 　 规则 WriteOiOm ∧ ControlBySiOmControlBySiOi 特权 程序 模型 化 　 　 基于 以上 的 模型 ， 可以 对 特权 程序 建模 ， 并 描述 其 行为 。 这 对于 检测 和 监测 都 很 有 帮助 。 使用 特权 程序 的 模板 ， 对于 检测 来说 ， 可以 较 精确 地 估计 该 程序 的 行为 后果 ， 配合 主体 与 客体 间 相互依赖 的 关系 ， 估计 出 系统 中 信息 的 流向 ， 对系统 的 安全 情况 作出 判断 ； 对于 监测 来说 ， 可以 及时发现 特权 程序 的 “ 越权 ” 行为 ， 以便 作出 相应 的 制止 措施 。 　 　 一个 特权 程序 可以 被 描述 为 一系列 与 对象 的 关系 ： 　 　 即 ： 〈 时间 点 关系 ， 对象 〉 。 在 当前 的 模型 中 ， 考虑 到 父子 进程 功能 的 相似性 ， 就 不 考虑 是否 生成 子 进程 。 　 　 Sendmail 可以 被 描述 为 ： 　 　 ProgramSendmail 　 　 bindportreadport 　 　 controledbysendmailaliasesfile 　 　 controledbyHOMEmailrc 　 　 readEverythingcanberead 　 　 writemailqueue 　 　 writeeachusersmailspoolievarspoolLOGINNAME 　 　 END 攻击 的 描述 　 　 基于 以上 的 模型 和 规则 ， 可以 归纳 出 一种 攻击 的 模型 ， 如图所示 。 图 攻击 模型 安全 检测工具 的 实现 　 　 基于 上面 的 模型 ， 构造 Unix 系统 的 安全 检测工具 ， 主要 由 以下 几 部分 构成 ： 　 　 基本 文件系统 BaselineFilesystem 权限 的 检查 。 　 　 网络服务 系统配置 信息 的 搜集 。 　 　 关键 应用程序 已知 Bug 的 检测 。 　 　 规则 库 、 应用程序 模板 。 　 　 规则 匹配 ， 计算 模拟 攻击 。 　 　 对 得到 的 结果 进行 过滤 ， 输出 结果 图 安全 检测工具 的 实现 　 　 程序 一旦 发现 危险 的 配置 或 Bug ， 就 生成 一组 修正 后 的 关系 。 用来 逼近 真实 系统 的 表现 。 如 ： 　 　 发现 NFS 是 无 限制 输出 home ， 则 加入 修正 关系 ： 　 　 anyhostanybodywritehome 　 　 anyhostanybodyreadhome 　 　 发现 hostseuqiv 中有 ＋ ， 加入 关系 ： 　 　 anyhostanybodycontrollocalhostftpbinsh 基本 文件系统 权限 的 检查 　 　 基本 文件 信息 包括 关键 文件类型 、 属主 、 所属 组 、 权限 模式 、 长度 、 校验 和 等 ， 由 “ 规则 匹配 模拟 攻击 ” 模块 完成 后继 的 工作 。 网络服务 系统配置 信息 的 检查 　 　 主要 检查 以下 方面 ： 　 　 不 安全 的 服务程序 ： 检查 inetd 是否 允许 网络 用户 访问 那些 公认 的 不 安全 网络服务 。 如 rexd ， rshd ， TFTP 等 。 　 　 NFS 文件系统 的 配置 ： 检查 没有 限制 的 输出 ， 关键 文件系统 的 输出 。 　 　 Sendmail 已知 的 Bugs 、 特洛伊木马 等 安全漏洞 ， 检查 是否 有 uudecodedecode 宏 ； VRFY 和 EXPN 是否 被 启动 ； WIZ 和 DEBUG 是否 激活 。 　 　 对于 以上 的 检查 结果 ， 程序 生成 一组 修正 过 的 关系 。 应用程序 中 已知 BUG 的 检查 　 　 主要 检查 应用程序 的 Bug ， 其 依据 是 程序 的 时间 戳 。 使用 Bug 库来 检查 各 特权 应用程序 的 Bug 。 如年 月 以前 的 Sendmail 程序 有 WIZ 命令 ， 可以 使 入侵者 得到 rootshell 。 规则 库 与 应用程序 模板 　 　 规则 库是 内定 的 一组 攻击 规则 ， 在 “ 规则 匹配 模拟 攻击 ” 模块 中 映射 到 每个 可能 的 关系 上 ， 作为 对 关系 的 修正 。 其中 有 一些 内定 的 安全 规则 如 ： 　 　 iflocalhostUSERwritedevkmemlocalhostUSERSHELLcontrollocalhostrootbincsh 　 　 ifanyhostanybodyreadetcpasswdanyhostanybodycontrollocalhostrootbincsh 后者 表示 的 是 当 匿名 者 得到 etcpasswd 后 ， 最坏 情况 下 ， 可以 破解 root 的 口令 ， 从而 得到 root 的 shell 。 　 　 应用程序 模板 ， 描述 应用程序 与 对象 的 交互 关系 。 在 本 工具 的 实现 中 ， 使用 的 是 上述 模型 的 简化 版本 ， 其 格式 是 ： 　 　 程序 名称 全 路径 的 文件名 　 　 ControledBy 控制 该 程序 的 文件 　 　 ReadableArea 可以 读取 的 文件 　 　 WritableArea 应该 写入 的 文件 　 　 ExecutableSubject 可以 激活 Active 其他 的 程序 规则 匹配 和 模拟 攻击 　 　 读取 关系 的 修正 ， 作用 于 关系 库 ， 然后 对 整个 系统 中 主体 与 对象 的 关系 作出 模拟 攻击 的 运算 。 　 　 模拟 攻击 所 使用 的 规则 是 ： 　 　 WriteSmOi ∧ ReadSnOiReadSnSm 　 　 WriteOmOi ∧ ReadSnOiReadSnOm 　 　 ReadReadControlByControlBySiOm ∧ WriteSiOnWriteOmOn 　 　 ReadControlBySiOm ∧ WriteSiOnWriteSmOn 　 　 WriteWriteSmOi ∧ ControlBySnOiControlBySnSm 　 　 WriteOiOm ∧ ControlBySiOmControlBySiOi 结果 的 过滤 和 输出 　 　 计算 的 结果 是 一个 庞大 的 矩阵 ， 表示 系统 中 可能 的 漏洞 全部 被 激发 后 的 情况 。 必须 将 其中 有害 于 系统安全 的 信息 过滤出来 ， 以便 于 系统 管理者 分析 。 这里 也 需要 一些 规则 ， 目前 的 规则 是 ： 若 一 用户 能够 写 不 属于 自己 的 文件 ， 若 一 用户 的 程序 主体 能够 控制 不 属于 自己 的 程序 。 以上 两种 情况 都 应 输出 。 作者 单位 ： 上海交通大学 计算机系 ， 上海 参考文献 ShiehSWGligorVDAPatternorientedIntrusiondetctionModelandItsApplicationsInIEEESymposiumonResearchSecurityandPrivacyOaklandKoCFinkGLevittKAutomatedDetectionofVulnerabilitiesinPrivilegedProgramsbyExecutionMonitoringInComputerSecurityApplicationsConferenceOrlandoFloridaCuppensFALogicalAnalysisofAuthorizedandProhibitedInformationFlowsInIEEESymposiumonResearchinSecurityandPrivacyOaklandSnyderLFormalModelsofCapabilitybasedProtectionSystemsInIEEETransactionsonComputersCurryDAImprovingtheSecurityofYourUnixSystemSRInternationalITSTDFRPadulaBLetalSecureComputerSystemAMathematicalModelMTRPadulaBLSecureComputerSystemAMarhematicalModel