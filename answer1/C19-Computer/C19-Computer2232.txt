计算机 应用 研究 APPLICATIONRESEARCHOFCOMPUTERSVolNoP 软件 成本 模型 的 理论 研究 与 工具 开发 徐克 奇摘 　 要 ： 首先 研究 和 分析 了 FunctionPointAnalysis 的 特点 ， FPA 是 一种 软件 成本 功能 度量 方法 ， 可 很 好 地 运用 于 信息管理系统 ManagementInformationSystem ， MIS 领域 ， 但是 FPA 不能 很 好 地 捕获 作 高强度 处理 的 应用程序 的 功能 特性 ， 比如 实时 软件 的 动态 与 控制 功能 。 随后 围绕 着 如何 改进 FPA ， 使 其 也 适用 于 实时 控制系统 展开 论述 。 另外 ， 文中 提出 了 两种 Metrics 结合 的 方法 ， 即 FPA 和 COCOMO 结合 ， 并 给出 一个 实例 ： 建立 软件 成本 模型 后 ， 在 WebServer 上 开发 一个 成本 估算 工具 SCET 。 关键词 ： 成本 模型 FPA 信息管理系统 实时 系统 软件工具 数据库系统 　 　 随着 计算机 应用 的 普及 和 发展 ， 计算机软件 已 成为 整个 计算机系统 中 的 开发 费用 最 昂贵 部分 。 软件 开发者 和 应用 者 越来越 重视 和 关心 软件 成本 问题 ， 尤其 是 美国 、 德国 等 一些 技术 先进 和 经济 发达 的 国家 特别 重视 。 他们 先后 推出 了 许多 软件 成本 估算 的 方法 ， “ FunctionPointAnalysis ” 是 其中 的 一种 。 　 FunctionPointAnalysis 简述 　 　 FPA 是 一种 软件 成本 的 功能 度量 方法 ， 是 对 计算机 应用软件 以及 制作 它们 的 工程项目 大小 的 度量 ， 其 大小 由 项目 的 功能 或 用户 的 观点 来 衡量 。 计算 FPA 的 第一步 是 定义 计算 边界 ， 即 需 标识 要 度量 的 应用程序 或 项目 与 外部 应用程序 和 用户 区域 的 边界 。 边界 的 建立 可 确定 哪些 是 属于 FPA 的 计算 范围 。 图 表明 了 一个 要 度量 的 应用软件 与 用户 及其 它 应用程序 之间 的 边界 的 例子 。 下 一步 要 确定 未 校准 的 FPUFP 的 数目 ， 反映 在 由 项目 或 应用程序 所 提供 的 具体 可 计算 的 功能性 。 它 划分 为 五种 功能 类型 见图 。 图 　 FPAcomponent 　 　 内部 逻辑文件 ILF ： 应用程序 边界 内部 的 可 由 用户 确认 的 逻辑 关联 的 数据 组 或 控制 信息 。 外部 接口 文件 EIF ： 其它 应用程序 边界 内部 的 由 用户 确认 的 逻辑 关联 的 数据 组 或 控制 信息 ， 本 应用程序 仅 可 参考 或 使用 这些 数据 ， 而 不能 维护 。 　 　 外部 输入 EI ： 来自 于 应用程序 边界 外部 的 数据 或 控制 信息 输入 的 基本 处理 。 　 　 外部 输出 EO ： EO 是 一个 产生 数据 或 控制 信息 并发 送到 应用程序 边界 外 的 基本 处理 。 　 　 外部 查询 EQ ： EQ 是 一个 由 完成 数据检索 的 输入输出 结合 所 构成 的 基本 处理 ， 输出 端不含 派生 数据 。 　 　 这五种 功能 类型 按照 它们 的 复杂程度 低 、 中 和 高用 一套 规范 的 标准 各自 进行 分类 。 分类 后 ， 则 按 预先规定 的 权重 计算 UFP 。 最后 一步 还要 对 项目 或 应用程序 环境 与 处理过程 的 复杂程度 进行 总体 的 估算 ， 从而 得到 了 校准 的 FP 。 　 改进 的 FunctionPointAnalysis 　 FPA 对 实时控制 软件 的 缺陷 数据 的 缺陷 　 　 一般来说 控制 数据结构 有 两种 ： 多 事件 逻辑 组和单 事件 逻辑 组 。 多 事件 逻辑 组有 多个 同 类型 的 记录 ， 单 事件 逻辑 组 就是 有 而且 仅 有 一个 记录 。 MIS 系统 的 数据 信息 大都 是 多 事件 逻辑 组 ， 这些 数据 有 一个 相同 的 结构 ， 多 事件 逻辑 组 很 适合 用 内部 逻辑文件 ILF 和 外部 接口 文件 来 描述 ， 但是 ， 典型 的 实时 软件系统 有着 大量 的 难以 与 ILF 或 EIF 组合 的 单 事件 逻辑 组 ， 即 一种 事件 对应 于 一种 数据类型 ， 因此 需要 有 扩展 的 ILFEIF 规则 来 充分 地 度量 单 事件 逻辑 组 。 　 处理 的 缺陷 　 　 通常 实时 软件 过程 有 一个 独特 的 处理 特征 ： 子 过程 的 个数 大不相同 。 在 功能 度量 时 ， 必须 重视 某些 过程 只 含有 几个 子 过程 ， 而 另 一些 过程 则 有 大量 的 子 过程 。 如 ： 一个 发动机 温度控制 过程 ， 它 包含 个子 过程 ： 输入 当前 温度 ， 当前 温度 与 阈值 温度 比较 以及 一个 开启 信号 ， 发动机 的 温度控制 过程 仅仅 是 发动机 控制应用程序 中 许多 过程 之一 ， 当 所有 的 温度控制 子 过程 完成 之后 ， 这时 应用程序 才 处于 一致 状态 ， 因此 ， 程序 中 只有 一个 基本 处理 ， 根据 FPA 的 规则 ， 只 看作 一个 处理 功能 点 ； 又 如 有 一个 发动机 诊断 过程 含 个子 过程 ： 个 不同 的 传感器 数据 读入 子 过程 ， 个 与 阀值 比较 子 过程 ， 一个 报警 子 过程 。 同 温度控制 过程 一样 ， 也 只有 一个 基本 处理 ， 由于 处理 功能 点 只 基于 基本 处理 的 数量 而 不是 子 过程 的 数量 ， 因此 ， 对于 上述 两例 ， FPA 算 出来 处理 功能 点 差不多 的 ， 但是 实际上 的 软件 工作量 却 大相径庭 。 　 　 也就是说 ， FPA 对于 实时 软件 的 度量 并 不 符合实际 情况 ， 因为 它 没有 考虑 到 实时 软件 中子 过程 数量 对 总 工作量 的 影响 会 远远 超过 普通 软件 。 　 改进 的 FunctionPointAnalysis 　 　 鉴于 上述 的 分析 ， 在 FPA 基础 上 引入 了 附加 的 数据 和 处理 功能 类型 。 新 的 FPA 是 标准 的 FPA 技术 的 扩展 ， 它 由 两 部分 组成 ： 管理 FunctionPointMFP 和 控制 FunctionPointCFP 。 　 　 管理 方面 MFP 相同 于 标准 的 FPA ， 但 在 计算 MFP 过程 中 ， 要 滤去 一些 控制 信息 。 控制 方面 CFP 定义 为个 新 的 功能 类型 计算 边界 由图 表示 。 　 　 内部 控制 逻辑 组 ICLG ： ICLG 是 一组 逻辑 上 相关联 的 ， 由要 计算 的 应用程序 更新 的 控制数据 。 　 　 外部 控制 逻辑 组 ECLG ： ECLG 是 一组 逻辑 上 相关联 的 ， 被 要 计算 的 应用程序 使用 ， 但 不 更新 的 控制数据 。 　 　 外部 控制 输入 ECE ： ECE 是 一个 独特 的 子 过程 。 ECE 过程 控制 来自 应用程序 边界 以外 的 数据 ， 它 是 对 一组 数据 最低 级别 的 操作 。 因此 输入 两组 数据 就 需要 两个 ECE 。 ECE 并 不 更新 数据 。 　 　 外部 控制 输出 ECX ： ECX 是 一个 独特 的 子 过程 。 ECX 过程 控制 送 出 应用程序 边界 的 数据 ， 它 是 对 一组 数据 最低 级别 的 操作 。 因此 输出 两组 结构 不同 的 数据 就 需要 两个 ECX 。 ECX 不 读取数据 。 　 　 内部 控制 读取 ICR ： ICR 是 一个 独特 的 子 过程 。 ICR 读取 控制数据 ， 它 是 对 一组 数据 最低 级别 的 操作 。 因此 读取 两组 数据 就 需要 两个 ICR 。 　 　 内部 控制 写入 ICW ： ICW 是 一个 独特 的 子 过程 。 ICW 写入 控制数据 ， 它 是 对 一组 数据 最低 级别 的 操作 。 因此 写入 两组 数据 就 需要 两个 ICR 。 　 　 为了 计算 FP ， 每个 定义 的 功能 类型 应当 给予 一个 功能 复杂程度 ， MFP 的 功能 复杂度 权值 是 由 数据 元素 类型 DETs 、 记录 元素 类型 RETs 和 参考 文件类型 FTRs 的 数目 所 决定 的 ， CFP 的 控制数据 若为 多 事件 逻辑 组则 与 MFP 的 ILF 和 EIF 结构 相同 ， 即可 用 相同 方法 计算 ， 其余 的 则 由 而且 仅 由 数据 元素 类型 DET 的 数目 决定 。 有 了 权值 ， 就 可以 通过 以下 的 公式 来 计算 FP ： 其中 nl ， n 分别 为 MFP ， CFP 的 功能 数 ， ci ， ci 分别 为 MFP ， CFP 功能 复杂度 的 权值 。 同时 应当 考虑 软件 项目 或 应用 程序开发 环境 及 开发 过程 复杂性 因素 即条 总体 的 系统 特征 GSCs 和 相应 的 校准 因子 值 ， 每个 校准 因子 的 范围 为 ～ ， 总 的 校准 因子 值 VAF 可以 由 下列 公式 得到 ： 校准 的 FP 为 ： FPFFPtotal ． VAF 　 FunctionPointAnalysis 和 COCOMO 结合 　 　 通常 总是 直接 寻找 开发 工作量 和 算出 的 FunctionPoint 数目 之间 的 关系 ， 一旦 同类 环境 、 同类 项目 或 应用程序 的 历史 数据库 建立 后 ， 这 不失为 一种 可行 的 方法 ， 只要 运用 回归 分析 技术 可 得到 两者之间 的 关系 。 不幸 的 是 要 建立 这样 的 历史 数据库 很难 ， 它 需要 时间 和 精力 ， 另外 简单 地 将 一个 项目 或 应用程序 分为 商用 、 管理 、 军事 等 类 也 是 不 合适 的 。 这里 ， 将 利用 两种 Metrics 结合 FunctionPointAnalysis ， COCOMO 来 推算 软件开发 工作量 ， 首先 将 FP 的 数目 转换成 等价 的 程序代码 行 ， 然后 运用 COCOMO 技术 来 评估 。 这种 方法 不仅 不 需要 大规模 的 历史 数据库 ， 而且 可以 利用 FunctionPoint 未 考虑 到 的 ， 又 是 很 重要 的 ， COCOMO 的 成本 因素 ， 去 正确 估算 不同 开发 条件 的 软件开发 成本 。 可以 按 以下 公式 计算 程序代码 行 ： KLOCAdFP ． LOC 其中 AdFP 是 调整 后 的 FP 数 ， LOC 为 每个 FP 对应 的 程序代码 行 ， KLOC 是 以千 行为 单位 的 程序代码 行 数 。 　 　 COCOMO 模型 是 将 软件开发 工作量 表示 成 估计 应该 开发 的 项目 的 程序代码 行数 的 非线性 函数 ： 其中 PM 是 开发 工作量 ， α 、 β 分别 是 模型 系数 和 指数 ， ai 为 项目 的 个 成本 因素 的 调整 因子 。 　 　 α 、 β 取决于 COCOMO 模型 系统 和 开发 项目 的 类型 ， 表是 Boehm 所 采用 的 系 数值 。 表 　 IntermediateCOCOMOCoefficientValueMode α β γ δ ModeOrganicSemidetached 　 　 COCOMO 模型 在 估算 出 软件开发 工作 需要 的 工作量 以人 月 为 单位 基础 上 ， 可以 推算 开发软件 所用 的 时间 和 开发 所 需 的 人数 ， Boehm 给出 的 计算 应为 ： 其中 ， TDEV 为 开发 时间 以 月 为 单位 ， N 表示 开发 人数 。 γ ， δ 同样 取决于 COCOMO 模型 系统 和 开发 项目 的 类型 。 　 软件 成本 估算 工具 的 开发 　 　 软件 成本 估算 工具 SCET 是 专为 协助 估算 软件 项目 成本 而 设计 的 ， 开发 一个 既 方便 又 合理 的 工具 去 帮助 估算 软件 成本 是 很 有 必要 的 ， 它 将 有助于 广大 软件 项目 投资者 、 项目经理 和 设计者 在 软件开发 生命期 的 不同 阶段 估算 软件开发 的 成本 。 本 工具 开发 步骤 为 ： 功能 说明 ； 设计 ； 实现 ； 测试 。 　 功能 说明 　 　 从 应用 的 角度 划分 ， SCET 工具 应当 具有 两个 主要 的 工作 模式 ： Metrics 管理 和 Metrics 应用 。 SCET 工具 包含 两种 Metrics ： 改进 的 FunctionPointAnalysis 和 COCOMO 。 程序设计 语言 代码 行 转换 表 作为 FPA 产生 的 结果 和 COCOMO 输入 条件 KLOC 联系 的 桥梁 。 Metrics 管理 主要 由 四个 基本功能 组成 ： 输入 、 修改 、 删除 、 查询 。 所谓 Metrics 应用 就是 用户 运用 上述 Metrics 对 开发 的 软件 项目 进行 成本 估算 的 过程 。 Metrics 应用 提供 六个 基本功能 ， 它们 是 ： 输入 、 修改 、 删除 、 查询 、 估算 和 修正 。 　 设计 　 　 SCET 工具 是 一个 典型 的 数据库 处理 系统 ， 设计 过程 由 两 部分 组成 ： 数据模型 和 结构设计 。 SCET 工具 的 数据模型 是 借助 EREntityRelationshipModel 方法 建立 的 。 ER 模型 由 PChen 提出 ， 是 一个 面向 问题 的 概念性 数据模型 ， 它用 简单 的 图形 方式 ER 图 描述 现实 中 的 数据 ， 而 不 涉及 这些 数据 在 数据库系统 中将 如何 实现 的 问题 。 　 　 SCET 工具 的 结构设计 是 采用 了 层次 模块化 设计 原理 ， 第一层 是 用户注册 ， 第二层 包含 两个 工作 模式 ： Metrics 管理模式 和 Metrics 应用 模式 。 Metrics 管理模式 由 个子 模块 组成 ， 它们 是 “ 输入 ” 、 “ 更新 ” 、 “ 删除 ” 和 “ 查询 ” 组成 ， 这些 子 模块 分别 对 Metrics 数据 和 用户 信息 进行 处理 。 Metrics 应用 模式 由 “ 输入 ” 、 “ 更新 ” 、 “ 查询 ” 、 “ 删除 ” 、 “ 计算 ” 和 “ 修正 ” 个子 模块 组成 。 模块 的 设计 采用 了 当今 国外 较 流行 的 面向 数据流 的 设计 方法 ， 即以 数据流 图 表示 。 　 实现 　 　 笔者 完成 了 对 SCET 工具 的 开发 和 初步 的 测试 工作 。 SCET 工具 的 开发 所 采用 的 系统配置 为 ： 服务器端 操作系统 为 WindowsNT ， 数据库系统 为 ORACLE ， ORACLEWebServer 作为 Web 服务器 。 　 　 Web 开发 的 应用程序 的 用户界面 是 由 一系列 Web 页 组成 ， 每个 Web 页 是 由 一个 PLSQL 块 创建 的 。 SCET 工具 的 主页 一般 是 客户 的 最初 入口 ， 当 一个 客户 要求 访问 页面 时 ， OracleWebServer 服务器 将 向 用户 询问 口令 ， 并 核对 口令 以 决定 是否 允许 客户 访问 。 定位 、 按钮 或 图象 用于 Web 页 的 相互 联系 SCET 工具 运用 HTML 的 框架 Frame 。 窗体 Form 和 表格 Table 来 实现 数据 的 输入 和 输出 ， 下 拉 列表框 Poplistitem 、 单选 按钮 Radiogroup 和 复选框 Checkbox 用于 减少 数据 的 输入量 ， 美化 用户界面 。 由于 SCET 工具 是 面向 全球 的 ， 在 工具 的 入口处 加上 了 口令 ， 以防 被 非法 访问 。 任何 想要 使用 SCET 工具 的 用户 ， 首先 必须 提出申请 Email ， 申请 的 权限 大致 有 这些 ： 本人 项目 估算 ； 查看 他人 项目 的 估算 结果 ； 对 他人 项目 的 估算 等 。 一个 在 现实 世界 中 能够 应用 的 软件工具 面对 用户 在 使用 时 发生 的 某些 错误 应 具备 一定 的 容忍 程度 。 毫不 例外 ， SCET 工具 也 具有 一定 的 容错性 。 通过 使用 Oracle 的 异常 处理器 来 处理 正常 执行 过程 中未 预料 的 事件 。 　 测试 　 　 SCET 工具 的 测试 工作 应对 每个 模块 的 每个 功能 、 采用 按 路径 覆盖 的 原则 选择 多组 参数 进行 测试 ， 对 数据 的 不同 输入 方式 也 需要 进行 全面 的 测试 ， 从而 找出 软件 中 的 错误 ， 保证 软件 的 质量 。 对 SCET 工具 的 测试方法 采用 的 是 简单 而 实用 的 黑盒 法 。 　 结束语 　 　 以上 SCET 工具 是 笔者 在 德国 作 访问学者 时 开发 的 。 本文 所 论述 的 软件 成本 模型 是 根据 国外 有关 资料 和 一些 实践 相结合 的 首次 研究 ， 这一 模型 的 建立 只是 一种 初步 尝试 ， 有待于 继续 进行 探讨 ， 使得 软件 成本 模型 更 完善 ， 更 具有 一致性 。 徐克 奇 上海 轻工业 高等 专科学校 上海 参考文献 InternationalFunctionPointUsersGroupIFPUGFunctionPointFAQUpdatedJuneCopyrightl ～ bySoftwareCompositionTechnologiesINCDenisStPierreMarcelaMayaAlainAbranJeanMarcDesharnaisFullFunctionPointsFunctionPointsExtensionforRealtimeSoftwareConceptsandDefinitionsTechnicalReportCapersJonesChairmanProgrammingLanguagesTableReleaseMarchlSoftwareProductivityResearchINC 张海藩 著 软件工程 导论 北京 ： 清华大学出版社 OracleWebApplicationServerHandbookDynamicInformationSystemLLC 收稿 日期 ： 年月日