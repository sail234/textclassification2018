计算机 应用 研究 APPLICATIONRESEARCHOFCOMPUTERS 　 Vol 　 No 　 P 用 Java 开发 HTTP 服务器 万 江平 　 何思遥 　 吴越 　 张鹏 摘要 在 对 HTTP 协议 的 分析 基础 上 ， 用 Java 开发 了 一个 HTTP 服务器 原型 系统 ， 说明 了 其 实现 模型 ， 并 讨论 了 多线程 及 虚拟 终端 等 若干 实现 问题 。 关键词 超文本 传输 协议 Java 套 接字 线程 虚拟 终端 引言 　 　 实现 WWW 的 通信协议 是 HTTPHypertextTransferProtocol ， 超文本 传输 协议 ， 它 定义 了 HTTP 的 通信 交换 机制 、 请求 及 响应 消息 的 格式 等 。 HTTP 模型 　 　 HTTP 协议 是 建立 在 请求 响应 RequestResponse 模型 上 的 。 首先 由 客户 建立 与 服务器 的 连接 ， 并 发送 一个 请求 到 服务器 ， 请求 中 包含 请求 方法 、 URI 、 协议 版本 以及 相关 的 MIME 样式 的 消息 包含 请求 修饰符 、 客户 信息 或者 可能 的 内容 。 服务器 响应 一个 状态 行 ， 包括 消息 的 协议 版本 和 一个 成功 或 失败 码 ， 相关 的 MIME 样式 的 消息 包含 服务器 的 信息 ， 资源 实体 的 信息 和 可能 的 资源 内容 。 　 　 大多数 的 HTTP 通信 是 由于 用户 启动 的 ， 包含 一个 对 某 服务器 的 资源 的 请求 。 在 简单 的 情况 下 ， 这 可以 通过 在 客户 和 服务器之间 的 单个 连接 V 完成 ， 见图 。 图 　 简单 的 HTTP 交互 过程 　 　 复杂 的 情况 是 在 请求 响应 通信 链路 上 有 一个 或者 多个 中介 体 。 在 这里 有 三种 中介 体 ， 代理 Proxy ， 网关 Gateway 和 通道 Tunnel 。 代理 是 一个 转发 机构 ， 它 接收 用户 对 一个 由 URI 绝对 格式 标识 的 资源 请求 ， 改写 请求 的 全部 或 一部分 ， 转发 被 改变 的 请求 信息 到 由 URI 标识 的 服务器 。 网关 是 一个 接收 机构 ， 作为 某些 服务器 的 一个 层 ， 必要 时 ， 翻译 请求 成为 服务器 支持 的 协议 。 通道 是 两个 连接 的 转置 点 ， 不 改变 消息 。 复杂 的 HTTP 过程 见图 。 图 　 复杂 的 HTTP 交互 过程 　 　 在 图 中 ， 客户 和 服务器之间 的 通信 链路 有 三个 中介 体 ， 请求 或 响应 消息 必须 经过 四个 单独 的 连接 。 这 对 某些 HTTP 通信 很 重要 ， 因为 某些 HTTP 通信 选项 只能 适用 于 申请 近邻 非 通道 的 连接 或 通信 链 的 端点 ， 或链 上 的 所有 连接 。 这里 每 一个 中介 体 同时 支持 多个 通信 过程 。 　 　 一次 HTTP 操作 称为 一次 事务 Transaction 。 HTTP 定义 的 事务处理 由 以下 四步 组成 ： 客户 和 服务器 建立 连接 ； 客户 向 服务器 提出 请求 ； 如果 请求 被 接受 ， 则 服务器 送回 响应 ， 在 响应 中 包括 状态 码 和 所 需 的 文件 ； 客户 与 服务器 断开连接 。 　 　 HTTP 采用 TCP 连接 ， 该 连接 仅 在 此 事务 中 保持 ， 浏览器 和 服务器 都 不会 记忆 上次 的 连接 状态 。 HTTP 之所以 采取 这种 无 状态 机制 ， 完全 是 为了 提高 服务器 的 工作效率 。 在 Web 中 点击 一个 超链接 时 ， 浏览器 有 可能 从 当前 站点 转到 另 一个 站点 。 因此 ， 当 文档 传输 完毕 时 ， 服务器 都 假定 用户 要 退出 对本 服务器 上 的 文档 的 浏览 连接 ， 因而 断开连接 。 如果 要 继续 浏览 ， 就 再次 建立 连接 。 如果 用户 确实 要 退出 时 ， 服务器 就 不 需要 执行 任何 操作 ， 因为 连接 已经 断开 了 。 用 Java 开发 HTTP 服务器 Java 语言 网络 编程 　 　 当 通信 数据 到达 的 是 目的 主机 的 网络层 ， IP地址 连同 端口号 一起 ， 提供 了 对 两台 机器 之间 唯一 的 、 无 二义性 的 连接 的 标识 ， 这个 连接 叫套 接字 Socket 。 一对 套 接字 唯一 地 标识 了 每个 端口 连接 ： 发送 方 套接 字源 IP地址 源 端口号 ； 接收 方套 接字 目的 IP地址 目的 端口号 。 　 　 Socket 类 实现 基于 连接 的 客户 插口 。 这些 插口 用于 开发 应用程序 ， 应用程序 利用 由 面向 连接 的 服务器应用程序 所 提供 的 服务 。 我们 可以 利用 JavaAPI 中 的 javanet 包中 的 插口 类 提供 了 套 接字 功能 进行 网络 编程 。 　 　 Socket 类 提供 四种 创建 插口 并 将 插口 连接 到 接收 方 主机 与 端口 的 构造函数 。 访问 方法 用来 访问 IO 流及 与 所 连接 的 插口 有 关联 的 连接 参数 。 getInetAddress － 获取 插口 所 连接 时 信宿 机 的 IP地址 ； getPort － 获取 插口 所 连接 时 信宿 机 的 端口号 ； getInputStream 返回 与 插口 相关联 的 输入 流 ； getOutputStream － 返回 与 插口 相关联 的 输出 流 ； close － 关闭 插口 。 　 　 ServerSocket 类 实现 了 TCP 服务器 插口 。 它 提供 两种 构造函数 ， 用 它们 指定 服务器 插口 所用 的 端口 ， 以便 监听 到 连接 请求 。 它 的 Accept 方法 用来 引起 服务器 插口 监听 并 等待 ， 直到 建立 了 到达 连接 为止 。 一旦 建立 了 连接 ， 它 就 返回 Socket 类 的 一个 实例 。 然后 该 Socket 对象 用来 为 单个 客户 实施 服务 。 HTTP 服务器 功能 　 　 用 Java 实现 一个 Web 服务器程序 ， 具备 以下 的 功能 ： 支持 简单 请求 和 简单 响应 模式 HTTP ； 部分 支持 完全 请求 和 完全 响应 模式 HTTP ， 实现 揋 ET 敚 瑩 HEAD 數那 肭 蠓 椒 ǎ 能以 并发 的 方式 同时 为 多个 客户服务 ； 能够 查找 文档 ； 注释 文档 － 即 在 完全 响应 模式 下 生成元 信息 头域 Header 。 HTTP 服务器 的 开发 服务器 总体设计 　 　 把 Web 服务器 分成 两个 组成 模块 ： 客户 请求 处理 模块 和 响应 生成 发送 模块 ， 其中 客户 请求 处理 模块 负责 接收 客户 的 连接 ， 分析 请求 中 的 各个 协议 参数 ， 此外 还 负责 调用 响应 生成 发送 模块 。 而 响应 生成 发送 模块 的 任务 就是 根据 对 客户 请求 的 分析 的 结果 查找 资源 ， 生成 响应 和 发送 响应 。 　 　 客户 请求 处理 模块 的 任务 就是 负责 监听系统 的 端口 ， 以 获取 客户机 到达 本机 的 连接 。 当 获得 一个 连接 请求 时 ， 就 把 这 一 连接 所 建立 的 套 接字 连接 交给 一个 负责 客户 请求 处理程序 桟 lient 类 处理 这 一个 客户 的 请求 ， 之后 程序 继续 监听 等待 下 一个 客户 的 连接 。 在 一个 Client 对象 建立 之后 ， 它 就 把 其 在 初始化 时 获得 的 一个 Socket 对象 的 输入 流 重定向 给 一个 Request 对象 ， 使 其能 通过 Request 类 提供 的 接口 方法 获取 这一 用户 请求 的 相关 的 参数 ， 如 URL 的 组成 椙 肭 蠓 椒 ǎ 肝募 约 靶 榘 姹 镜仁 荨 Ｈ 缓蟀 颜庖 桓 鯮 equest 对象 连同 Socket 对象 的 输出 流传 递给 一个 ResourceHandler 类 的 实例 ， 由 这 一个 ResourceHandler 对象 完成 产生 并 发送 对 用户 请求 的 响应 。 主要 由 三个 部分 组成 ： 守护 程序 ： 一个 WebServer 类 的 实例 对象 ； 客户 处理程序 ： 一个 Client 用户 类 ， 由 WebServer 对象 负责 建立 其实 例 和 执行 其 运行 线程 ； 请求 分析程序 ： 一个 Request 用户 类 ， 由 Client 对象 初始化 其 对象 实例 ， 用于 分析 客户 请求 中 的 协议 参数 见图 。 图 　 请求 处理 模块 　 　 其中 ， － 调用 ； － Socket 对象 ； － Socket 对象 ； － Socket 对象 的 输入 流 ； － Request 对象 ； － Socket 对象 的 输入 流 和 Request 对象 。 Request 对象 是 指经 分析 的 客户 请求 。 　 　 响应 生成 发送 模块 实现 的 功能 就 是从 客户 请求 程序 中 接受 一个 Request 对象 和 一个 标识 一个 用户 连接 的 客户 Socket 对象 的 输出 流 NVTOutputStream 对象 。 通过 从 Request 对象 中 获得 客户 请求 的 协议 参数 ， 查找 客户 请求 指定 的 资源 ， 根据 查找 的 结果 ， 生成 相应 的 响应 ， 并 把 成功 生成 的 响应 写入 到 指定 的 NVTOutputStream 对象 中 ， 其 操作 结果 就是 把 响应 送往 客户 。 包含 了 以下 对象 ： ResourceHandler 对象 响应 产生 发送 处理 、 SCManager 响应 的 状态 码 管理 对象 、 StatusCode 对象 状态 码 处理 、 MimeType 对象 媒体 类型 描述 处理 ， 通过 互相 调用 协调 ， 共同完成 模块 的 功能 见图 。 其中 ： － Socket 对象 的 输入 流 和 Request 对象 ； － 文件名 ； － 文件 描述 ； － 状态 码 ； － 状态 码 相关 的 描述 ； － 文件名 ； － 媒体 类型 描述 。 图 　 响应 生成 发送 模块 多线程 的 实现 和 同步 　 　 Java 的 多线程 编程 的 途径 有 两种 － 继承 Thread 类 和 实现 Runnable 界面 。 Client 对象 采用 的 是 第二种 方法 。 Client 类中 声明 一个 类 实现 JavaAPI 中 的 javalangRunnable 界面 ， 然后 编写 代码 以 覆盖 这 一个 界面 中 预先 定义 的 run 方法 。 这样 和 守护 程序 中 的 代码 结合 起来 ， 就 能 从 语言 的 级别 上 实现 多线程 。 下面 是 在 WebServer 类中 的 应用 ： publicvoidrun 　 StringinLine 　 try 　 ServerSocketservernewServerSocket 　 intlocalPortservergetLocalPort 　 SystemoutprintlnWebServerislisteningonport 　 　 localPort 　 do 　 Socketclientserveraccept 　 　 ThreadthreadnewThreadnewClientclient 　 　 threadstart 　 　 whilethreadisAlive 　 　 SystemoutprintlnServiceCompleted 　 WhiletruecatchIOExceptionc 　 SystemoutprintlnIOExceptionoccurred 　 　 由于 每 一个 客户 处理程序 都 要 对 日志 文件 进行 维护 更新 的 操作 ， 这些 操作 都 是 写 操作 ， 而 每 一个 客户 处理程序 是 在 不同 的 线程 上 运行 ， 其 调度 顺序 是 不可 预知 的 ； 另一方面 ， 这些 线程 都 共享 同一个 日志 文件 的 输出 流 ， 这 就 有 可能 使 写入 到 日志 文件 里 的 内容 不可 读 。 因此 把 对 日志 文件 的 输出 流 进行 写 操作 的 方法 声明 为 同步 方法 ， 就 可以 轻易 地 解决 一个 线程 之间 的 同步 协调 ： SynchronizedVoidWriteToLog 。 虚拟 终端 　 　 NVT 是 一种 抽象 的 设备 ， 由 打印机 和 键盘 组成 。 用户 使用 键盘 键入 的 字符 被 转发 到 服务器 中 ， 服务器 再 把 数据 返回 给 用户 ， 而 NVT 在 打印机 上将 其 输出 。 它 使用 标准 的 回车 与 换行 组合 去 终止 行 。 NVT 提供 控制 操作 ， 这些 操作 支持 过程 中断 并 丢弃 多余 的 输出 。 这些 操作 是 通过 使用 IACInterpretasCommand ， 解释 成 命令 代码 发出 的 。 IAC 是 一个 单字节 ， 由值 或 十六进制 xff 组成 。 IAC 后面 可以 跟着 一个 单字节 ， 用于 发送 控制代码 ； 或者 后面 跟着 两个 或 更 多 的 字节 ， 用于 协商 一 选项 。 而 为了 发送 已 用于 IAC 的 字节 值 ， 可以 通过 一个 特殊 的 字节 序列 来 实现 ： 连续 发送 两个 IAC 。 　 classNVTInputStreamextendsFilterInputStreambyteIACbytexff 　 byteDObytexfdbyteWILLbytexfb 　 byteCRbyteLF 　 intWONTintDONT 　 intBUFFERSIZE 　 OutputStreamout 　 bytelineBuffernewbyteBUFFERSIZE 　 intnumBytes 　 publicNVTInputStreamInputStreaminStreamOutputStream 　 　 　 　 　 outStream 构造函数 　 publicintreadthrowsIOException 识别 各 控制代码 　 publicStringreadLinethrowsIOException 读入 一行 　 　 这个 类 就是 为了 从 NVT 输入 流中 读取 命令 而设 的 。 它 处理 掉 NVT 的 控制字符 ， 让 程序 从中 读出 的 是 纯粹 的 命令 字符 流 ， 以便 于 服务器 处理 客户 发送 来 的 命令行 。 　 　 虚拟 网络 终端 输出 流类 ClassNVTOutputStream ： 这个 类 跟上 一个 类 是 相对 的 ， 它 用 在 程序 中向 NVT 输出 流 写入 给 客户 的 应答 字符串 。 它们 还 可以 用于 FTP 服务器 的 实现 中 。 结束语 　 　 HTTP 标准 在 迅速 发展 。 第一版 HTTP ， 只 包括 简单 的 Get 请求 和 响应 。 HTTP 是 常用 的 标准 ， 它 增加 了 进行 HTTPPost 和 HTTPHead 请求 的 能力 ， 以及 一些 其它 信息 头字段 。 HTTP 也 已 推出 ， 它 包括 HTTPPut 和 Delete ， 以及 其它 一些 协议 改进 。 　 　 WWW 是 因特网 最 重要 的 应用 之一 ， 有关 其 代理服务器 ， 安全性 和 应用 方面 如 支持 断点续传 等 都 有 许多 问题 值得 进一步 研究 。 使用 Java 开发 HTTP 服务器 可以 深入 理解 因特网 环境 下 客户服务器 交互作用 ， 并 结合 到 因特网 的 实际 应用 中 。 万 江平 （ 华南理工大学 电子信息 学院 广州 ） 何思遥 （ 华南理工大学 电子信息 学院 广州 ） 吴越 （ 华南理工大学 电子信息 学院 广州 ） 张鹏 （ 华南理工大学 电子信息 学院 广州 ） 参考文献 ， DouglasEComerComputerNetworkandInternetPRENTICEHALL ， DilipCNaikInternetStandardandProtocolsRedmondWashingtonUSAMicrosoftPress ， 万 江平 叶子 华等 远程教学 系统 的 设计 与 实现 广州 华南理工大学 学报 ～ ， 张宝社 张宝峰 Windows 界面 下 的 网络 编程 合肥 中国 科学技术 大学 出版社 ， 易文韬 陈颖平 Java 编程 手册 北京 科学出版社 ， RfcHyperTextTransferProtocol 收稿 日期 ： 年月日