计算机 应用 研究 APPLICATIONRESEARCHOFCOMPUTERS 　 Vol 　 No 　 P 基于 多线程 技术 和 自定义 消息 编程 实现 Windowsx 异步 串行 通信 张志明 　 李蓉艳 　 王磊 摘要 分析 了 基于 Windows 平台 上 的 异步 串行 通信 程序开发 方法 ， 并 结合 开发 实践 ， 用 CBuilder 语言 实现 了 基于 多线程 技术 和 消息 响应 机制 的 异步 串行 通信 ， 给出 编程 的 一般 步骤 和 详细 解释 。 关键词 串行 通信 多线程 消息 API 事件 前言 　 　 串行 通信 具有 连接 简单 、 使用 灵活 方便 、 数据 传递 可靠 等 优点 ， 在 工业 监控 、 数据 采集 和 实时 控制系统 中 得到 了 广泛应用 。 但 由于 Windows 对系统 底层 操作 采取 了 屏蔽 的 策略 ， 不 允许 用户 对 硬件 IO 口 进行 直接 操作 ， 进行 串行 通信 只能 通过 调用 API 函数 来 完成 ； 同时 Windowsx 通过 消息 队列 驱动 管理程序 ， DOS 中断 服务例程 在 其 下面 也 很 难 实现 ， 且 实时性 和 可靠性 都 得不到 保证 ； 通过 基于 线程 和 消息 的 多任务处理 编程 可以 有效 地 解决 这一 问题 ， 且 能 提高 数据传输 的 吞吐量 和 应用程序 的 可靠性 。 　 　 Windowsx 支持 基于 线程 的 抢先 式 多任务处理 。 进程 Process 是 应用程序 的 执行 实例 ， 而 线程 Thread 则 是 进程 内部 执行 的 路径 。 每个 进程 至少 有 一个 主线 程 ， 还 可 包括 若干 子 线程 ， 线程 间 独立 运行 。 从根本上 说 ， 线程 是 可 由 系统调度 的 一个 最 简单 的 代码 单元 ， 同一 进程 的 每个 线程 有 自己 的 一组 CPU 指令 、 一组 CPU 寄存器 和 一个 堆栈 ， 由 Windowsx 分配 CPU 时间 片 ， 需要 小心 处理 线程 的 同步 问题 。 基于 线程 的 多任务 使得 同一 程序 的 两个 或 多个 部分 可以 同时 运行 。 一个 多线程 的 应用程序 实际上 在 其 内部 实现 了 多任务 扩展 ， 为 代码 赋予 了 并行执行 的 特性 ， 因而 可以 执行 某些 实时性 或 随机性 很强 的 操作 ， 提高 对 CPU 的 利用率 ， 加快 通信 程序 的 信息处理 速度 。 　 　 操作系统 在 给 各个 线程 分配 CPU 时间 片时 ， 通过 其 本身 的 调度 机制 来 评价 各个 活动 线程 的 优先级 ， 优先 执行 优先 级别 高 的 活动 线程 ， 挂 起 优先 级别 低 的 活动 线程 ； 当 活动 线程 优先 级别 相同 时 ， 系统调度 程序 则 以 轮转 方式 分配 CPU 时间 片 。 在 抢先 式 多任务处理 中 ， 只要 系统调度 程序 确定 有 一个 优先 级别 更 高 的 线程 准备 运行 ， 则 系统 立刻 会 将 优先 级别 低 的 线程 挂 起 即使 处于 运行 状态 ， 而 把 CPU 时间 片 分配 给 优先 级别 高 的 线程 。 　 　 Windowsx 系统 提供 的 开放式 通用 功能 增强 接口 WinAPI 应用 编程 接口 是 一个 复杂 函数 、 消息 的 集合 。 Windowsx 下 把 对 串口 和 其它 通信 设备 的 支持 与 基本 输入输出 驱动程序 集 成为 一体 ， 串口 的 打开 、 关闭 、 读取 和 写入 所用 的 函数 与 操作 文件 的 函数 相同 ， 系统 通过 被 称为 设备 控制 块 DCB 的 数据结构 对 串行口 和 串口 通信 驱动程序 进行 配置 。 串行 通信 的 基本 编程 　 　 串行 通信 编程 的 基本 流程 如图所示 ， 首先 调用 API 函数 CreateFile 打开 并 初始化 需要 操作 的 串行 端口 ： 图 串行 通信 编成 的 基本 流程 HANDLECreateFileLPCTSTRlpFileName 　 要 打开 的 通信 串口 名称 DWORDwDesiredAccess 　 指定 串口 的 访问 方式 ， 一般 设置 为 可读 可 写 方式 DWORDdwShareMode 　 指定 串口 操作 的 共享 模式 串口 不能 共享 所以 只能 设置 为 LPSECURITYATTRIBUTESlpSecurityAttributes 　 设置 串口 的 安全 属性 ， 由于 Winx 不 支持 安全 属性 ， 此项 只能 设置 为 NULLDWORDdwCreationDistribution 　 对于 通信 串口 ， 创建 方式 只能 为 OPENEXISTINGDWORDdwFlagsAndAttributes 　 指定 串口 属性 与 标志 ， 设置 为 FILEFLAGOVERLAPPED 　 重叠 IO 操作 ， 指定 串口 以 异步 方式 通信 HANDLEhTemplateFile 　 对于 串口 通信 必须 设置 为 NULL ； 成功 打开 串行口 后 ， 函数 返回 串口 的 句柄 。 　 　 串口 设备 属性 的 配置 由 以下 API 函数 完成 ： SetupComm 设置 串行 通信 端口 的 输入 和 输出 缓冲区 的 大小 ； 通过 设备 控制 块 DCB 修改 和 设置 串口 工作 状态 的 参数 ， 如 波特率 、 数据位 、 奇偶校验 位 等 通信 参数 ， SetCommState 将 DCB 结构 中 的 内容 写入 串口 设置 ； 另外 ， SetCommTimeouts 设置 串口 读写操作 的 溢出 时间 。 事件驱动 IO 设备 时用 SetCommMask 设置 通信 事件 句柄 ， WaitCommEvent 则 用来 等待 通信 事件 发生 。 　 　 设置 工作 完成 后 串行 通信 可用 ReadFile 对 串口 进行 读 操作 ， WriteFile 对 串口 进行 写 操作 。 　 　 串行 通信 结束 时 调用函数 CloseHandle 来 关闭 CreateFile 函数 返回 的 串口 句柄 。 　 　 注 ： 有关 的 函数 可 参考 CBuilder 在线 帮助 手册 中 的 详细资料 。 　 　 多线程 的 串口 IO 通信 编程 中 ， 将 对 串口 的 读 、 写 操作 视为 同一 进程 的 两个 不同 任务 ， 创建 读 线程 和 写 线程 分别 完成 对 串口 的 读 、 写 操作 ； 线程 间 的 协调 和 同步 由 事件 Event 和 临界 区 CriticalSection 对象 实现 ； 由于 异步 串行 通信 事件 的 随机性 和 实时性 ， 要求 通信线 程 优先 于 主线 程 被 处理 ， 所以 设置 各 线程 的 优先 级别 如下 ： 读 线程 的 优先级 gt 写 线程 的 优先级 gt 主线 程 的 优先级 。 CBuilder 对 多线程 编程 的 支持 　 　 直接 使用 WinSDK 中 提供 的 API 函数 。 如 CreateThread ， SetThreadPriority ， ResumeThread ， ExitThread 等 函数 ， 编程 较 复杂 ， 编程 工作量 大 。 　 　 利用 CBuilder 提供 的 TThread 线程 对象 类 。 　 　 线程 对象 TThread 类 封装 了 多线程 编程 的 常用 方法 和 数据 ， 大大简化 了 多线程 编程 的 工作难度 ， 编程 时 只要 从 TThread 派生 自己 的 对象 类 并 创建 相应 的 实例 即可 ， 常用 的 重要 属性 方法 有 ： 　 　 FreeOnTerminate 属性 ： 布尔 类型 ， 当 设置 为 True 时 ， 在线 程 结束 运行 时会 强迫 TThread 对象 类 自动 释放 本身 ， 设置 为 False 时 ， 需要 显式 地 在 程序代码 中 调用 该 对象 类 的 析构 函数 来 释放 其 本身 。 缺省 设置 为 False 。 　 　 Priority 属性 ： 设置 该 线程 的 优先 级别 ， CBuilder 定义 了 枚举 类型 TThreadPrioritytpIdle ， tpLowest ， tpLower ， tpNormal ， tpHighertpHighest ， tpTimeCritical 来 表示 线程 的 优先级 ， 缺省 设置 为 tpNormal 。 　 　 Terminated 属性 ： 布尔 类型 ， 线程 结束 标志 。 值为 True 时 表示 线程 结束 ， 值为 False 时 表示 线程 正在 运行 。 需要 在 Execute 函数 中 不断 对 其 检查 ， 为 True 则 结束 线程 。 　 　 fastcallTThreadboolCreateSuspended ： 对象 类 的 构造函数 ， 如果 参数 CreateSuspended 为 False ， 线程 创建 后 自动 调用 Execute 方法 函数 ， 立即 启动 运行 ； 如果 CreateSuspended 为 True ， 线程 以挂 起 状态 启动 。 　 　 virtualvoidfastcallExecutevoid ： 成员 函数 ， 创建 线程 的 执行 代码 部分 ， 在 派生类 中 必须 重载 该 方法 函数 ， 在 函数 体内 加入 自己 的 程序代码 ， 实现 具体 的 功能 。 　 　 voidfastcallSynchronizeTThreadMethod ＆ Method ： 同步 方法 。 执行 时挂 起 线程 本身 而 将 控制权 交给 主线 程 ， 由 主线 程 调用 参数 Method 所 指定 的 函数 或 过程 ， 完成 后 控制权 交还给 调用 Synchronize 方法 的 线程 。 Synchronize 方法 能 避免 多线程 之间 的 冲突 ， 防止 程序 “ 死锁 ” 。 　 　 voidfastcallTerminatevoid ： 调用 此 成员 方法 函数 将 终止 线程 的 运行 ， 并且 自动 置 线程 结束 标志 Terminated 值为 True 。 多线程 编程 实现 异步 串行 通信 　 　 利用 Windowsx 的 多线程 编程技术 ， 编程 创建 辅助线 程 实时 监视 串口 通信 状态 ， 并 由 串口 通信 监视 线程 根据 通信 状态 向 主线 程 发送 相应 的 消息 ， 由 主线 程 分析 处理 。 多线程 串行 通信 法 的 最大 优点 是 程序 对 接收数据 具有 自主 觉察 能力 ， 一旦 辅助 的 通信 监视 线程 查询 到 数据 已经 发送到 串行口 上 ， 辅助线 程 自动 接收数据 后 ， 向 主线 程 发送数据 接收 到 的 消息 ， 应用程序 可 根据 该 消息 来 处理 通信 串口 传送 过来 的 数据 ， 并且 采用 通信 监视 线程 还 不 占用 CPU 时间 。 　 　 实践 编程 中 从 线程 对象 TThread 类 派生 建立 辅线 程 串口 读 线程 TCommReadThread 和 串口 写 线程 TCommWriteThread ， 完成 串口 通信 操作 ， 分别 用来 监视 和 管理 串口 通信 的 输入 、 输出 。 其中 读 线程 从 通信 串口 读取数据 并 传输 给 主线 程 处理 ； 写 线程 将 从 主线 程 传来 的 数据 写入 通信 串口 输出 ； 主线 程除 完成 串口 通信 资源 的 打开 、 参数 配置 以及 关闭 的 工作 外 ， 还要 完成 读写 线程 的 创建 及 关闭 、 多线程 的 协调 、 数据 的 中间 处理 与 前端 的 人机交互 等 工作 。 　 　 图 、 图 、 图 分别 为 程序结构 流程图 、 串口 写 线程 流程图 和 串口 读 线程 流程图 。 图 异步 串行 通信 程序 流程图 图写 线程 流程图 图读 线程 流程图 　 　 针对 串行 通信 的 特点 ， 采用 事件 Event 对象 和 临界 区 CriticalSection 对象 来 同步 串行 通信 中 各 线程 对 通信 端口 和 存储 区 数据 的 访问 ， 避免 引起 多线程 间 的 冲突 和 死锁 。 事件 对象 的 作用 是 告诉 其它 线程 发生 了 某 一 特定 事件 。 相关 的 API 函数 有 CreateEvent 创建 事件 对象 ， 调用 成功 后用 SetEvent 和 ResetEvent 手工 重置 事件 对象 状态 ， CloseHandle 解除 事件 对象 ； WaitForSingleObject 和 WaitForMultipleObjects 函数 分别 等待 一个 或 多个 特定 事件 的 发生 。 临界 区 对象 的 作用 是 保护 主线 程与 读写 线程 之间 的 共享 数据 ， 一次 只 允许 一个 线程 有权 访问 被 保护 的 数据 。 InitializeCriticalSection 初始化 临界 区 对象 ， DeleteCriticalSection 删除 临界 区 对象 并 释放 其所 占 内存 ， EnterCriticalSection 和 LeaveCriticalSection 分别 是 进入 和 退出 数据保护 状态 。 　 　 线程 结构 结合 各个 对象 含义 具体 解释 如下 ： 　 　 发送数据 完成 事件 ： 写 线程 建立 并 等待 该 事件 发生 。 该 事件 由 写 线程 将 主线 程 传递 过来 的 数据 从 通信 串口 发送 成功 后 产生 。 　 　 读取数据 完成 事件 ： 读 线程 建立 并 等待 该 事件 发生 。 读 线程 监测 通信 串口 状态 ， 从 通信 串口 成功 读取数据 并 将 数据 送往 主线 程后 发生 。 　 　 通信 过程 错误 事件 ： 读 线程 建立 并 等待 该 事件 发生 。 应用程序 利用 此 事件 监视 通信 过程 中 发生 的 错误 事件 ， 为此 目的 需要 在 串口 参数设置 时 在 函数 BOOLSetCommMaskHANDLEhFileDWORDdwEvtMask 中 设置 hFile 为 串口 句柄 ， dwEvtMaskEVERR 常量 。 　 　 写 线程 读 线程 结束 事件 ： 分别 在 写 线程 读 线程 的 构造函数 中 建立 并 等待 该 事件 发生 。 在线 程 执行 期间 调用 Terminate 函数 终止 线程 时 产生 。 　 　 临界 区 对象 ： 主线 程和写 线程 分别 定义 并 建立 ， 用来 同步 写 线程 与 主线 程 共享 的 串口 发送数据 。 　 　 写 线程 等待 写 数据 完成 事件 和 线程 结束 事件 ； 读 线程 等待 读数据 完成 事件 、 通信 错误 事件 和 线程 结束 事件 。 为 实现 进程 内部 即 主线 程与 读写 线程 之间 的 数据交换 ， 自定义 如下 消息 在 相应 的 事件 发生 后 发送给 主线 程作 相应 的 消息 处理 。 　 　 WMCOMMWRITE ： 写 线程 在 成功 发送数据 后 发送给 主线 程 。 　 　 WMCOMMREAD ： 读 线程 在 接收 串口 数据 成功 后 向 主线 程 发送 ， 主线 程 收到 此 消息 后 可 对 接收 到 的 数据 进行 后续 处理 。 　 　 WMCOMMERROR ： 由 读写 线程 发送 。 其中 lParam 未用 ， wParam 用于 标志 消息 的 发送者 ， 写 线程 为 ， 读 线程 为 。 读写 线程 在 通信 过程 中 发生 错误 时 发送 此 消息 给 主线 程 ， 主线 程挂 起 相应 线程 直至 通信 错误 事件 处理完毕 。 　 　 主线 程在 运行 时 与 写 线程 共享 串行 端口 发送数据 内存 单元 ， 其 共享 的 数据 由 CriticalSection 临界 区 对象 来 保护 。 写 线程 在 对 共享 数据 进行 访问 前先 申请 对 临界 区 的 所有权 ， 访问 完成 后 释放 所有权 退出 临界 区 状态 ， 主线 程 在此期间 不能 修改 共享 数据 ， 只能 等待 写 线程 临界 区 状态 结束 后 才 可 访问共享 数据 ； 同样 ， 主线 程 修改 串口 发送数据 时 也 由 主线 程 临界 区 对象 加以 保护 。 结束语 　 　 本文 已 成功 地 应用 于 智能 大厦 监控 系统 电子 密码 门锁 网络 监控 分系统 的 实践 中 。 实践证明 ， 多线程 编程 实现 串行 通信 对于 近距离 的 RS 接口 通信 和 远距离 的 RS 接口 通信 都 能 取得 良好 的 效果 。 张志明 西北工业大学 电子信息 工程学院 西安 李蓉艳 西北工业大学 电子信息 工程学院 西安 王磊 同济大学 上海 参考文献 ， 郝杰 崔晓东 龚惠 等 译 BORLANDCBUILDER 编程 指南 北京 电子 工业 出版社 ， BorlandCBuilderOnlineHelp 收稿 日期 ：