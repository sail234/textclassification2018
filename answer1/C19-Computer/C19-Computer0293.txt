软件 学报 JOURNALOFSOFTWARE 年 第期 第卷 VolNo 基于 时间 窗口 的 增量 式 关联 规则 更新 技术 欧阳 为民 　 蔡 庆生 摘要 　 文章 提出 了 基于 时间 窗口 的 增量 式 关联 规则 更新 技术 该 方法 不仅 可以 利用 在 先前 发现 过程 中 已经 获得 的 结果 而且 利用 时间 窗口 还 可以 在 最近 的 数据 集中 进行 知识 发现 关键词 　 知识 发现 关联 规则 增量 式 更新 时间 窗口 中图法 分类号 　 TPATimeWindowBasedIncrementalTechniqueforUpdatingAssociationRulesOUYANGWeiminCAIQingshengComputerCenterAnhuiUniversityHefeiDepartmentofComputerScience 　 UniversityofScienceandTechnologyofChinaHefeiAbstract 　 AtimewindowbasedincrementaltechniqueforupdatingassociationrulesispresentedinthispaperwhichcannotonlyreusetheresultsacquiredinthepreviousdiscoveryprocessbutalsofocusthediscoveryontherecentdatasetusingtimewindowKeywords 　 Knowledgediscoveryassociationruleincrementalupdatetimewindow 　 　 在 数据库 中 发现 知识 knowledgediscoveryindatabases 简称 KDD 亦 称 数据 发掘 datamining 是 当今 国际 上 人工智能 和 数据库 研究 的 一个 主要 热点 课题 ［ ］ 在 KDD 研究 中 人们 较 多 地 侧重于 知识 发现 技术 与 工具 的 研究 而 对 已 发现 的 知识 的 更新 、 维护 问题 则 较 少 注意 ［ ］ 　 　 关联 规则 是 RakeshAgrawal 等 人 首先 提出 的 一个 重要 的 KDD 研究课题 ［ ］ 在 现实 世界 数据库 中 可以 发现 各种各样 的 时态 数据 例如 超市 的 交易 记录 有 时间 标记 、 病员 的 病历 数据 记录 、 天气 数据 日志 文件 等等 时态 数据 的 出现 使得 有 必要 在 知识 发现 过程 中 考虑 时间 因素 为此 本文 在 交易 数据库 的 背景 下 研究 了 时态 关联 规则 的 维护 问题 该 问题 的 关键 是 由于 数据 随 时间 的 变化 而 变化 当前 已 发现 的 某些 关联 规则 可能 不再 有效 而 可能 存在 的 新 的 有效 关联 规则 有待 进一步 去 发现 商业机构 中 的 交易 是 一个 不断 进行 的 过程 交易 行为 的 模式 很 可能 随 时间 呈现出 某种 发展趋势 或 周期性 这种 发展趋势 或 周期性 对于 市场 计划 与 分析 是 很 有 价值 的 本文 集中 讨论 时态 关联 规则 的 更新 与 存储 一种 方法 是 接受 所有 的 新 数据 连同 过去 的 旧 数据 一起 重新 运行 普通 的 关联 规则 发现 算法 该 方法 的 缺点 是 要 重新处理 已经 处理 过 的 数据 不能 有效 地 利用 已经 获得 的 结果 另 一种 方法 是 随着 新 数据 的 产生 增量 式 地 更新 关联 规则 集 尽可能 地 只 处理 新 数据 显然 后者 更 可取 因而 也 是 本文 所 采取 的 方法 　 　 目前 在 增量 式 更新 关联 规则 方面 已有 一些 工作 ［ ］ 但 均 未 考虑 时间 因素 因而 未能 明确提出 过时 数据 的 淘汰 策略 这样 就 不能 适应 时态 关联 规则 的 更新 维护 需要 为此 我们 提出 基于 时间 窗口 的 增量 式 关联 规则 更新 技术 该 算法 不仅 可以 利用 在 先前 发现 过程 中 已经 获得 的 结果 而且 利用 时间 窗口 还 可以 在 最近 的 数据 集中 进行 知识 发现 　 基于 时间 窗口 的 增量 式 更新 技术 　 　 所谓 时间 窗口 是 指 这样 一个 时间 区间 在 该 区间 之外 的 交易 数据 均 认为 是 过时 的 不 用于 当前 关联 规则 的 发现 过程 这样 发现 算法 便 可 集中 在 最近 的 数据 上 提高 了 发现 结果 的 时效性 常规 关联 规则 发现 算法 将 所有 规则 保存 在 一个 集合 中 这些 规则 适用 于 整个 数据库 ； 而 带 时间 约束 的 关联 规则 是 在 当前 时间 窗口 中 有效 的 关联 规则 　 　 令 当前 时间 窗口 为 Cur — Window 其 起止 时间 分别 为 Tstart 和 TendDB 为 在 当前 时间 窗口 Cur — Window 中 的 交易所 构成 的 交易 数据库 D 为 其中 的 交易 数 L 为 交易 数据库 DB 的 频繁 项目 序列 集 s 为 最低 支持 c 为 最低 信任 注意 s 和 c 均 为 百分数 假定 对 每个 项目 序列 X ∈ L 其 支持 数 Xsupport 即 在 DB 中 包含 X 的 交易 数是 可以 利用 的 　 　 设从 时间 Tend 开始 到 Tnow 结束 对 交易 数据库 作 了 某些 更新 新 的 交易所 构成 的 集合 为 dbd 为 db 中 的 交易 数新 时间 窗口 为 New — Window 其 起止 时间 分别 为 Tnow － Tend － Tstart 和 Tnow 这样 在 时间 Tnow ＋ Tstart － Tend 之前 的 交易 数据 不 在 新 时间 窗口 New — Window 中 应予 淘汰 记在 时间 Tnow ＋ Tstart － Tend 之前 的 交易所 构成 的 集合 为 retire 其 交易 数记 为 r 我们 记对 交易 数据库 更新 后 在 新 时间 窗口 New — Window 中 的 交易所 构成 的 交易 数据库 为 NewDB 那么 NewDBDB ∪ dbretire 对 同样 的 最低 支持 s 如果 某 项目 序列 X 在 新 时间 窗口 中 的 支持 不 低于 s 即 Xsupport ≥ s × D ＋ d － r 那么 X 在 NewDB 中 就是 频繁 的 　 　 基于 时间 窗口 的 关联 规则 更新 的 关键在于 发现 更新 后 在 新 时间 窗口 中 的 数据库 NewDB 中 的 频繁 项目 序列 集 NewL 注意 原 频繁 序列 集 L 中 的 频繁 序列 X 在 更新 后 的 数据库 NewDB 有 可能 不再 是 频繁 的 即 X ∈ L 但 XNewL 却是 可能 的 ； 而 不 在 L 中 的 频繁 序列 X 在 更新 后 的 数据库 NewDB 也 有 可能 变为 频繁 的 即 XL 但 X ∈ NewL 却是 可能 的 　 　 本文 余下 部分 采用 如下 记号 数据库 DB 中 长度 为 k 的 频繁 项目 序列 称为 频繁 k 项目 序列 的 集合 记为 Lk 更新 后 的 数据库 NewDB 中 的 新 的 频繁 k 项目 序列 集记 为 NewLkCk 为 算法 IWUP 第 k 次 循环 中 长度 为 k 的 候选 集 另外 XsupportDXsupportr 和 Xsupportd 以及 XsupportN 分别 为 项目 序列 X 在 DBretiredb 和 NewDB 中 的 支持 数 下面 我们 首先 讨论 TWUP 算法 的 第次 循环 接着 讨论 后继 的 各次 循环 限于 篇幅 这里 略去 完整 的 算法 描述 　 频繁 项目 序列 集 的 更新 　 　 在 推导 更新 后 数据库 存 NewDB 中 的 频繁 项目 序列 时 如下 性质 是 非常 有用 的 　 　 引理 某原 频繁 项目 序列 X ∈ L 在 更新 后 数据库 存 NewDB 中 是非 频繁 的 当且 仅 当 XsupportNs × D ＋ d － r 　 　 证明 ： 由 最低 支持 和 频繁 项目 序列 的 定义 可 直接 推知 　 　 引理 对 某 原非 频繁 项目 序列 XL 该 项目 序列 X 在 更新 后 数据库 NewDB 中是 频繁 项目 序列 的 必要条件 是 Xsupportd ≥ s × d ＋ k － r 其中 s × k 为 X 在 淘汰 数据库 retire 中 的 支持 数 　 　 证明 ： 既然 XL 那么 XsupportD ≤ s × D 假定 Xsupportd ＜ s × d ＋ k － r 那么 XsupportNXsupportD ＋ Xsupportd － s × ks × D ＋ s × d ＋ k － r － s × ks × D ＋ d － r 这样 X 在 更新 后 数据库 NewDB 中 就 是非 频繁 的 于是 引理 得证 　 　 基于 上述 两 引理 在 NewDB 中 发现 频繁 项目 序列 集 NewL 可 按 如下 步骤 进行 ： 　 　 遍历 淘汰 数据库 retire 计算 所有 项目 序列 X ∈ L 在 retire 中 的 支持 数记 为 Xsupportr ； 　 　 遍历 新增 数据库 db 计算 所有 项目 序列 X ∈ L 在 db 中 的 支持 数记 为 Xsupportd 从而 得到 L 中 所有 项目 序列 X 在 更新 后 数据库 NewDB 中 的 支持 XsupportNXsupportD ＋ Xsupportd － Xsupportr 检查 XsupportN 的 大小 如果 XsupportN 低于 s × D ＋ d － r 根据 引理 X 在 更新 后 数据库 NewDB 中 就 是非 频繁 的 因而 予以 淘汰 经过 这一 过滤 后 L 中 剩下 的 在 更新 后 数据库 NewDB 中 就是 频繁 项目 序列 　 　 在 对 db 和 retire 作 上述 遍历 的 同时 根据 db 中 的 每 一 交易 t 构造 不 在 L 中 的 候选 项目 序列 集 C 分别 计算 各 候选 在 db 和 retire 中 的 支持 按照 引理 对 C 中 的 任一 项目 序列 X 如果 Xsupportd ＜ s × d ＋ k － r 那么 X 在 更新 后 数据库 NewDB 中 就 必 是非 频繁 的 因此 可 将 X 从 C 中 删除 这样 我们 便 可 对 C 进行 修剪 删除 其中 所有 那些 在 db 中 的 支持 低于 s × d ＋ k － r 的 候选 　 　 对原 部分 数据库 DBretire 进行 遍历 计算 C 中 各个 候选 X 在 DBretire 中 的 支持 数 从而 得到 X 在 更新 后 数据库 NewDB 中 的 支持 数 XsupportN 通过 检查 XsupportN 是否 不 低于 s × D ＋ d － r 我们 可以 从 C 中 发现 新 的 频繁 项目 序列 更新 后 数据库 NewDB 中 的 频繁 项目 序列 集 NewL 由原 L 中 在 NewDB 中 仍 是 频繁 的 项目 序列 和 在 C 中 发现 的 新 频繁 项目 序列 共同 组成 　 　 与 Apriori 算法 的 第次 循环 相比 TWUP 算法 首先 从原 频繁 项目 序列 L 中 排除 在 更新 后 数据库 NewDB 中 不再 是 频繁 的 项目 序列 经此 过滤 后 L 中 剩下 的 在 更新 后 数据库 NewDB 中 就 全是 频繁 项目 序列 而 达到 这一 目的 仅 需 对 新增 数据库 db 和 淘汰 数据库 retire 作次 遍历 该 算法 还 根据 引理 对 根据 db 构造 出 的 候选 集 C 进行 修剪 排除 那些 不 可能 成为 新 频繁 项目 序列 的 元素 这两项 工作 均 在 对 新增 数据库 db 和 淘汰 数据库 retire 作次 遍历 中 完成 然后 该 算法 对原 部分 数据库 DBretire 作次 遍历 以 从 C 中 发现 新 的 频繁 项目 序列 与 此 形成 对照 Apriori 算法 必须 以 所有 数据 项目 构成 长度 为 的 候选 集对 整个 更新 后 数据库 NewDB 进行 遍历 以 发现 频繁 项目 序列 集 NewL 显然 TWUP 算法 所 涉及 的 候选 数 远远 少于 Apriori 算法 所 涉及 的 候选 数 　 频繁 k 项目 序列 集 的 更新 　 　 在 推导 更新 后 数据库 NewDB 中 频繁 项目 序列 集 NewL 时 下列 性质 将 是 有用 的 　 　 引理 如果 某 项目 序列 XXXk ∈ Lk 在 第 k 次 循环 中 发现 在 更新 后 数据库 NewDB 中 不再 是 频繁 的 即 XXXkNewLk 那么 包含 该 项目 序列 的 任何 原 频繁 k 项目 序列 Y ∈ Lk 对 k ≥ 在 更新 后 数据库 NewDB 中均 不 可能 成为 频繁 项目 序列 即 YNewLk 　 　 证明 ： 根据 频繁 项目 序列 的 任何 子项目 序列 均 必是 频繁 的 参阅 文献 ［ ］ 这一 性质 可以 推知 　 　 引理 原 频繁 k 项目 序列 集 Lk 中 的 任何 k 项目 序列 XXXk 在 更新 后 数据库 NewDB 中 是非 频繁 的 当且 仅 当 XXXksupportNs × D ＋ d － r 　 　 证明 ： 由 最新 支持 和 频繁 k 项目 序列 的 定义 可 直接 推知 　 　 引理 对 某 原非 频繁 k 项目 序列 XXXkLk 该 项目 序列 X 在 更新 后 数据库 NewDB 中是 频繁 k 项目 序列 的 必要条件 是 XXXksupportd ≥ s × d ＋ k － r 其中 s × k 为 XXXk 在 淘汰 数据库 retire 中 的 支持 数 　 　 证明 ： 类似 于 引理 　 　 基于 上述 引理 在 NewDB 中 发现 频繁 项目 序列 集 NewL 可 按 如下 步骤 进行 ： 　 　 根据 引理 从 L 中 删除 在 NewDB 中 不再 是 频繁 的 项目 序列 第 次 循环 所 识别 出 的 不再 是 频繁 的 项目 序列 的 集合 为 LNewL 对 任何 项目 序列 X ∈ L 如果 存在 某 子项目 序列 Y ∈ L － NewL 那么 X 在 更新 后 数据库 NewDB 中 就 不 可能 是 频繁 的 因而 可 将 X 从 L 中 删除 这样 我们 便 对 L 进行 了 修剪 　 　 分别 对 新增 数据库 db 和 淘汰 数据库 retire 作次 遍历 计算 修剪 后 L 中 每个 项目 序列 X 在 db 和 retire 中 的 支持 数 Xsupportd 和 Xsupportr 从而 计算 出 X 在 更新 后 数据库 NewDB 中 的 支持 XsupportNXsupportD ＋ XsupportdXsupportr 根据 引理 在 NewDB 中 淘汰 所有 非 频繁 项目 序列 这样 L 中 剩下 的 在 NewDB 中 就 全是 频繁 项目 序列 　 　 本 步骤 是 发现 新 的 频繁 项目 序列 首先 利用 候选 生成 算法 Apriori — gen ［ ］ 根据 NewL 生成 候选 集 C 注意 由于 L 中 的 项目 序列 已经 处理 过 了 所以 应从 C 中 删除 属于 L 的 项目 序列 然后 分别 对 db 和 retire 作次 遍历 计算 每个 候选 X 在 db 和 retire 中 的 支持 数 Xsupportd 和 Xsupportr 接着 对 C 作 进一步 修剪 即 对 任何 X ∈ C 如果 Xsupportd ＜ s × d ＋ k － r 那么 根据 引理 X 在 NewDB 中 就 必 是非 频繁 的 因此 可 将 X 从 C 中 删除 　 　 对原 部分 数据库 DBretire 进行 遍历 计算 C 中 各个 候选 X 在 DBretire 中 的 支持 数 从而 得到 X 在 NewDB 中 的 支持 XsupportN 对 每个 候选 X ∈ C 如果 XsupportN ≥ s × D ＋ d － r 那么 X 就是 新 的 频繁 项目 序列 NewDB 中 的 频繁 项目 序列 集 NewL 由原 L 中 在 NewDB 中 仍 是 频繁 的 项目 序列 和 在 C 中 发现 的 新 频繁 项目 序列 共同 组成 　 　 对 第 kk ≥ 次 循环 应用 上述 算法 直到 没有 新 的 候选 产生 时 为止 在 TWUP 算法 的 第 k 次 循环 中 各 数据库 仅遍 历次 对原 频繁 k 项目 序列 该 算法 只 对 新增 数据库 db 和 淘汰 数据库 retire 作次 遍历 就 可 发现 在 更新 后 数据库 NewDB 中 仍 是 频繁 的 k 项目 序列 ； 而 对 新 的 频繁 k 项目 序列 其 候选 集 Ck 根据 上次 循环 所 得到 的 NewDB 中 的 频繁 k 项目 序列 集 NewLk 生成 然后 利用 引理 和 引理 对 Ck 进行 修剪 经过 如此 修剪 后 的 候选 集 Ck 要 远远 小于 在 Apriori 算法 中 所 生成 的 候选 集 这 表明 在 关联 规则 更新 方面 TWUP 算法 的 性能 要 优于 重新 运行 Apriori 算法 　 小结 　 　 本文 提出 了 一种 基于 时间 窗口 的 增量 式 关联 规则 更新 维护 算法 利用 时间 窗口 技术 我们 得以 提高 关联 规则 集 与 当前 数据 的 相关性 同时 还 可 利用 已经 获得 的 结果 降低 规则 集 更新 的 处理 代价 TWUP 算法 已 在 PCM 内存 上用 VisualFoxPro 实现 并用 合成 数据 进行 了 测试 实验 表明 该 算法 思想 正确 具有 良好 的 可 扩放性 　 本文 研究 得到 国家自然科学基金 和 国家教委 博士点 基金 资助 本文 通讯联系 人 欧阳 为民 合肥 安徽大学 计算中心 作者简介 　 欧阳 为民 年生 博士 副教授 主要 研究 领域 为 KDD 机器 学习 人工智能 及其 应用 　 　 　 　 　 蔡 庆生 年生 教授 博士生 导师 主要 研究 领域 为 机器 学习 知识 发现 人工智能 作者 单位 ： 欧阳 为民 安徽大学 计算中心 　 合肥 　 　 　 　 　 　 欧阳 为民 　 蔡 庆生 中国 科学技术 大学 计算机系 　 合肥 　 参考文献 　 　 欧阳 为民 蔡 庆生 大型 数据库 中 多层 关联 规则 的 元 模式 制导 发现 软件 学报 ～ 　 　 OuYangWeiminCaiQingshengMetapatternguideddiscoveryofmultiplelevelassociationruleinlargedatabasesJournalofSoftware ～ 　 　 CheungDWHanJNgVetalMaintenanceofdiscoveredassociationrulesinlargedatabasesanincrementalupdatingtechniqueInProceedingsofInternationalConferenceonDataEngineeringhttpwwwcshkuhk ～ dcheung 　 　 AgrwalRSrikantRFastalgorithmforminingassociationrulesInProceedingsofthethVeryLargeDataBasesConference ～ httpwwwalmadenibmcomcsquest 　 　 CheungDWLeeSDKaoBAgeneralincrementaltechniqueforupdatingdiscoveredassociationrulesInProceedingsoftheInternationalConferenceonDatabasesSystemsforAdvancedApplicationshttpwwwcshkuhk ～ dcheung 　 　 FeldmanRAumannYAmirAetalEfficientalgorithmsfordiscoveringfrequentsetsinincrementaldatabasesInProceedingsofSIGMODWorkshoponResearchIssuesonDataMiningandKnowledgeDiscovery ～ httpwwwcsbiuacil ～ feldman 本文 收到 原稿 收到 修改稿