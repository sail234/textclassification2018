微型 电脑 应用 MICROCOMPUTERAPPLICATIONS 　 Vol 　 No 　 PWindowsX 硬件 中断 设备 驱动程序 的 开发 姜山 　 程君实 摘 　 要 ： 本文 介绍 了 在 基于 PC 和 WindowsX 平台 下 实现 实时控制 的 关键技术 一一 实 时钟 中断 的 获取 方法 ， 对 虚拟 设备 驱动程序 VxD 和 VtoolsD 工具箱 进行 了 简要 介绍 。 通过 对 源代码 的 分析 说明 了 实时 硬件 中断 VxD 的 实现 过程 。 关键词 ： 控制系统 　 实时 系统 　 虚拟 设备 驱动程序 VtoolsDAbstract ： ThispaperdescribesthemethodofacquiringrealtimeclockinterruptswhichisthekeytechnologyofrealtimesystemdesignbasedonPCandWindowsxTheVxDVirtualDeviceDriverandVtoolsDToolboxarealsointroducedbrieflyImplementationoftherealtimeinterruptVxDisillustratedbythesourcecodeanalysisKeywords ： controlsystem 　 realtimesystem 　 virtualdevicedriver 　 VtoolsD ▲ 一 、 绪言 　 　 在 计算机控制 领域 ， 随着 硬件 的 发展 ， 一些 原本 十分复杂 的 控制算法 的 设计 和 仿真 变得 越来越 容易 实现 。 与 基于 VME 、 MULTIBUS 以及 STD 总线 的 平台 相比 ， 基于 ISA 总线 的 高性能 PC 工控机 IPC 无疑 是 近来 应用 最为 广泛 的 主流产品 。 这 主要 得益于 IPC 与 PC 的 软件 兼容性 ， 此外 其 开放性 结构 、 外围 高性能 IO 模板 的 不断涌现 以及 实进 工业 网络 的 迅速 发展 都 为 IPC 创造 了 有利 的 发展 环境 。 可以 说 ， IPC 的 时代 已经 到来 。 此外 ， 在 当今 的 计算机控制 领域 中 ， 控制软件 是否 基于 Windows 平台 已经 成为 产品 是否 有 竞争力 的 重要 标准 之一 ［ ］ 。 目前 基于 Windows 平台 的 相关 产品 已经 占据 了 市场份额 的 。 而 WindowsX 和 WindowsNT 凭借 其 出色 的 多任务 、 图形 用户 接口 GUI 、 性能优越 的 硬件 兼容性 以及 卓越 的 位 软件 环境 等 性能 已经 越来越 广泛 地被 应用 于 工业 控制 ， 成为 实现 实时控制 的 优秀 平台 。 　 　 与 WindowsNT 及其 实时 扩展 PTX ［ ］ 相比 ， WindowsX 的 应用 更为 广泛 灵活 ， 而且 对 硬件 的 要求 并 不 苛刻 。 本文 将 讨论 在 WindowsX 下 实现 实时控制 的 关键技术 一一 实时 时钟 中断 驱动程序 的 设计 及 实现 。 二 、 WindowsX 下 实时 进钟 的 获得 　 　 在 实时控制 中 中断 技术 应用 得 十分 广泛 ， 其中 实时 时钟 的 获得 基本上 都 是 通过 中断 来 实现 的 。 时钟 控制 在 实时控制 中 处于 十分 重要 的 地位 ， 它 负责 推进 控制 过程 、 激活 各 控制 任务 或 发关 控制 消息 ， 起到 了 总 控制器 的 作用 。 在 WindowsX 下 实时 时钟 的 获得 可以 有 不同 的 方法 。 设置 Win 定时器 并 通过 响应 WMTIMER 消息 来 进行 实时处理 是 最 简单 的 方法 。 但是 由于 WMTIMER 消息 的 低优先级 和 未 处理 消息 在 消息 队列 中 的 组合 造成 了 系统 实时处理 的 不 稳定 ， 因此 这种 方法 只 适合 实时性 要求 不高 的 应用 。 若 采用 Windows 多媒体 定时器 ， 通过 设置 回调 函数 可以 获得 最高 精度 为 Ims 的 定时 信号 ， 但是 由于 占用 了 系统 宝贵 的 资源 ， 而且 当 定时 信号 由 用户 提供 或 需要 更 高 的 中断 频率 时 这种 方法 就 显得 无能为力 了 。 与 这些 基于 类似 软件 中断 的 方法 相比 ， 基于 硬件 中断 的 方法 占据 了 主导地位 ， 并 在 绝大多数 的 实时 系统 中 得到 了 应用 ， 因为 它 保证 了 对 实时 控制系统 至关重要 的 可靠性 。 本文 将 讨论 在 PC 和 WindowsX 环境 下 对于 实时 控制系统 的 设计 和 实现 中 最为 关键 的 硬件 中断 VxD 的 实现 。 三 、 VxD 及 VtoolsD 　 　 VxD 是 位 保护模式 下 的 可 执行 DLL ， 用于 管理系统 资源 。 所有 的 VxD 运行 于 WindowsVMM 的 监控 之下 。 VMM 和 VxDs 共同 构成 了 WindowsRing 层 的 系统 内核 。 　 　 开发 虚拟 设备 驱动程序 VxD 的 常规 方法 是 使用 Microsoft 出品 的 设备 驱动程序 开发 工具包 DDKDeviceDeveloperKit 。 这 要求 设计者 必须 对 Windows 的 体系结构 、 设备 驱动程序 的 结构 、 VMMVirtualMachineManager 即 虚拟机 管理器 以及 IntelCPU 体系结构 有 深入 的 了解 ， 而且 需要 保护模式 的 汇编语言 编程 经验 ［ ］ 。 但 正如 我们 现在 很少 有人 使用 SDK 开发 Windows 应用程序 ， 取而代之 以 MFC 或 OWL 等 C 类库 编程 一样 ， DDK 的 开发人员 现在 可以 使用 类似 VtoolsD 、 WinDriver 等 第三方 的 软件 来 编制 驱动程序 ， 笔者 推荐 使用 VtoolsD 。 　 　 Vireo 公司 出色 的 VtoolsD 由 可视 的 VxD 代码生成 器 QuickVxD 、 C 运行库 、 VMMVxD 服务 库 、 C 类库 以及 VxD 的 装入 程序 等 组成 。 利用 QuickVxD 生成 的 框架 程序 和 经 充分 测试 过 的 C 运行库 或 C 类库 可以 绕过 DDK 用 C 或 C 来 编制 驱动程序 ， 这 就 大大 地 简化 了 开发 的 难度 ， 提高 了 可靠性 。 框架 程序 可以 直接 在 VisualC 集成 开发 环境 中用 NMAKE 编译 为 VxD 。 四 、 硬件 中断 驱动程序 开发 实例 　 　 在 笔者 设计 的 自由度 仿人型 机器人 实时 仿真 和 控制系统 中 ， 为了 提高 系统 的 可移植性 ， 首先 通过 VxD 修改 PC 基板 上 CMOS 中 的 可编程 计数器 以 获得 KHz 的 系统 中断 频率 ， 并 截获 此 中断 来 进行 实时 调度 。 通过 对此 基本 定时 信号 的 调度 以 获得 诸如 对外部 多通道 的 模拟量 进行 采集 、 控制算法 处理 、 控制 结果 输出 以及 实时 屏幕 刷新 等 多任务 的 定进 信号 ［ ］ 。 这种 方法 不 需要 用户 提供 附加 的 硬件 定时器 。 开发 中 选定 Windows 作为 软件开发 平台 ， 为了 充分利用 位 CPU 和 操作系统 的 处理 能力 ， 选择 MicrosoftVisualC 作为 应用层 ring 开发工具 ， 应用程序 是 基于 MFC 。 而 VxD 是 通过 VtoolsD 编写 的 。 Ring 级 调试 工具 为 NuMega 公司 的 SoftIce 。 本文 将 对 Ring 和 Ring 两层 软件 的 设计 加以 说明 。 　 　 Ring 级 硬件 中断 VxD 的 设计 　 　 在 使用 QuickVxD 生成 框架 代码 的 过程 中 ， 在 DeviceParameters 选单 中 应选 中 DynamicallyLoadable 以 使得 驱动程序 能够 动态 加载 。 在 Windowscontrolmessages 选单 中 选中 WDEVICEIOCONTROL 消息 、 SYSDYNAMICDEVICEINIT 消息 及 SYSDYNAMICDEVICEEXIT 消息 。 这些 消息 的 处理函数 通过 以下 VxD 的 实现 代码 加以 说明 ： includevtoolscphincludewinioctlhdefineDEVICECLASSIrqtestDevicedefineIRQTESTDeviceIDUNDEFINEDDEVICEIDdefineIRQTESTInitOrderUNDEFINEDINITORDERdefineIRQTESTMajor 　 defineIRQTESTMinor 　 definewIFPASSEVENTCTLCODEFILEDEVICEUNKNOWNMETHODNEITHERFILEANYACCESSdefineRTCIRQ 实时 时钟 使用 的 IRQdefineSTATREGAxAdefineSTATREGBxBdefineSTATREGCxCdefingENABLEINTERRUPTxdefineWMMYMESSAGEx 自定义 消息 BOOLstdcallRTCIntHandlerVMHANDLEhVMIRQHANDLEhIRQ 时钟 中断 服务程序 VOIDWriteCMOSBYTEregBYTEvalueBYTEReadCMOSBYTEregclassIrqtestDevicepublicVDevice ｛ prblicvirtualBOOLOnSysDynamicDeviceInitvirtualBOOLOnSysDynamicDeviceExitvirtualDWORDOnWDeviceIoControlPIOCTLPARAMSpDIOCParams ｝ classIrqtestVMpublicVVirtualMachine ｛ publicIrqtestVMVMHANDLEhVM ｝ classIrqtestThreadpublicVThread ｛ publicIrqtestThreadTHREADHANDLEhThread ｝ IRQTESTcppmainmoduleforVxDIRQTESTdefineDEVICEMAINincludeirqtesthundefDEVICEMAInDeclareVirtualDeviceIRQTESTVPICDHWIntTHUNKRTCIntThunkhandler 中断 ThunkEVENTHANDLEhEventHandleoftimereventIRQHANDLERTCIRQHandle ； HandleforvirtualIRQBYTESavedStatusRegisterABYTESavedStatusRegisterB 保存 RTC 设置 寄存器 DWORDTickCounter 中断 计数器 DWORDPostMsghWndRing 层 应用程序 的 hWndHANDLEhWndIrqtestVMIrqtestVMVMHANDLEhVMVVirtualMachinehVM ｛ ｝ IrqtestThreadIrqtestThreadTHREADHANDLEhThreadVThreadhThread ｛ ｝ BOOLIrqtestDeviceOnSyaDynamicDeviceInit ｛ VMHANDLEhVMhVMGetCurVMHandleBYTEstatregDWORDstatusDWORDRTClockFreqIndex 挂接 硬件 中断 需要 调用 虚拟 可编程 中断 控制器 VPICD 来 通知 Windows 此 VxD 负责 处理 此 IRQ 。 在 这里 我们 只用 到 了 VPICD 提供 的 五个 不同 的 与 IRQ 相关 的 通知 事件 之一 ， 即 实际 的 硬件 中断 事件 。 structVPICDIRQDescriptorIRQdesc 此 结构 将 被 传入 VPICDVirtualizeIRQ 例程 进行 初始化 ， 以下 是 参数设置 。 IRQdeseVIDIRQNumberRTCIRQ 将要 被 虚拟 的 IRQIRQdescVIDOptions 保留 为了 在 此 结构 中 设置 中断 服务例程 的 地址 ， 我们 将 服务例程 thunk 的 地址 传递 给 VPICDThunkHWInt 它 将 负带 将 thunk 初始化 并 返回 它 的 地址 IRQdescVIDHwIntProcDWORDVPICDThunkHWIntRTCIntHandlerRTCIntThunkIRQdescVIDIRETTimeOut 此 结构 的 其它 变量 在 这里 没有 用到 。 通过 VPICDVirtualizeIRQ 服务 将 已 定义 结构 传入 VPICD ， VPICD 分配 IRQ 并 返回 其 句柄 RTCIRQHandleVPICDVirtualizeIRQIRQdescifRTCIRQHandlereturnFALSE 虚拟化 失败 保存 初始 RTC 状态 寄存器 以便 退出 时 恢复 现场 SavedStatusRegisterAReadCMOSSTATREGASavedStatusRegisterBReadCMOSSTATREGBRTClockFreqIndex 设置 中断 频率 ， 见下文 说明 ； statregSavedStatusRegisterA ～ xF ｜ RTClockFreqIndexxFWriteCMOSSTATREGAstatreg 设置 RTC 状态 寄存器 使得 statusregisterflagstoenableittoassertitsIRQstatregReadCMOSSTATREGBstatreg ｜ ENABLEINTERRUPTWriteCMOSSTATREGBstatregReadCMOSSTATREGCTickCounter 初始化 中断 计数器 保证 IRQ 在 PIC 中未 被 屏蔽 VPICDPhysicallyUnmaskRTCIRQHandlereturnTRUE ｝ BOOLIrqtestDeviceOnSysDynamicDeviceFxit ｛ 恢复 现场 ； CancelGlobalEventhEventWriteCMOSSTATREGASavedStatusRegisterAWriteCMOSSTATREGBSavedStatusRegisterBVPICDPhysicallyMaskRTCIRQHandleVPICDForceDefaultBehaviorRTCIRQHandlereturnTRUE ｝ DWORDIrqtestDeviceOnWDeviceIoControlPIOCTLPARAMSpDIOCParams ｛ switchpDIOCParamsdiocIOCtICode ｛ caseDIOCOPENCreateFile ｛ hWndRing 层 应用程序 主 窗口 句柄 初始化 return ｝ caseWIFPASSEVENTPostMsghWndDWORDpDIOCParamsdiocInBufhWndHANDLEPostMsghWnd 获得 主 窗口 句柄 returndefaultreturn ｝ return ｝ BOOLstdcallRTCIntHandlerVMHANDLEhVMIRQHANDLEhIRQ ｛ 在 中断 服务例程 中 ， 对 中断 计数器 计数 并 向 Ring 层 应用程序 发送 自定义 消息 ； ifhWndTickCounter ｛ SHELLPostMessagehWndWMMyMESSAGENULLNULL ｝ TickCounter ； ReadCMOSSTATREGC 清除 RTC 状态 标志 VPICDPhysEOIhIRQ 指定 VPICD 清除 此 中断 returnTRUEthunk 将 清除 进位 ｝ 篇幅 所 限 ， 针对 COMS 端口 操作 的 两个 函数 ReadCMOSBYTEreg 和 WriteCMOSBYTEregBYTEvalue 的 源程序 略 ， 请 参考 VtoolsD 连机 帮助 中 的 CHIME 例子 。 　 　 Ring 级主 应用 程序设计 　 　 将 生成 的 VxD 放入 主 应用程序 的 工作 目录 中 ， 用 CreateFile 函数 动态 加载 VxD 。 hDeviceCreateFileirqtestvsdOPENALWAYSFILEFLAGDELETEONCLOSE 需要 挂接 中断 时 ， 调用 DeviceIoControl 将 主程序 窗口 的 句柄 传递 给 正 运行 的 VxD 。 MainCWndAfxGetMainWndinBuf ［ ］ MainCWndmhWndifDeviceIoControlhDeviceWIFPASSEVENTinButsizeofPVOIDRetInfosizeofRetInfocbBytesRetumedNULLAfxMessageBoxDeviceIoCtlFailedMBOK 与 VxD 通讯 失败 然后 在 自定义 消息 处理函数 中 加入 自己 的 实时处理 代码 。 需要 说明 以下几点 ： 　 　 在 VxD 的 中断 处理函数 中 可以 加入 对 实时性 要求 最高 的 代码 ， 原则上 应 尽快 返回 以 提高 中断 频率 和 避免 重 入 ； 　 　 中断 频率 的 选择 参数 n 有 以下 选择 ： n 频率 Hzn 频率 Hz 　 　 本文 介绍 的 方法 同样 适用 于 编写 其他 普通 硬件 中断 VxD 。 　 　 在 中断 频率 较 高 的 数据 采集 系统 中 。 可以 设置 双 缓冲区 来 实现 实时 中断 与 处理 线程 的 同步 。 五 、 结论 　 　 本文 在 对 PC 和 WindowsX 和 X 进行 了 细致 的 研究 之后 ， 分析 了 在 其 上 构造 实时 系统 的 方法 ， 并 通过 详细 的 应用 示例 给出 了 具体 的 说明 。 本文 使用 的 方法 具有 通用性 和 易用性 ， 在 笔者 设计 的 自由度 仿人型 机器人 控制系统 中 运行 良好 。 本文 介绍 的 方法 对于 开发 WindowsX 实时 控制系统 具有 实际 的 参考价值 。 ■ 作者 单位 ： 姜山 上海交通大学 存储 研究 中心 参考文献 ： ［ ］ DeanJPetroneMichaelDStackhousePCBasedControlGoesRealtimeControlEngineeringApil ［ ］ MartinTimmermonWindowsNTRealtimeextensionsbetterorworseRealtimeMagazineMar ［ ］ 张维铭 ， 使用 VtoolsD 开发 Windwos 虚拟 设备 驱动程序 ， 中国 计算机用户 ， ［ ］ PaoloFioriniHomayoumSerajiMarkLongAPCBasedConfigurationControllerforDexterousDOFArms ［ M ］ IEEERoboticsandAutomationMagazineVolumeSeptemberpp 收稿 日期 ：