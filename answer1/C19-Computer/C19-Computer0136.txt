计算机 应用 COMPUTERAPPLICATIONS 年 第卷 第期 VolNo 用 NSAPI 增强 WebServer 功能 汤敏 　 郑纪 蛟 　 　 摘 　 要 　 本文 介绍 了 HTTP 协议 的 简单 工作 过程 和 NSAPI 的 有关 知识 ， 并 讲述 了 如何 用 NSAPI 编写 自定义 SAF 。 　 　 关键词 　 HTTPNSAPISAFCGI 　 NSAPI 基础 ． 　 简介 　 　 NSAPI 是 NetscapeServerApplicationProgrammingInterface 的 缩写 ， 它 是 用来 实现 SAFs 即 ServerApplicationFunctiions ， Server 已 自身 带有 一套 SAFs ， 你 可以 用 NSAPI 编写 自己 的 SAFs 以便 扩展 Server 功能 的 ， 让 服务器 能够 把 对 请求 的 处理 分成 若干 小 的 步骤 来 完成 ， 这样 就 可以 合理安排 每 一个 小 的 步骤 ， 从而 满足 较 好 的 速度 和 灵活性 的 要求 。 NSAPI 是 由 NCSA 和 CERNWebServer 的 开发者 设计 的 为 程序员 提供 了 速度 、 与 Server 结合 的 紧密性 以及 灵活性 ， 但 同时 又 都 需要 对 WebServer 的 处理过程 有 较 深 的 理解 。 你 如果 是 写 CGICommonGatewayInterface ） 就 不会 用到 NSAPI ， 而 只 需用 WAI （ WebApplicationInterface ） ； 如果 想 开发 有 自己 特色 的 身份验证 ， 登录 过程 ， 或者 是 想 修改 已有 的 Server 的 行为 ， 你 就 会 用到 NSAPI 。 　 HTTP 基础 　 　 HTTP 协议 是 快速 、 简单 和 可 扩展 的 协议 ， 协议 的 具体内容 我们 在 此 不作 讲解 ， 有 兴趣 的 读者 可 自己 参阅 有关 文献 。 下面 ， 我们 对 HTTP 的 工作 过程 作 一个 大致 浏览 ： 　 　 浏览器 和 服务器 相连接 并且 发送 请求 。 　 　 服务器 接收 请求 ， 产生 答复 并 断开连接 （ 如果 接收 的 是 一个 要求 保持 连接 的 请求 ， 则 不 断开连接 直到 下 一个 请求 到来 ） 。 　 　 请求 是 由 MethodUniversalResourceIdentifierURI 以及 由 空格 分开 的 HTTP 协议 版本信息 组成 。 请求 通常 由 几个 头 （ headers ） 和 标志 着 头 结束 的 一行 空格 ， 时常 还有 主体 数据 （ bodydata ） 组成 。 Header 提供 请求 或 客户 的 有关 信息 ， Bodydata 典型 的 是 POST 和 GET 方法 。 　 　 典型 的 一般 都 是 像 下面 的 样子 ： 　 　 GETindexhtmlHTTPUseragentMozillaAccepttexthtmltextplainimagejpegimagegif 　 　 服务器 收到 请求 并 处理 它 ， 且 每次 只 处理 一个 请求 ， 虽然 服务器 能够 同时 处理 多个 请求 。 处理 一个 请求 必须 经过 几个 步骤 。 我们 称 这种 处理 方式 为 “ 请求 应答 处理 ” （ RequestResponseprocess ） ， 用 NSAPI 写 的 SAFs 正是 在 这种 处理过程 中 被 执行 。 　 　 服务器 产生 一个 包含 HTTP 协议 版本 、 HTTP 状态 码 statuscode 以及 被 空格 分开 的 解释 短语 （ reasonphrase ） 的 应答 ， 通常 应答 后面 是 几个 头 （ header ） 和 应答 的 主体 数据 （ bodydata ） 。 典型 的 应答 如下 所示 ： 　 　 HTTPOKServerNetscapeEnterpriseServerContenttypetexthtmlContentlengthHTMLHEADTITLEHelloWorldTitleHEADBODYHelloWorldBODYHTML 　 　 状态 码 和 解释 短语 告诉 浏览器 服务器 如何 处理 了 请求 。 一般 状态 码 表明 服务器 成功 处理 了 请求 并且 主体 数据 含有 请求 所要 的 项目 ， 其他 状态 码是 重定向 请求 于 其他 服务器 或 浏览器 的 缓存 （ cache ） 或者 是 出 了 错误 （ 如是 找 不到 被 请求 的 项目 ） 。 　 请求 答复 处理 　 　 当 服务器 第一次 启动 时 它 要 执行 一些 初始化 工作 然后 等待 HTTP 请求 。 　 　 请求 答复 处理 通常 由 六个 连续 的 步骤 构成 ： 　 　 aAuthTransauthorizationtranslation 对 请求 进行 身份验证 （ 如 姓名 和 密码 ） ； 　 　 bNameTransnametranslation 将 逻辑 URI （ 统一 资源 标识 ） 转换 为 本地 文件系统 路径 ； 　 　 cPathCheckpathechecking 检验 本地 文件系统 路径 的 有效性 和 请求 用户 的 权限 ； 　 　 dObjectTypeobjecttyping 确定 被 请求 资源 的 MIME （ MultipurposeInternetMailEncoding ） 类型 如 texthtmlimagegif 等等 ； 　 　 eServiceservice 将 答复 返回 给 客户 ； 　 　 fAddLogaddinglogentries 在 日志 文件 添加 一条 记录 。 　 　 每 一步 为 达到 它 的 目的 都 需要 执行 一番 操作 ， 而 这些 操作 是 通过 SAFs 实现 的 。 服务器 内 带有 多种 SAFs ， 这些 SAFs 实现 服务器 的 功能 和 它 的 高级 特性 。 　 　 每 一个 SAF 都 有 自己 的 设置 ， 并且 它 还 有权 访问 到 请求 的 相关 信息 和 由 以前 SAFs 创建 和 修改 过 的 服务器 变量 （ ServerVariables ） ， SAF 依靠 这些 信息 执行 自己 的 操作 。 SAF 还 可以 根据 目前 的 请求 和 自身 范围 内 的 目的 检查 、 修改 或 创建 服务器 变量 。 　 　 每 一个 SAF 有 返回 代码 以便 告诉 服务器 是否 执行 成功 。 服务器 依据 这些 返回 代码 可以 决定 是 跳 到 下 一步 、 执行 当前 一步 的 下 一个 SAF 还是 取消 处理 。 　 　 通常 ， 所有 这些 步骤 是 按 顺序 完成 的 ， 产生 的 答复 发送给 客户 （ 在 Service 这 一步 ） ， 然后 在 日志 文件 中 增加 一条 记录 。 然而 ， 如果 处理 因为 什么 原因 而 被 取消 （ 如 请求 的 资源 不 存在 或 用户 无权 访问 等 ） ， 服务器 就 跳 到 一个 新 的 称作 “ Error ” 的 步骤 ， 这样 Error 处理 步 就 替代 了 Service 步 。 ErrorSAF 会 给 客户 发送 描述 问题 的 HTML 页面 ， 然后 计入 日志 文件 。 　 指示 和 服务器 内含 SAFs 　 　 EnterpriseServer 是 通过 几个 文本文件 来 配置 的 。 这 几个 配置文件 存放 于 服务器 的 主目录 （ homedirectory ） 的 config 目录 下 （ httpsservernameconfig ） 。 其中 我们 感兴趣 有 三个 ： magnusconfobjconf 和 mimetypes 。 magnusconf 文件 是 服务器 的 主 配置文件 ， 它 决定 服务器 的 名字 、 端口号 和 其他 一些 全局性 设置 ； mimeconf 文件 决定 如何 将 文件 扩展名 映射 成 HTTP 的 文件类型 ； objconf 文件 用来 配置 初始化 和 请求 应答 处理 中 每 一步 SAFs 的 操作 。 你 可 编辑 这个 文件 以便 安装 和 配置 自己 的 SAFs 。 　 　 objconf 文件 中 含有 指导 初始化 和 请求 应答 处理 中 每 一步 SAFs 的 操作 的 指示 行 （ directiveline ） 。 请求 应答 的 指示 （ directives ） 按照 Object 标记 分成 对象 （ Objects ） 组它 以 标签 Object 开始 以 标签 Object 结束 。 将 它们 称为 “ 对象 ” 是因为 它们 继承 其它 对象 的 行为 。 缺省 的 对象 控制 服务器 对 所有 请求 的 缺省 操作 。 其它 对象 要 针对 特定 请求 继承 和 （ 或 ） 修改 缺省 的 对象 行为 。 　 　 当 对象 的 参数 与 目前 请求 中 的 值 相匹配 时 ， 它 就 被 使 能 （ Enabled ） 。 一个 对象 标签 有 name 和 ppath 两个 参数 ， 它们 都 可 有 自己 的 通配符 。 例如 ： 　 　 Objectnamecgi 或 Objectppathusrnetscapesuitespotdocsprivate 　 　 当 对象 中 指示 的 name 参数 为 “ default “ 时 它 总是 使能 的 。 处于 使能 状态 时 ， 其它 对象 中 的 指示 就象 缺省 对象 中 的 同种 指示 一样 ， 这 就让 我们 可以 改变 缺省 对象 的 行为 。 　 　 指示 行 决定 在 请求 应答 的 每 一步 应 执行 哪些 SAF 。 指示 行 语法 格式 如下 ： 　 　 Directivefnfuncname ［ namevalue ］ … ［ nameNvalueN ］ 　 　 Directive 是 服务器 的 一个 指示 ， funcname 是 要 执行 的 SAF ， nameNvalueN 是 传给 SAF 的 参数 名称 和 值 。 　 　 以下 是 服务器 的 指示 和 描述 ： 　 　 Init ： 初始化 服务器 各 子系统 和 共享资源 ； 　 　 AuthTrans ： 验证 HTTP 请求 中 的 身份 信息 并 将 其 转换成 用户 和 （ 组 ） 。 服务器 的 权限 控制 分为 两个 阶段 ： 先是 AuthTrans 验证 用户 的 身份 ， 后来 PathCheck 检查用户 所 要求 的 资源 的 存取 权限 。 　 　 NameTrans ： 将 请求 中 的 URL 中 的 转化 为 物理 文件系统 的 路径 。 　 　 PathCheck ： 检查 NameTrans 中所 转化 的 物理 路径 的 有效性 和 存取 权限 。 　 　 ObjectType ： 决定 请求 资源 的 MIME 的 类型 。 　 　 Service ： 发送 结果 给 客户 。 　 　 Error ： HTTP 错误 （ REQ — — ABORTED ） 。 　 　 AddLog ： 记录 事务处理 有关 的 信息 。 　 创建 自己 的 SAFs 　 SAF 接口 　 　 所有 的 SAF 都 有 相同 的 “ C ” 接口 ， 而 不管 它们 是 为 哪 一步 服务 的 。 SAF 都 是 一些 为 请求 应答 处理 中 的 某 一步 实现 特定 功能 的 小 函数 。 它们 从 objconf 文件 、 server 和 以前 的 SAF 中 接受 参数 。 下面 是 SAF 的 “ C ” 接口 ： 　 　 intfunctionpblockpbSessionsnRequestrq 　 　 pb 含有 objconf 文件 中 的 SAF 配置 行 参数 ， sn 含有 与 单个 TCPTP 会话 有关 的 信息 ， rq 含有 与 当前 请求 相关 的 信息 。 SAF 还有 返回 码 表示 该 函数 执行 的 情况 ， 服务器 根据 返回 码 决定 如何 处理 当前 的 请求 。 　 创建 一个 自定义 SAF 　 　 自定义 SAF 是 一组 存在 于 由 服务器 加载 和 调用 的 共享 库中 的 函数 。 下面 是 创建 自定义 SAF 的 步骤 ： （ 后面 附有 一例 ） 　 　 a 用 NSAPI 编写 自定义 SAF 的 源程序 ， 每 一个 SAF 为 一个 指示 （ directive ） 服务 。 　 　 注意 ： 写 SAF 时要 写 线程 安全 （ threadsafe ） 的 程序 ， 任何 阻塞 （ blocking ） 都 可能 影响 服务器 性能 ， 每个 SAF 都 带有 参数 ， 参数 可 在 objconf 中 设置 。 　 　 b 编译 并 链接 源程序 ， 创建 共享 库 （ soslordll ） 文件 。 编译 要 用 特定 平台 的 编译器 ， WindowsNT 可用 MicrosoftVisualC 。 服务器 根目录 下 的 include 目录 里 有 NSAPI 的 头文件 ， 现在 所有 的 头文件 信息 都 包含 在 “ nsapih ” 文件 中 ， 其他 头文件 都 是 向 后 兼容 的 ， 只要 简单 的 包括 “ nsapih ” 即可 。 　 　 c 修改 objconf 文件 配置 服务器 以便 加载 含有 自定义 SAF 的 共享 库 ， 使 在 适当 时 调用 自定义 SAF 。 　 　 先 在 objconf 文件 中 其他 初始化 指示 后加 下面 一行 ： 　 　 Initfnloadmodulesshlib ［ path ］ sharedlibnamefuncsSAFSAFn 　 　 shlib 是 共享 库 在 本地 文件系统 中 的 路径 ， funcs 是 一系列 由 逗号 分开 的 可 从库 中 加载 的 的 函数 名 ， 函数 名是 区分 大小写 的 。 　 　 然后 再 加 下面 一行 以便 在 适当 时 调用 自定义 SAF ： 　 　 Directivefnfuncname ［ namevalue ］ ［ nameNvalueN ］ 　 　 Directive 是 服务器 的 一个 指示 ， funcname 是 要 执行 的 函数 名 。 　 　 d 先 停止 然后 再启动 服务器 。 WindowsNT 里 可 从 控制面板 里 停止 和 启动 服务器 ， unix 里 可用 命令 stop 和 start ， 但 不能 用 restart ， 因为 这样 重新启动 不会 重新 加载 库 。 　 　 e 从 浏览器 访问 服务器 以便 测试 自定义 SAF 。 注意 的 是 一定 要 禁止 cache 功能 。 在 Navigator 可以 再 点击 reload 按钮 时 按住 shift 键 。 　 　 例 ： （ 本例 是 执行 身份 认证 的 函数 ） includebasepblockhincludebasesessionhincludeframereqhtypedefstructcharnamecharpwuser — sstaticuser — suser — set ［ ］ joeshmoesuzycreamcheeseNULLNULLincludeframeloghifdefXP — WINdefineNSAPI — PUBLIC — 　 — 　 declspecdllexportelseXP — WINdefineNSAPI — PUBLICendifXP — WINNSAPI — PUBLICinthardcoded — authpblockparamSessionsnRequestrq 由 用户 身份 认证 得到 的 参数 charpwfilepblock — findvaluserdbparamcharuserpblock — findvaluserparamcharpwpblock — findvalpwparam 临时 变量 registerintxforxuser — set ［ x ］ nameNULLx 如果 不是 我们 预期 的 用户 ， 则 继续 ifstrcmpuseruser — set ［ x ］ namecontinue 验证 口令 ifstrcmppwuser — set ［ x ］ pwlog — errorLOG — SECURITYhardcodedauthsnrqusersenteredwrongpassworduser 再 问 一次 以便 增强 函数 功能 returnREQ — NOACTION 如果 返回 REQ — PROCEED 则 该 用户 为 我们 所 接受 returnREQ — PROCEED 如果 不 匹配 ， 再 问 一次 log — errorLOG — SECURITYhardcodedauthsnrqunknownusersuserreturnREQ — NOACTION 作者简介 ： 汤敏 　 硕士 研究生 。 研究 方向 ： 计算机网络 和 信息 通信 系统 。 郑纪 蛟 　 教授 。 研究 方向 ： 计算机网络 和 通信 、 当前 主要 从事 远程教育 研究 。 作者 单位 ： 浙江大学 计算机系 　 浙江 杭州 （ ） 参考文献 ［ ］ 　 TBernersLeeRFieldingHNielsenHypertextTransferProtocolHTTPRFC ， ； ［ ］ 　 TonyBeveridgePaulMcglashanISAPINSAPIWeb 高级 编程 北京 ： 中国 水利水电 出版社 ， ， 收稿 日期