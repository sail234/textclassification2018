计算机 工程 COMPUTERENGINEERING 年 第卷 第期 volNo 一种 基于 Agent 的 决策支持系统 生成器 新 框架 刘 　 宏 　 袁 　 捷 　 　 当今 决策 显现出 了 一些 新 的 特性 。 如 ， 影响 决策 结果 的 因素 增多 ， 与 决策问题 相关 的 信息源 种类 增多 信息量 增大 ， 决策问题 的 非 结构化 程度 、 复杂性 增强 等等 。 针对 新 的 决策 形势 ， 决策支持系统 DSS 领域 的 研究 人员 不断 提出 新 的 观点 。 如 ， 在 决策支持系统 的 框架结构 方面 ， 为了 强调 对 整个 决策问题 的 管理 和 处理 ， 我们 曾 综合 了 Sprague 等 人 的 DMD 结构 和 Bonczek 等 人 的 LPK 结构 ， 从 Sprague 的 框架 出发 ， 增设 问题 处理 组分 、 问题 管理 组分 和 知识 组分 ， 设计 了 一个 智能化 决策支持系统 生成器 IDSSG 框架 ； 为了 实现 信息 集成 ， 改善 建模 和 进行 知识 抽取 BaSulin 等 人 设计 了 一个 基于 clientbrokerserver 框架 的 Intranet 决策支持系统 ； 为了 解决 复杂 决策问题 和 实时 决策问题 ， 也 有人 开始 将 多 Agent 模型 引入 决策支持系统 。 所有 这些 框架 的 提出 与 实现 ， 各自 适用 于 不同 的 场合 ， 都 在 不同 程度 上 满足 了 新 的 决策 形势 的 需求 。 为了 有利于 部门 之间 知识 资源 的 共享 ， 扩大 知识 来源 的 范围 ， 进一步提高 决策支持系统 的 智能化 程度 ， 笔者 在 借鉴 现有 决策支持系统 框架 的 基础 上 ， 结合 计算机网络 、 人工智能 等 领域 的 新 发展 ， 设计 了 一个 基于 Agent 的 决策支持系统 生成器 框架 。 基于 Agent 的 决策支持系统 生成器 框架 　 　 决策支持系统 生成器 DSSG 　 　 开发 决策支持系统 一般 有 两种 方法 ： 一种 是 ， 针对 特定 问题 一次性 地 建立 一个 专用 DSS ， 但是 这种 方法 工作量 大 ， 开发周期 长 ， 不能 满足 决策 的 时限 要求 ， 对 开发者 的 要求 较 高 。 另 一种 是 ， 以 决策支持系统 生成器 为 基础 来 开发 专用 DSS ， 这种 方法 方便 、 灵活 、 效率高 ， 支持 反复 设计 过程 ， 使 专用 DSS 能 对 组织 机构 、 外部环境 、 用户 风格 及 任务 的 性质 等 情况 的 变化 作出 快速 响应 。 　 　 目前 在 决策支持系统 生成器 概念 的 理解 上 有 两种 观点 。 一种 观点 认为 ， 决策支持系统 生成器 是 一个 由 一些 预制件 和 第四代 语言 工具 构成 的 集成 软件 ， DSS 开发人员 以 它 为 开发 环境 建立 专用 的 DSS 。 另 一种 观点 认为 决策支持系统 生成器 是 生成 专用 DSS 所 需 的 基本 框架 ， 已 具有 辅助 和 支持 决策 用户 所 需 的 基本 的 体系结构 和 内部 控制 机制 ， 但 需要 DSS 开发人员 在 此 基本 框架 下 补充 数据库 、 模型库 和 知识库 等 的 具体内容 ， 内容 不同 ， 便 构成 了 不同 的 专用 DSS 。 笔者 综合 了 上述 两种 观点 ， 认为 决策支持系统 生成器 是 一个 框架 性 的 决策支持系统 开发 环境 ， 它 集成 了 建立 专用 DSS 所 需要 的 预制件 和 基本 工具 ， 可 根据 目标 DSS 的 特殊 需要 集成 入 新 的 预制件 ； 但是 这些 预制件 中 有些 可能 只是 框架 性 的 ， 需由 DSS 开发人员 补充 数据库 、 模型库 和 知识库 等 的 具体内容 。 　 　 将 Agent 引入 决策支持系统 生成器 　 　 研究 开发 决策支持系统 生成器 的 目的 就是 为 DSS 开发人员 提供 一个 框架 性 的 开发 环境 ， 以便 高效 、 灵活 地 开发 出 专用 DSS 。 因此 ， 为了 说明 为何 在 决策支持系统 生成器 中 引入 Agent ， 需先 考察 Agent 本身 及其 在 决策支持系统 中 的 作用 。 　 　 Agent 是 一种 抽象 实体 ， 它 具有 自主性 、 社会 能力 、 反应 能力 和 能动性 。 还 有些 人 认为 Agent 应 具有 一些 人类 才 具有 的 概念 ， 如 知识 、 学习 、 信念 、 义务 等 。 　 　 这些 特性 ， 使得 Agent 至少 可以 在 解决 决策支持系统 在 以下 个 问题 方面 有所 帮助 。 　 　 Agent 具有 社交能力 ， 通过 Agent 之间 的 交互 ， 位于 网络 不同 节点 的 部门 之间 不仅 可以 方便 地 共享 数据 ， 而且 可以 方便 地 共享 模型 、 规则 、 方案 和 方法 等 资源 ， 从而 扩大 决策 部门 知识 来源 的 范围 ； 并且 ， 由于 Agent 具有 自主性 ， 与 知识 的 组织 、 搜索 和 选取 等 有关 的 繁琐 、 机械 的 任务 可 交给 相关 的 Agent 去 完成 ， 决策 用户 可 将 大部分 精力 集中 于 决策问题 本身 。 不仅 于 此 ， 个别 部门 还 可以 将 一个 决策问题 分解 为 一系列 子 问题 交由 下级 或 同级 部门 去 解决 ， 从而 在 一定 程度 上 支持 分布式 决策 过程 。 　 　 Agent 可以 拥有 本地 知识 ， 并 被 赋予 一定 的 学习 能力 ， 这是 Agent 智能 行为 的 体现 。 Agent 通过 个体 学习 或 群体 学习 可以 提高 自身 的 性能 ， 这 包括 更 合理 的 知识结构 和 更 有效 的 工作 等 ， 从而 有望 提高 整个 系统 的 性能 。 　 　 由于 Agent 具有 自主性 ， 整个 系统 的 稳定性 可以 得到 增强 ， 不会 因为 某个 子系统 出错 而 导致 整个 系统 崩溃 。 　 　 可以 通过 Agent 改造 、 封装 原有 系统 的 部分 代码 ， 只要 使 其 对外 呈现出 一种 具有 良 定义 的 Agent 行为 ， 就 可 将 之 集成 到 基于 Agent 的 新 系统 中 去 ， 从而 在 一定 程度 上 保护 了 在 原有 系统 上 的 投资 。 基于 以上 理由 ， 我们 把 Agent 作为 决策支持系统 生成器 的 基本 集成 单元 。 　 　 决策支持系统 生成器 的 总体 框架 下面 给出 笔者 所 设计 的 一个 基于 Agent 的 决策支持系统 生成器 总体 框架 ， 如图所示 。 图 基于 Agent 的 决策支持系统 生成器 的 总体 框架 　 　 DSS 开发人员 可 在 该 框架 下 开发 分布式 的 专用 DSS ， 其中 数据 Agent 、 模型 Agent 、 规则 Agent 和 问题 Agent 构成 一个 Agent 群 ， 它 是 与 实际 生活 中 的 一个 决策 部门 相对 应 的 局部 决策 单元 。 各类 Agent 在 实际 决策 过程 中 的 作用 如下 ： 问题 Agent 一方面 和 决策 用户 交互 ， 支持 对 本地 问题 的 描述 、 分解 和 求解 以及 对 结果 的 评价 ， 另一方面 为 其它 部门 提供 知识 资源 、 解决 结构化 程度较高 的 决策问题 ； 数据 Agent 、 模型 Agent 和 规则 Agent 负责 向本 部门 问题 Agent 提供数据 、 模型 和 规则 ； 协调 Agent 响应 问题 Agent 提出 的 资源 请求 ， 寻求 其它 部门 提供 所 需 的 数据 、 模型 或 规则 ， 并且 ， 协调 Agent 还 可 将 问题 Agent 提交 的 结构化 程度较高 的 决策问题 转 交给 其它 部门 的 问题 Agent 去 解决 ， 待 求解 后 将 结果 返回 。 　 　 在 以 上述 生成器 为 开发 环境 开发 专用 DSS 的 过程 中 ， DSS 开发人员 可能 要 做 两个 方面 的 工作 。 一是 ： 根据 个别 部门 的 特殊 需求 ， 利用 随 决策支持系统 生成器 一起 提供 的 基本 类库 和 工具 开发 出 特殊 类型 的 Agent 然后 将 新 的 Agent 成员 集成 入 已有 系统 ， 为 决策 用户 提供 特殊 的 支持 。 二是 ： 补充 数据 Agent 中 的 数据 、 模型 Agent 中 的 模型 、 规则 Agent 中 的 规则 、 问题 Agent 中 本地 字典 的 具体内容 及其 分类 和 索引 、 以及 协调 Agent 中 全局 字典 的 具体内容 及其 分类 和 索引 ， 从而 在 此 决策支持系统 生成器 上 构造 出 具有 不同 目标 、 资源 、 选择 原则 、 学习 内容 等 的 上述 类 Agent ， 进而 构造 出 满足 特定 需要 的 专用 DSS 。 本 框架 中 各类 Agent 的 结构 说明 　 　 数据 Agent 、 模型 Agent 和 规则 Agent 　 　 这种 Agent 的 结构 相似 ， 本文 只 给出 它们 的 结构图 如图 图 数据 Agent 、 模型 Agent 和 规则 Agent 的 结构 　 　 问题 Agent 　 　 问题 Agent 的 结构 如图 。 问题 描述 模块 帮助 决策 用户 描述 决策问题 。 问题 分解 模块 采用 人机交互 的 方式 将要 分解 的 决策问题 特别 是 一些 含有 非 结构化 成分 或 复杂程度 较大 的 决策问题 在 空间 上 进行 分解 直到 得到 一组 结构化 、 可 映射 到 结构化 或 仍 带有 一定 非 结构化 程度 的 子 问题 然后 将 这些 子 问题 交由 问题 求解 模块 进行 求解 。 通过 查询 本地 字典 问题 Agent 可知 本地 的 数据 Agent 、 模型 Agent 和 规则 Agent 能否 提供 解决问题 所 需 的 数据 、 模型 和 规则 。 若 本地 Agent 无法 提供 所 需 资源 ， 问题 求解 模块 可 通过 通信 模块 向 协调 Agent 提出 资源 请求 。 问题 求解 模块 还 可 将 某些 结构化 程度较高 的 子 问题 提交 给 协调 Agent ， 通过 协调 Agent 的 协调 作用 寻求 由 其它 部门 解决 。 最后 ， 问题 求解 模块 对子 问题 进行 与 分解 逆向 的 综合 和 解释 ， 得到 问题 的 最终 解 ， 并 交由 评价 模块 对 结果 进行 评价 。 若 决策 用户 对 结果 不 满意 ， 可 对 问题 进行 重新 描述 、 分解 和 求解 ， 直到 得到 满意 解 为止 。 问题 求解 模块 还 可 响应 由 其它 部门 提交 的 资源 请求 或 结构化 程度较高 的 决策问题 ， 待 求解 后 ， 通过 协调 Agent 将 结果 返回 给 请求 方 。 通信 模块 负责 与 协调 Agent 、 本地 数据 Agent 、 模型 Agent 和 规则 Agent 通信 。 图 问题 Agent 的 结构 　 　 在 对 决策问题 进行 描述 、 分解 、 求解 和 评价 的 过程 中 ， 一方面 ， 这些 模块 取得 问题 库 和 本地 字典 中 的 知识 ； 另一方面 ， 学习 模块 将 通过 学习 获得 的 知识 存储 于 问题 库 和 本地 字典 中 。 另外 ， 问题 库中 存储 本 部门 决策 用户 提出 的 决策问题 及其 解决方案 的 描述 。 本地 字典 中 记录本 部门 有 哪些 知识 资源 ， 以及 对 这些 知识 资源 的 描述 。 　 　 协调 Agent 　 　 协调 Agent 如图 是 总体 框架 中 的 重要 成分 ， 关系 到 各个部门 之间 能否 成功 地 共享资源 和 协作 。 协调 模块 接受 问题 Agent 提交 的 知识 请求 或 问题 ， 然后 按照 一定 规则 检索 全局 字典 ， 通过 检索 全局 字典 ， 协调 模块 可 提供 一系列 的 知识 资源 或 问题 解决方案 供 提出 问题 的 部门 请求 方 选择 。 在 请求 方 给定 选择 结果 后 ， 协调 Agent 通过 通信 模块 将 请求 提交 给 相关 部门 的 问题 Agent 服务 方 求解 。 最后 将 结果 返回 给 请求 方 。 针对 全局 字典 中 一项 知识 资源 或 问题 解决方案 ， 权限 审定 模块 负责 审定 请求 方 是否 拥有 足够 的 权限 来 享受 这项 服务 。 学习 模块 可以 学习 协调 Agent 的 协调 过程 ， 获得 与 知识 资源 或 问题 解决方案 使用 情况 相关 的 信息 存储 于 全局 字典 中 。 通信 模块 负责 与 问题 Agent 、 及其 本 组织 以外 的 知识 资源 代理 或 问题 求解 代理 的 通信 。 图 协调 Agent 的 结构 　 　 全局 字典 是 协调 Agent 的 关键 资源 ， 它 立足于 全局 来 把握 所有 部门 的 资源 。 在 全局 字典 中 存储 了 两类 各个部门 愿意 公开 以 与 其它 部门 共享 的 知识 。 一类 是 本 部门 内 决策问题 及其 解决方案 的 概要 信息 。 另一类 知识 是 本 部门 内 的 知识 资源 的 概要 信息 。 Agent 的 实现 　 　 图 给出 了 上述 各类 Agent 的 实现 模型 框图 。 其 工作 过程 如下 ： 信息 收集器 收集 信息 ， 并 将 收集 来 的 信息 放入 信息 队列 ； 信息 解释器 取得 信息 队列 中 的 信息 ， 对 之 进行 解释 ， 然后 根据 自身 状态 调用 合适 的 方法 ， 执行 相应 的 动作 。 图 Agen 的 实现 模型 框图 　 　 可 借助 分布式 对象 技术 实现 上述 各类 Agent 及其 之间 的 通信 。 分布式 对象 技术 的 基本 思想 是 ： 将 分布式 、 可 互操作 的 对象 机制 引入 到 分布式 网络系统 ， 使得 对象 之间 可以 在 网络 范围 内 相互 通信 ， 一个 对象 可以 以 动态 的 ClientServer 模式 请求 、 取得 另 一个 对象 的 服务 。 但 Agent 和 对象 是 有 区别 的 ： Agent 具有 能动性 ， 而 对象 是 被动 的 ； Agent 具有 自主性 ， 而 对象 是 受控 的 ， 对象 不是 根据 当前 的 状态 分析 信息 的 含义 做出 适当 的 动作 ， 而 只是 机械 地 执行 信息 规定 的 动作 。 　 　 目前 ， 在 分布式 对象 互操作 技术 方面 有三大 标准 ： 一个 是 Microsoft 公司 的 OLECOMDCOM ， 另 一个 是 OMG 的 CORBA ， 还有 一个 是 Sun 公司 的 RMI 。 这种 标准 各有 其 优缺点 。 考虑 到 目前 有 很多 工具 可以 用来 创建 OLECOMDCOM 组件 ， 如 VC 、 VB 、 Delphi 和 PowerBuilder 等 ； OLECOMDCOM 得到 Windows 操作系统 的 直接 支持 ， 无需 购买 专门 的 中间件 或 安装 虚拟机 ； 有 大量 的 已 被 建立 、 商品化 了 的 OLECOMDCOM 组件 可供使用 ； OLECOMDCOM 拥有 大量 的 用户群 ， 许多 开发者 具有 OLE 开发 经验 ； 我们 选择 OLECOMDCOM 来 实现 Agent 。 　 　 我们 在 WindowsNT 网络 环境 中 使用 VC 等 工具 ， 在 OLE 自动化 的 技术 层次 上 实现 了 前述 各类 Agent 及其 之间 的 通信 。 然后 ， 以 这些 Agent 作为 系统集成 的 基本 单位 ， 构造 了 一个 决策支持系统 生成器 原型 ； 并 以此 决策支持系统 生成器 原型 为 开发 环境 开发 了 一个 试验性 的 专用 决策支持系统 。 在 该 决策支持系统 生成器 原型 中 ， 各类 Agent 作为 OLE 自动化 服务器 来 实现 ， 而 信息 收集器 作为 OLE 自动化 服务器 中 的 一个 可编程 对象 来 实现 ， 一个 Agent 通过 定位 和 激活 另 一个 Agent 的 信息 收集器 ， 将 信息 传递 给 另 一个 Agent 。 这样 ， Agent 之间 便 实现 了 私线 方式 的 通信 。 这种 通信 方式 的 特点 是 直接 通信 ， 保密性 好 。 总结 和 展望 　 　 从 本文 给出 的 总体 框架图 可以 看出 ， Agent 是 系统 的 基本 构成 单位 ， 通过 协调 Agent 的 协调 、 解释 作用 ， 一个 部门 可以 共享 别的 部门 的 知识 资源 ； 通过 提高 各类 Agent 的 智能性 ， 整个 系统 的 智能化 程度 可以 得到 提高 ； 通过 采用 Agent 封装 、 改造 和 扩展 原有 决策支持系统 的 问题 部件 、 数据 部件 和 模型 部件 等 ， 一方面 使得 新 系统 的 开发 有 了 一定 的 基础 ， 另一方面 使旧 系统 上 的 投资 得到 了 一定 程度 的 保护 ； 该 系统 栖身 于 当前 流行 的 网络化 、 分布式计算 环境 中 ， 整个 系统 的 展开 更具 灵活性 ； 另外 ， 该 框架 还 将 决策支持系统 生成器 概念 理解 上 的 两种 观点 统一 了 起来 ， 对 决策支持系统 的 发展 起到 一定 的 促进作用 。 如何 提高 各个 Agent 的 学习 能力 ， 如何 使 各类 Agent 的 结构 更具 合理性 以及 如何 解决 协调 Agent 的 全局 字典 与 问题 Agent 的 问题 库 、 本地 字典 之间 的 一致性 ， 将 是 我们 今后 进一步 研究 的 方向 。 作者 单位 ： 上海大学 计算机 学院 ， 上海 参考文献 ShiZhenxiaAnIntelligentDecisionSupportSystemsGeneratorChineseJournalofSystemsEngineeringandElectronicsBaSulinAClientbrokerserverArchitectureforIntranetDecisionSupportDecisionSupportSystemsWooldridgeMIntelligentAgentsTheoryandPracticeKnowledgeEngineeringReciview