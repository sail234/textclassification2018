计算机 研究 与 发展 JOURNALOFCOMPUTERRESEARCHANDDEVELOPMENT 年 第卷 第期 VolNo 一种 实现 互操作 的 分布式 集成 框架 的 设计 与 实现 史殿习 　 吴 泉源 　 王怀民 　 邹 　 鹏 摘 　 要 　 互操作性 问题 是 分布 计算 中 需要 解决 的 关键问题 这一 问题 可以 通过 多种 途径 加以解决 ， 其中 面向对象 的 集成 框架 是 一种 比较 好 的 解决 方法 文中 首先 研究 了 互操作性 的 概念 、 实现 机制 及 面向对象 方法 对 互操作性 的 支持 机制 ； 在 对 DCE 的 R PC机 制 和 CORBA 的 ORB 机制 比较 的 基础 上 ， 采用 面向对象 方法 和 技术 ， 开展 了 基于 Agent 的 分布 客户服务器 集成 框架 的 研究 ， 提出 了 一种 基于 Agent 的 分布式 通用 框架 ， 以 支持 客户服务器 应用 的 开发 和 实现 Agent 之间 的 互操作性 关键词 　 互操作性 ， CORBA ， 对象 请求 代理 ， Agent ， 框架 中图法 分类号 　 TPDESIGNANDIMPLEMENTATIONOFADISTRIBUTEDINTEGRATEDFRAMEWORKIMPLEMENTINGINTEROPERABILITYSHIDianXiWUQuanYuanWANGHuaiMinandZOUPengDepartmentofComputerScienceNationalUniversityofDefenseTechnologyChangshaAbstract 　 InteroperabilityisoneofthekeyproblemswhichmustbesolvedindistributedcomputingsystemsThedistributedintegratedframeworkisagoodsolutionforinteroperabilityFirststudiedinthispaperaretheconceptandimplementationmechanismoftheinteroperabilityandthemechanismwithwhichobjectorientedtechnologysupportsinteroperabilityThenaftercomparingtheDCERPCmechanismwiththeCORBAORBmechanismresearchonthedistributedclientserverintegratedframeworkiscarriedoutbasedontheagentusingtheobjectorientedmethodandtechnologyandagenericframeworkispresentedbasedonmultipleagenttosupportclientservercomputingapplicationdevelopmentandtosupporttheinteroperabilityamongagentsKeywords 　 interoperabilityCORBAORBagentframework 　 引 　 言 　 　 随着 计算机技术 的 发展 ， 基于 客户服务器 的 分布 计算 成为 新一代 的 计算 范型 ［ ］ 分布 计算 可以 给 用户 带来 很多 的 好处 ， 它 不仅 可以 使 用户 共享 分布 在 网络 不同 平台 上 的 信息 和 资源 ， 而且 可以 使 用户 访问 分布 在 网络 不同 节点 上 的 服务 然而 ， 分布 计算 在 给 用户 带来 诸多 好处 的 同时 却 给 应用 开发者 提出 了 新 的 挑战 和 新 的 问题 ， 这些 新 的 问题 主要 包括 应用 互操作性 问题 以及 应用 的 可移植性 等 问题 其中 ， 如何 解决 应用 间 的 互操作性 问题 成为 分布 计算 中 研究 的 重要 课题 目前 ， 对 应用 间 互操作 问题 已 提出 了 一些 相应 的 解决 方法 ， 如 SunRPC 和 OSFDCE 等 ， 它们 对 应用 互操作性 提供 了 相应 的 支持 机制 ， 但 这些 机制 都 建立 在 传统 的 面向 过程 和 结构化程序 设计 方法 的 基础 之上 ， 存在 一些 不足 和 缺陷 ， 主要 表现 在 它们 是 在 一个 比较 低 的 层次 上 支持 应用 的 集成 和 互操作 的 ， 应用 开发者 在 开发 具体 的 应用 时 常常 要 涉及 很多 与 平台 有关 的 细节 问题 ， 而 不能 将 主要 精力 集中 在 问题 的 解决 上 ， 为此 必须 寻求 新 的 解决 方法 和 机制 来 解决 这些 问题 ， 以 支持 分布 应用 的 集成 和 互操作性 根据 国内外 的 研究 资料 表明 ［ ］ ， 很多 的 有识之士 都 认为 面向对象 方法 和 技术 是 解决 这些 问题 的 理想 方法 在 对 传统 的 解决 方法 和 分布 对象 计算 规范 CORBA ［ ］ 研究 的 基础 上 ， 我们 采用 面向对象 方法 和 技术 ， 开展 了 基于 Agent ［ ］ 的 分布 客户服务器 集成 框架 的 研究 和 开发 ， 目的 在于 提供 一种 支持 分布 客户服务器 应用 的 分布式 集成 框架 ， 实现 分布 应用 的 集成 和 互操作性 ， 支持 应用 开发者 开发 基于 客户服务器 计算 的 分布式应用 　 　 本文 如下 组织 ： 第节 讨论 了 互操作性 的 概念 及其 实现 机制 ； 第节 研究 了 面向对象 方法 对 互操作性 的 支持 机制 ； 第节 研究 了 CORBA 对 对象 间 互操作性 的 支持 机制 ； 第节 将 CORBA 与 OSFDCE 进行 了 比较 ； 第节 讨论 了 DIFMA 的 框架结构 和 利用 DIFMA 建立 客户服务器 应用 的 组成部分 以及 DIFMA 所 提供 的 开发工具 ； 第节 将 DIFMA 与 CORBA 中 的 相应 机制 进行 比较 ； 第节 对 全文 作 一个 小结 　 互操作性 　 互操作性 的 提出 　 　 为 解决 系统资源 的 合理 分布 和 有效 共享 ， 实现 对 已有 投资 的 有效 保持 ， 支持 日益 广泛 的 协同工作 的 应用 ， 需要 各种 互联 技术 控制 应用软件 在 网络计算机 环境 上 运行 ， 这 就是 互操作性 的 基本 需求 互操作性 是 指 分布 计算环境 下 两个 软件 元素 相互 通信 并 协同 完成 任务 的 能力 它 包括 基础 层次 和 应用 层次 等 两个 层次 的 含义 基础 层次 是 指 实现 不同 计算 平台 之间 的 互联 和 通信 及 协同 完成 任务 ； 应用 层次 是 指 实现 各 计算 平台 上 的 应用 在 网络 基础 上 的 互操作 本文 重点 讨论 的 是 实现 基础 层次 互操作性 的 实现 机制 和 方法 　 实现 互操作性 的 机制 　 　 要 实现 应用 间 的 互操作性 必须 解决 位置 透明 、 通信 机制 透明 和 激活 机制 的 透明性 等 问题 ， 为此 必须 提供 相应 的 实现 机制 ， 这些 机制 主要 包括 ： 　 　 自动 定位 和 通信 机制 　 　 自动 定位 服务 方法 在 网络 上 的 物理 位置 ， 并 自动 地 将 客户 的 请求 包括 服务器 的 名字 、 服务 方法 的 名字 及 参数 等 传递 给 服务器 ； 服务 方法 执行 完成 之后 ， 将 服务 结果 返回 给 客户 ， 并且 保证 客户 与 服务器之间 的 同步 ； 　 　 抽象 机制 　 　 使 互操作 的 软件 元素 相互 独立 ， 使 它们 与 程序设计 语言 无关 ， 与 实现 细节 无关 及 实现 平台 无关 ； 　 　 动态 机制 　 　 在 客户 事先 不 知道 服务器 提供 什么样 的 服务 的 条件 下 ， 能够 动态 地 搜索 能够 提供 服务 的 软件 元素 ， 动态 地 构造 参数 和 动态 地 构造 服务 请求 ， 并 最终 返回 服务 结果 　 解决 互操作性 问题 的 方法 　 解决 互操作性 的 传统 方法 ： R PC机 制 　 　 OSFDCE 中 的 R PC机 制是 OSF 提供 的 一种 解决 分布 应用 互操作性 的 一种 机制 ， 它 主要 用于 支持 异构 型 分布 系统 间 的 通信 ， 它 使用 存根 进程 stub 作为 远程 过程 的 本地 代理 ， 调用 RPC 运行 时库 RPCruntime 来 传输 网络 中 的 调用 存根 和 RPC 运行 时库 屏蔽 了 网络 调用 所 涉及 的 许多 细节 ， 特别 是 参数 的 编码 解码 及 网络通信 是 由 存根 和 RPC 运行 时库 来 完成 的 　 　 DCERPC 为 应用 的 互操作性 提供 了 一种 实现 机制 ， 但 这种 机制 是 使用 传统 的 面向 过程 的 方法 开发 的 ， 它 的 缺陷 是 没有 提供 动态 机制 和 抽象 机制 ， 并且 过程 调用 机制 在 传统 的 软件开发 过程 中 存在 的 问题 在 分布式系统 中将 更加 突出 ， 因此 它 是 一种 比较 低级 的 实现 机制 　 面向对象 方法 和 技术 是 解决 互操作性 问题 的 理想 选择 　 　 面向对象 范型 用 对象 来 对 应用 进行 分解 ， 这 与 用 数据 和 功能 来 分解 应用 的 传统 的 面向 过程 的 范型 相比 更加 自然 面向对象 方法 具有 良好 的 封装 性 、 可 重用 性 以及 可移植性 等 特性 下面 我们 从 面向对象 方法 的 概念 层次 来 对 面向对象 方法 中 的 关键 概念 和 机制 进行 分析 ， 以 说明 面向对象 方法 是 如何 来 支持 对象 的 互操作性 的 我们 可以 将 面向对象 方法 的 概念 分为 如下 个 层次 ： 　 　 第个 层次 是 封装 机制 封装 机制 是 面向对象 范型 的 核心 其 基本 思想 是 隐藏 一个 对象 的 内部 数据 和 操作 的 实现 细节 ， 对象 间 通过 一个 良 定义 的 接口 进行 通信 因此 ， 可以 对 对象 进行 修改 而 不 影响 系统 的 其它 部分 　 　 第个 层次 是 继承 机制 和 多态性 机制 类 是 定义 一个 特殊 对象 类型 行为 的 模板 类 可以 被 组织 成 一个 层次 的 继承 结构 ， 一个 子类 可以 继承 父类 中 的 操作 和 属性 ， 允许 应用 开发者 重用 已 存在 的 类 而 多态性 是 指 同一个 方法 可以 作 不同 的 事情 ， 这 依赖于 实现 该 方法 的 类 多态性 也 是 一种 允许 子类 重载 一个 继承 的 方法 的 机制 ， 并且 不 影响 父类 中 其它 的 方法 　 　 第个 层次 是 框架 机制 框架 表示 一个 超越 类库 的 抽象层次 ， 一个 面向对象 框架 是 一个 可 重用 的 设计 对于 特定 的 应用 问题 ， 应用 开发者 可以 对 其 进行 扩展 或 剪裁 一个 框架 不是 一个 类库 ， 它 是 一组 提供 特定 功能 的 类 ， 这些 类 之间 相互 关联 并且 可以 被 用来 建立 某一 特定 类型 的 应用 　 　 面向对象 方法 中 这种 机制 从 不同 层次 上 对 应用 的 互操作性 提供 了 支持 ， 封装 机制 使 不同 的 对象 之间 相互 独立 ； 继承 机制 和 多态 机制 为 代码 的 可 重用 提供 了 支持 ； 框架 机制 从 一个 更 高 的 层次 上 对 应用 互操作性 提供 支持 　 　 随着 面向对象 技术 越来越 被 人们 所 接受 ， 各种 组织 如 OMG 已 开始 逐步 进行 面向对象 的 标准化 工作 ， 其 目标 是 在 一个 广泛 的 可用 的 接口 规范 的 基础 上 为 面向对象 应用 提供 一个 通用 的 框架结构 ， 使 用户 的 软件 能够 在 不同 的 平台 上 进行 移植 ， 保证系统 内 的 互操作性 　 CORBA 对 对象 互操作性 的 支持 机制 　 　 CORBA 是 OMG 提出 的 一个 标准 ， 它 是 针对 多种 对象 系统 在 分布 计算环境 中以 对象 方式 集成 而 设计 的 它 比较 好地解决 了 封装 对象 在 分布 计算环境 中 的 资源共享 、 软件 重用 及 功能 扩展 等 问题 其 最 基本 的 目标 是 为 分布 对象 间 的 互操作性 定义 一个 开放 的 标准 ， 并 提出 如下 的 机制 来 支持 对象 间 的 互操作性 ： 　 　 ORB — — 自动 定位 和 通信 机制 　 　 ORBobjectrequestbroker 是 CORBA 的 核心 ， 它 将 客户 与 对象 实现 由 数据 和 代码 组成 的 实体 分离 开来 ， 应用 开发者 只要 按照 他们 定义 的 统一 接口 便 可以 独立 地 开发 客户 应用 和 对象 实现 ORB 充当 客户 应用 和 对象 实现 的 中介 ， 为 客户 和 对象 实现 之间 的 通信 提供 支持 机制 ， 为 对象 访问 提供 了 透明性 ， 它 负责 定位 对象 实现 、 请求 传递 和 结果 返回 等 功能 　 　 IDL — — 语言 抽象 机制 　 　 为 实现 封装 和 继承 特性 ， 以及 实现 程序设计 语言 和 实现 环境 的 抽象性 ， OMG 在 CORBA 中 引入 了 接口 描述语言 IDLOMGIDL 不是 一种 程序设计 语言 ， 它 是 一种 中性 语言 ， 专门 用来 描述 服务 对象 的 接口 一个 服务 对象 的 IDL 语言 描述 ， 包含 了 客户 按 对象 方式 使用 该 服务 对象 所 需 的 全部 信息 定义 好 的 接口 文件 ， 经过 IDL 编译器 可 直接 映射 到 相应 的 程序设计 语言 ， 如 映射 到 C ， Java 等 语言 通过 语言 映射 ， 用 不同 的 语言 实现 的 对象 之间 就 可以 实现 互访 例如 ， 一个 用 C 实现 的 客户 可以 访问 用 Java 实现 的 服务 对象 ， 反之亦然 　 　 DII — — 动态 激活 机制 　 　 为 实现 动态 请求 ， CORBA 定义 了 一个 动态 激活 接口 DIIdynamicinvocationinterfaceDII 允许 客户 动态 地 生成 和 激活 对 对象 的 请求 客户 可以 使用 该 接口 发送 请求 ， 其 产生 的 请求 语义 与 用 客户 IDL 存根 方式 所 产生 的 请求 语义 完全 一样 该 方式 首先 要 将 服务 对象 的 接口 加入 到 接口 池 IRinterfacerepository 中 ， 而后 通过 ORB 提供 的 统一 服务 请求 接口 ， 在 运行 时刻 runtime 动态 地 访问 服务 对象 　 　 OA — — 激活 机制 　 　 对象 识 配器 OAobjectadapter 是 一个 对象 实现 访问 ORB 功能 的 主要 接口 对象 识 配器 为 对象 实现 提供 访问 服务 ， 这些 服务 主要 包括 对象 引用 的 产生 和 解释 、 服务 对象 的 激活 和 撤销 、 对象 引用 与 对象 实现 之间 的 映射 、 服务 方法 的 激活 等 　 CORBA 与 OSFDCE 的 比较 　 　 OSFDCE 和 CORBA 中 都 为 开发 分布 应用 提供 了 相应 的 支持 机制 ， 如 定位 和 通信 机制 等 ， 但 它们 之间 存在 着 很大 的 差别 ， 主要 表现 在 如下 几个 方面 ： 　 　 DCE 分布 模型 是 建立 在 R PC机 制 之上 ， 并且 是 一个 面向 过程 的 分布 模型 ； CORBA 模型 是 建立 在 对象 技术 之上 ， 是 一个 面向对象 的 分布 模型 ； 　 　 从 面向对象 的 角度 来看 ， R PC机 制是 基于 远程 过程 调用 ， 客户 通过 R PC机 制 只能 以 过程 调用 的 方式 调用 服务器 的 过程 ； 在 ORB 机制 中 ， 服务 对象 管理 自己 的 状态 信息 ， 客户 只 与 服务 对象 的 本地 代理 发生 关系 ， 由 代理 和 实际 的 服务 对象 交互 ， 协同 完成 客户 请求 此外 ， ORB 机制 的 多态性 使 不同 的 服务 对象 对 相同 的 方法 激活 反应 不同 ； 　 　 从 透明性 的 角度 来看 ， R PC机 制 的 操作 是 复杂 的 ， 客户 需要 直接 与 服务器 连接 ； 而 ORB 机制 将 很多 复杂 的 工作 交给 ORB 机制 隐式 完成 ， 增加 了 透明性 ， 用户 不需 知道 服务 对象 的 物理 位置 ， 而 由 ORB 自动 定位 服务器 的 物理 位置 ； 　 　 ORB 与 RPC 的 关系 ： ORB 可以 建立 在 RPC 之上 ， 利用 RPC 提供 的 支持 实现 对象 管理 及其 他 ORB 特性 　 DIFMA — — 一种 与 CORBA 兼容 的 分布 集成 框架 　 Agent 的 概念 及 模型 　 　 通过 对 OSFDCE 与 CORBA 的 比较 ， 我们 可以 看出 CORBA 比 DCE 更加 适合 分布 应用 的 集成 和 实现 对象 之间 的 互操作性 为了 统一 地 划分 分布式计算 系统 中 的 计算 节点 、 服务器 、 客户机 及 进程 等 各类 独立自主 的 行为 实体 ， 我们 开展 对 Agent 的 研究 ， 引入 了 Agent 的 概念 和 机制 Agent 是 指 在 分布式系统 中 持续 自主 地 发挥作用 的 计算 实体 例如 ， 通常 分布式 客户服务器 计算机系统 中 的 各类 服务器 、 SNMP 中 的 Manager 和 Agent 都 为 我们 这里 所说 的 Agent 从 内部结构 上 看 ， Agent 对象 结构 行为 引擎 简单 形象 地 讲 ， Agent 是 有 “ 生命 ” 的 对象 其中 ， 行为 引擎 是 Agent 的 “ 心脏 ” ， 是 体现 Agent “ 生命力 ” 的 部分 ； 对象 结构 是 Agent 的 “ 大脑 ” ， 是 体现 Agent “ 智力 ” 的 部分 从 外部 特征 上 看 ， Agent 具有 独立性 、 自主性 、 交互性 等 特性 为此 ， 我们 提出 了 以 事件处理 为 中心 的 Agent 模型 在 该 模型 中 ， Agent 由 事件处理 系统 、 方法 集 和 内部 状态 集个 主要 成分 构成 其中 ， 事件处理 系统 是 Agent 的 行为 引擎 ， Agent 的 活性 表现 为 它 的 事件处理 系统 在 该 Agent 的 生命 期内 始终 持续 自主 地 工作 Agent 的 事件处理 系统 的 功能 是 对 其 所 关注 的 事件 进行 检测 和 处理 ； Agent 的 方法 集是 体现 Agent 事件处理 能力 的 成分 ， 描述 了 Agent 处理 相关 事件 的 方法 Agent 的 内部 状态 集是 表现 该 Agent 当前 状态 的 成分 ， 其中 包括 表征 事件 的 状态 　 　 在 对 Agent 的 概念 及 模型 研究 的 基础 上 ， 我们 提出 了 一种 基于 Agent 的 分布式 集成 框架 DIFMA ， 其 基本 目标 是 扩展 分布 计算环境 ， 支持 应用 系统 的 集成 ， 实现 Agent 之间 的 互操作性 ， 为 应用 开发者 提供 开发 客户服务器 应用 的 通用 框架 ， 支持 应用 开发者 灵活 方便 地 建立 各种 客户服务器 应用 　 DIFMA 的 结构 　 　 DIFMA 是 一种 支持 互操作 及 系统集成 的 通用 框架 如图 ， 它 为 应用 系统 中 各个 独立 成分 之间 实现 相互作用 提供 公共 通道 DIFMA 框架 由 如下 两个 基本 机制 组成 ： 图 　 DIFMA 的 结构 框架 接口 ： 提供 一组 APIs ， 该组 APIs 是 对 每个 框架 所 提供 的 服务 的 简单 抽象 框架 接口 作为 框架 之上 的 一个 抽象层次 　 　 请求 代理 机制 ： 该 请求 代理 机制 相当于 “ 软件 总线 ” ， 其 作用 是 跨越 地址 空间 传递 请求 　 　 DIFMA 的 核心 是 基于 Agent 的 服务 请求 代理 机制 ， 各类 服务 Agent （ 简记 为 SA ） 可 作为 “ 软 部件 ” 插 接到 该 框架 上 客户 应用 则 通过 本地 称为 服务 请求 代理 （ 简记 为 RA ） 的 对象 访问 SARA 的 存在 使得 客户 应用 所 需 的 异地 服务 如同 在 本地 一样 　 　 从 客户服务器 计算 角度 来看 ， DIFMA 分为 客户 环境 和 服务器 环境 两个 部分 DIFMA 客户 环境 不仅 提供 了 典型 SA 的 RA ， 而且 提供 了 一组 请求 构造 框架 及其 相应 的 功能 简洁 的 API ， 支持 应用 开发者 建立 所 需 的 RA 服务 环境 中 服务 可 分为 基本 系统 服务 、 公共 应用服务 和 特殊 应用服务 基本 系统 服务 是 保证系统 正常 工作 的 系统 服务 如 注册 管理 服务 Register 使得 客户 方 的 RA 可以 通过 SA 的 名字 在 运行 时刻 动态 地 确定 SA 的 物理 位置 ； 公共 应用服务 涉及 客户 应用 所 需 的 常规 服务 ； 特殊 应用服务 为 特定 客户 提供 针对性 的 服务 　 DIFMA 的 开发 框架 　 　 DIFMA 为 应用 开发者 提供 了 建立 SA 及 RA 的 开发 框架 ， 应用 开发者 利用 SA 和 RA 开发 框架 可 方便 地 建立 各种 新 的 SA 和 RA ， 并且 利用 DIFMA 的 集成 框架 ， 可以 方便 地 将 SA 加入 到 服务 环境 中 ， 为 客户 提供 服务 利用 DIFMA 的 框架结构 建立 客户服务器 应用 涉及 系统 服务 Register ， SA ， RA 和 客户 应用 等 几个 部分 其中 ： 　 　 系统 服务 Register 　 　 Register 是 系统实施 分布 资源管理 的 核心 ， 其 作用 相当于 分布式系统 中 的 名字 服务 ， 其 基本功能 是 管理系统 中 的 SA 和 RA 的 地址 信息 及其 有关 的 信息 ， 为 RA 提供 访问 SA 所 需 的 地址 信息 ， 使 应用 开发者 可以 方便 地 开发 与 SA 驻留 地 无关 的 分布式 客户服务器 应用 Register 的 地址 为 系统 中 的 SA 和 RA 共知 Register 还 为 系统 提供 了 基本 的 系统管理 功能 　 　 服务 Agent 　 　 SA 通常 驻留 在 一个 服务器 节点 上 ， 为 客户 应用 提供 服务 SA 在 生成 时 自动 将 其 地址 信息 ， 及 有关 的 管理 信息 注册 到 Register 上 ； 然后 启动 守护 进程 监听 网络 上 的 服务 请求 ； 如果 有 请求 消息 达到 ， 则 进行 相应 的 处理 　 　 为了 支持 用户 建立 SA ， DIFMA 提供 了 标准 的 SA 开发 框架 ， 该 框架 的 作用 是 完成 接收 客户 应用 发来 的 各种 服务 请求 的 通信 管理 ， 并 提供 于 特定 服务 进程 的 挂接 机制 ， 以便 应用 开发者 采用 这一 框架 和 挂接 机制 建立 新 的 服务 并 加入 到 服务 环境 中 SA 框架 包括 构造 框架 和 执行 框架 两个 部分 构造 框架 描述 应用 SA 是 如何 被 定义 的 ， 执行 框架 描述 应用 SA 中 的 服务 方法 是 如何 被 激活 的 在 具体 实现 服务 SA 的 框架 时 ， DIFMA 将 构造 框架 和 执行 框架 中 的 基本 机制 定义 在 标准 类 ServerAgentBase 中 ， 并 为 应用 开发者 提供 生成 应用服务 Agent 的 定义 模板 ， 应用 开发者 按照 该 定义 模板 可以 方便 地 生成 应用服务 Agent 　 　 请求 代理 Agent 　 　 RA 与 客户 应用 驻留 在 同一个 节点 上 RA 是 SA 在 客户 方 的 代理 ， 其 作用 是 在 客户 应用 与 SA 之间 建立 一座 通信 的 桥梁 ， 负责 客户 应用 与 SA 之间 的 通信 管理 ， 实现 代理 机制 的 思想 RA 在 生成 时 自动 向 Register 查询 它 所 代理 的 SA 的 地址 信当 客户 应用 欲 请求 一个 SA 为 其 服务 时 ， 即 向 SA 在 本地 的 代理 RA 发送 请求 ， RA 利用 从 Register 那里 获得 的 地址 信息 与 SA 建立 连接 ， 并 将 请求 发送给 所 代理 的 SA 　 　 为了 支持 应用 开发者 方便 地 建立 RA ， DIFMA 为 应用 开发者 提供 了 标准 的 RA 开发 框架 ， 该 框架 包括 构造 框架 和 远程 消息传递 机制 两个 部分 构造 框架 描述 如何 生成 SA 在 本地 的 代理 RA ， 远程 消息传递 机制 描述 RA 与 SA 之间 的 消息 如何 进行 传递 构造 框架 为 应用 开发者 定义 RA 提供 支持 机制 ， 远程 消息传递 机制 提供 各种 通信 手段 ， 将 客户 应用 的 服务 请求 和 服务 方法 的 参数传递 给 SA ， 并 接收 SA 的 返回 结果 ， 最后 ， 将 结果 返回 给 客户 应用 在 具体 实现 RA 的 框架 时 ， DIFMA 将 构造 框架 的 基本 机制 和 远程 消息传递 机制 定义 在 标准 类 RequestAgentBase 中 ， 并 为 应用 开发者 提供 生成 RA 的 定义 模板 ， 应用 开发者 按照 该 定义 模板 可以 方便 地 生成 RA 　 DIFMA 的 应用 开发 环境 和 工具 　 　 DIFMA 为 建立 分布 客户服务器 应用 提供 了 良好 的 开发 手段 和 基本 的 分布 系统管理 功能 基于 DIFMA 的 框架结构 ， DIFMA 为 应用 开发者 提供 了 两种 开发 分布 客户服务器 应用 的 手段 ： 一是 C 风格 的 API ； 二是 接口 描述语言 IDL 应用 开发者 使用 C 风格 的 API 以及 DIFMA 提供 的 RA 和 SA 框架 ， 即可 方便 地 开发 其 应用 IDL 是 DIFMA 提供 给 应用 开发者 的 更 高层次 的 开发工具 ， 应用 开发者 只 需 定义 SA 的 接口 描述 说明 ， DIFMA 即可 通过 IDL 编译器 将 接口 描述 说明 自动 转换成 RA 的 C 代码 和 SA 的 实现 模板 的 C 代码 图 　 IDL 基础 上 的 DIFMA 应用 开发 过程 　 　 基于 DIFMA 应用 开发 环境 和 工具 ， 应用 开发者 建立 客户服务器 应用 的 一般 过程 如图所示 为 ： 问题 定义 、 客户服务器 功能 分解 、 定义 SA 的 接口 、 经 IDL 编译器 自动 生成 SA 的 模板 及其 RA 模板 、 SA 模板 与 SA 的 方法 实现 联编 生成 包含 SA 的 服务 软件 ， 以及 RA 模板 与 客户 应用 联编 生成 包含 RA 的 客户 应用 　 DIFMA 与 CORBA 的 比较 　 　 DIFMA 基本上 是 遵循 CORBA 规范 的 ， DIFMA 中 的 许多 机制 与 CORBA 中 的 相应 的 机制 相对 应 ： 　 　 DIFMA 中 RA 及 远程 消息 机制 RMP 对应 CORBA 中 ORB 机制 RA 负责 自动 定位 其所 代理 的 SA ， 并 为 客户 应用 与 SA 之间 的 交互 提供 通信 机制 ， 负责 为 客户 应用 传递 请求 ， 并 将 服务 结果 返回 给 客户 应用 ； 同时 ， RA 还 提供 相应 的 同步 和 异步 机制 来 保证 客户 应用 与 SA 之间 的 同步操作 和 异步 操作 ； 　 　 DIFMA 中 接口 描述语言 IDL 也 是 一种 中性 语言 ， 它 是 OMGIDL 的 一个 子集 DIFMAIDL 的 主要 作用 是 描述 SA 的 接口 SA 的 接口 描述 经过 IDL 编译器 编译 之后 就 可以 自动 地 生成 RA 和 SA 的 模板 ； 　 　 SA 中 的 服务 方法 分发 框架 对应 于 CORBA 中 OA 服务 方法 分发 框架 的 主要 作用 是 接收 来自 客户 应用 的 请求 ， 对 请求 进行 处理 ， 激活 相应 的 服务 方法 ， 并 将 服务 结果 返回 给 客户 应用 　 　 尽管 DIFMA 中有 很多 的 机制 与 CORBA 中 的 机制 相对 应 ， 但 与 CORBA 相比 ， DIFMA 还 存在 很多 的 不足 ， 如 DIFMA 中 没有 提供 动态 机制 ； SA 的 框架结构 的 划分 不 甚 合理 等 ， 这些 是 DIFMA 中 需要 进一步 加强 和 改进 的 地方 　 结 　 论 　 　 分布式 集成 框架 是 解决 分布 应用 集成 和 实现 应用 互操作性 的 一种 比较 好 的 方法 其 好处 在于 它 将 实现 框架 之间 关系 的 责任 交给 集成 框架 来 完成 ， 从而 使 应用 开发者 将 主要 精力 集中 在 应用 对象 的 开发 上 本文 所 提出 的 集成 框架 对 分布 应用 的 集成 和 实现 应用 的 互操作 提供 了 较 好 的 支持 其中 基于 Agent 的 服务 请求 代理 机制 超越 了 传统 的 客户服务器 计算 的 功能 ， 有助于 适应 新 的 协同工作 的 应用 需求 作者简介 ： 史殿习 ， 男 ， 年生 ， 博士 研究生 ， 主要 研究 方向 为 分布式计算 吴 泉源 ， 男 ， 年生 ， 教授 ， 博士生 导师 ， 主要 研究 方向 为 分布式计算 及 人工智能 王怀民 ， 男 ， 年生 ， 博士 ， 副教授 主要 研究 方向 为 分布式计算 及 人工智能 邹鹏 ， 男 ， 年生 ， 教授 ， 博士生 导师 ， 主要 研究 方向 为 操作系统 及 分布式计算 作者 单位 ： 史殿习 　 吴 泉源 　 王怀民 　 邹 　 鹏 　 国防科学技术大学 计算机科学 系 　 长沙 　 参考文献 　 LewieTGWhereisclientserversoftwareheadedComputer ～ 　 AdderRMEmergingstandardsforcomponentsoftwareComputer ～ 　 HeShamELRewiniSoctHamiltonObjecttechnologyComputer ～ 　 GeneserethMRKetchSPSoftwareagentsCommunicationoftheACM ～ 　 ObjectManagementGroupTheCommonObjectRequestBrokerArchitectureandSpecificationOMG 收到 日期 ： 修改 日期 ：