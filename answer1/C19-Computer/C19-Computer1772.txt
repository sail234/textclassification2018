软件 学报 JOURNALOFSOFTWARE 年 第期 第卷 VolNo 多 进程 系统 状态 恢复 的 一种 优化 方法 王准 　 陈俊亮 摘要 　 在 由 多 进程 组成 的 分布式系统 中 为了 保证系统 在 失效 之后 进程 状态 恢复 的 一致性 某一 进程 的 状态 回卷 将 引起 所有 与 之 有 依赖 关系 的 进程 的 后退 已有 的 依赖 关系 定义 过于 严格 该文 重新 定义 了 进程 状态 之间 的 依赖 关系 可以 减小 进程 状态 卷 回 所 造成 的 影响 关键词 　 软件 容错 状态 一致性 恢复 恢复 块 中图法 分类号 　 TPANewStateRecoveryApproachinDistributedSystemWANGZhun 　 CHENJunliangBeijingInstituteofSouthernTelecommunicationDevelopmentCOLtd 　 Beijing 　 NationalLaboratoryofSwitchingTechnologyandTelecommunicationNetworksBeijingUniversityofPostsandTelecommunications 　 Beijing 　 Abstract 　 InthedistributedsystemallprocessesthatdependontheprocesswhichmustberolledbackhavetoberolledbackaswellinordertokeeptheglobalstateconsistencyThedependencyrelationdefinedinthepreviousliteratureistoorestrictAnewdefinitionofdependencyrelationisproposedinthispaperandtheinfluenceofaprocessrollingbackcanbereducedKeywords 　 Softwarefaulttolerantconsistentstaterecoveryrecoveryblock 　 　 软件 容错 的 冗余 策略 基本上 可以 分为 空间 冗余 和 时间 冗余 两大类 其中 时间 冗余 主要 在 BRandell ［ ］ 等 人 提出 的 恢复 块 （ recoveryblock ） 的 基础 上 展开 所谓 恢复 块 最初 是 针对 顺序进程 而 提出 的 是 指 在 进程 的 执行 过程 中 或者 在 某些 指定 的 执行 点 对 进程 的 状态 做 接收 测试 如果 有 错误 存在 则 将 进程 恢复 到 某 一 无错 的 执行 状态 并 试图 通过 采用 同种 方法 或 不同 种 方法 再试 的 手段 得到 正确 结果 在 恢复 块 方法 应用 于 多 进程 的 并发 系统 时 如何 进行 快速 有效 的 系统 状态 恢复 显得 十分 重要 　 　 一般说来 进程 的 状态 恢复 可以 分为 协作 的 （ coordinated ） 和 非 协作 的 （ noncoordinated ） 两种 恢复 方法 协作 的 恢复 方法 是 将 系统 在 动态 执行 过程 中 进程 之间 的 消息 交互 划分 为 互不 相交 的 若干 单元 每个 单元 均 包含 了 两个 或 更 多 的 进程 及其 在 特定 时间段 内 的 消息 交互 过程 这些 单元 称为 “ 会话 ” （ conversation ） ［ ］ 会话 的 执行 具有 封闭性 组成 会话 的 各个 进程 在 会 话 过程 中 不 允许 与非 会话 进程 交互 ； 会话 的 原子 性则 要求 会话 中 任何 进程 的 错误 均 导致 所有 参与 进程 卷 回至 进入 会话 前 的 状态 由于 系统 的 复杂性 降低 为会 话 的 复杂性 通过 对会 话 的 精心设计 进程 的 卷 回 距离 得到 有效 的 控制 还 可以 防止 多米诺 现象 的 发生 针对 不同 的 应用领域 会话 方案 衍生 出 各种 变形 如 Exchange ［ ］ 目前 也 已 存在 支持 会话 的 程序设计 语言 采用 协作 的 恢复 方法 必须 由 进程 的 设计 人员 指定 进程 需要 保存 的 状态 （ 称为 备查 点 ） 备查 点 的 设置 对 应用程序 不 透明 但 备查 点 的 备查 间隔 和 数目 可以 根据 具体 应用 优化 从而 降低 开销 　 　 非 协作 的 恢复 方法 对于 应用程序 透明 由 系统 的 容错 机制 自动 为 各个 进程 设置 备查 点 以备 恢复 之用 非 协作 的 恢复 方法 在 大型 的 计算 型 应用 中 被 普遍 采用 一般 采用 定期 保存 备查 点 的 方案 备查 间隔 在 几十分钟 至数 小时 不 等 在 有 大量 进程 交互 的 系统 中 采用 该 方法 尚 处于 研究 阶段 一般 的 想法 是 以 Lamport ［ ］ 提出 的 “ 先于 （ happenedbefore ） ” 关系 为 基础 确定 各个 进程 状态 之间 的 依赖 关系 （ 或者 因果关系 （ causualrelation ） ［ ］ ） 在 某 一 进程 作 状态 恢复 时 所有 对 其 具有 依赖 关系 的 进程 均 需 做 适当 的 状态 回卷 以 保证 全局 状态 的 一致性 ［ ］ 该 方法 的 缺点 在于 为了 防止 多米诺 现象 的 发生 需要 设置 的 备查 点过 多 ［ ］ 系统 的 执行 效率 因此 要 大打折扣 所以 很多 人 主张 不 采用 单一 的 备查 点 方法 而 与 消息日志 法 结合 起来 共同 使用 　 　 在 协作 的 恢复 方法 中会 话 的 封闭性 要求 会话 的 参与 进程 在 会 话 的 过程 中 不得 与 任何 非会话 进程 交互 因此 如果 会话 之间 存在 着 共同 进程 的话 只能 以 串行 的 方式 执行 这些 会话 如果 具有 这种 特点 的 会 话 大量 存在 并且 会话 的 执行 时间 较长 对系统 执行 效率 的 影响 是 比较 大 的 　 　 在 非 协作 的 恢复 方法 中 由于 遵循 依赖性 后退 法则 一个 进程 的 后退 势必 引起 所有 对 其 具有 依赖 关系 的 进程 的 后退 如果 大量 的 进程 都 对 某 一 进程 具有 依赖性 则 该 进程 的 后退 导致 的 后退 进程 数目 将 可能 十分 庞大 因此 需要 较长 的 系统 状态 恢复 时间 　 　 我们 希望 消息 交互 的 并发 性 处于 同一 依赖 关系 树中 的 进程 数目 越少 越 好 这样 进程 之间 更 多 的 是 并发 关系 从而 不论是 采用 协作 的 恢复 方法 还是 采用 非 协作 的 恢复 方法 单一 进程 失效 后 系统 的 恢复 面都 可以 做到 很小 同时 也 有利于 系统 在 无错 时 的 运行 效率 　 　 本文 提出 一个 优化 算法 通过 重新 定义 进程 状态 的 依赖 关系 减小 进程 状态 回卷 的 影响面 有关 进程 的 状态 恢复 可以 不必 通过 卷 回 的 手段 实现 在 满足 系统 功能性 需求 的 前提 下 允许 系统 在 一定 的 时间段 内 存在 传统意义 上 进程 之间 状态 不 一致 的 现象 采用 本 方法 的 优点 是 ： 在 采用 协作 的 恢复 方法 时 可以 将 有关 进程 从会 话 中 脱离 开来 从而 增加 了 会 话 之间 并发 执行 的 机会 ； 在 采用 非 协作 的 恢复 方法 时 可以 减少 单一 进程 失效 后 系统 的 恢复 面 　 　 本文 第节 提出 算法 成立 的 若干 假设 第节 陈述 算法 内容 第节 是 与 前人 的 工作 做 一些 比较 　 假设 　 　 我们 的 算法 建立 在 以下 假设 模型 之上 ： 　 　 系统 是 由 N 个 进程 构成 的 集合 进程 之间 以 消息 发送 ／ 接收 的 方式 进行 通信 除此之外 不 存在 任何 其他 进程 之间 交互 的 方式 系统 的 状态 是 系统 内 各个 进程 状态 的 集合 由于 进程 之间 通信 的 异步 性 和 并发 性 的 存在 同时 出于 实现 复杂性 的 考虑 不 要求 这些 进程 的 状态 必须 同时 是 系统 在 某 一 时刻 相应 进程 的 状态 　 　 通信 的 可靠性 是 保证 的 不会 出现 消息 出错 、 丢失 或 重复 接收 的 情况 　 　 进程 的 类型 为 激励 响应 方式 即 进程 在 大部分 时间 内 处于 等待 消息 的 状态 进程 的 下 一步 动作 取决于 收到 消息 的 内容 进程 在 处理 完 消息 之后 又 重新 回到 等待 消息 的 状态 　 　 进程 的 失效 语义 ［ ］ 是 失效 后 停止 （ failstop ） 并且 不 考虑 同一 时刻 两个 或 更 多 进程 失效 的 情况 　 　 我们 首先 援引 Lamport 关于 “ 先于 （ happenedbefore ） ” 关系 的 定义 ［ ］ 　 　 定义 在 分布式系统 中 事件 可能 是 进程 自身 状态 的 改变 也 可能 是 接收 或者 发送 消息 事件 a 先于 事件 b 发生 当且 仅 当 ： 　 　 a 和 b 是 同一 进程 内 的 事件 并且 a 在 b 之前 发生 ； 或者 　 　 a 是 某 进程 发送 消息 m 的 事件 b 是 另 一 进程 接收 m 的 事件 　 　 先于 关系 可用 符号 “ ” 表示 “ ” 具有 传递性 即 ab ∧ bcac 以往 的 文献 一般 将 进程 状态 之间 的 依赖 关系 等价 于 先于 关系 即 abRa → Rb 其中 符号 “ → ” 表示 依赖 关系 Ra 表示 事件 a 发生 后 进程 的 状态 Leong 等 人 ［ ］ 认为 这种 依赖 关系 过于 严格 并 引入 了 消息 语义 的 概念 将 对 其他 进程 状态 不 造成 影响 的 消息 定义 为 非 重要 消息 （ insignificantmessage ） 非 重要 消息 的 传递 不 构成 依赖 关系 从而 减小 了 进程 状态 依赖 树 的 规模 非 重要 消息 的 定义 如下 　 　 定义 由 进程 Pi 发往 进程 Pj 的 消息 m 是非 重要 的 只要 下述 条件 之一 成立 ： 　 　 m 没有 引起 Pj 显式 或 隐式 的 状态 变化 （ 所谓 显式 的 状态 变化 是 指 进程 的 内容 发生 了 改变 隐式 的 状态 变化 是 指 进程 有 消息 输出 ） 　 　 m 没有 引起 Pj 状态 的 显式 变化 并且 m 仅 产生 非 重要 的 消息 　 　 m 引起 了 Pj 状态 的 显式 变化 但是 该 变化 被 Pj 接收 的 下 一条 消息 m ′ 所 重写 并且 m 仅 产生 非 重要 的 消息 　 　 m 引起 了 Pj 状态 的 显式 变化 但是 该 变化 被 Pj 未来 接收 的 某条 消息 m ′ 所 重写 ； 并且 m 仅 产生 非 重要 的 消息 所有 在 m 和 m ′ 之间 提交 给 Pj 的 消息 均 是非 重要 的 　 　 如果 m 不是 非 重要 消息 则 它 是 重要 消息 　 　 进程 之间 的 依赖 关系 可以 通过 重要 消息 导致 的 “ 先于 ” 关系 来 确定 但 我们 认为 该 消息 语义 仍 有 进一步 扩充 的 可能性 　 　 系统 在 某个 进程 失效 后 首先 将 失效 进程 卷 回至 最近 的 一个 无错 状态 然后 寻找 包含 该 状态 在内 的 一个 全局 一致性 进程 状态 进程 的 状态 是 一致 的 是 指 不 存在 这样 一种 情况 即 重要 消息 在 某 一 进程 的 保存 状态 之后 发送 在 另 一 进程 的 保存 状态 之前 接收 到 进程 状态 不 一致 的 直接 现象 是 产生 了 孤儿 进程 　 　 定义 设 m 是 由 进程 Pi 发送至 Pj 的 一条 重要 消息 如果 Pi 保存 了 发送 m 之前 的 状态 RiPj 保存 了 接收 m 之后 的 状态 Rj 则 状态 Ri 和 Rj 不 一致 并且 将 重要 消息 m 称为 孤儿消息 将 处于 状态 Rj 的 进程 Pj 称为 消息 m 引起 的 孤儿 进程 　 　 图 给出 了 不 一致 状态 和 一致 状态 的 两个 例子 图 　 　 在 恢复 进程 状态 时 如果 进程 的 重演 是 确定性 的 即 可以 保证 Pi 在 重演 的 过程 中向 Pj 重复 发送 了 消息 m 则 认为 孤儿消息 在 恢复 的 过程 中 被 消除 了 Pj 亦 不再 是 孤儿 进程 这是 乐观 的 消息日志 方法 解决 进程 状态 不 一致 问题 的 手段 之一 ［ ］ 并且 要求 消息 的 接收 进程 有 容忍 重复 接收 消息 的 能力 但 如果 进程 的 重演 是 不 确定 的 （ 即 不能 保证 Pi 向 Pj 发送 了 同样 内容 的 消息 m 或者 虽然 发送 了 相同 内容 的 消息 但是 顺序 同 以往 不同 ） 则 Pj 将 永远 成为 孤儿 进程 　 　 通过 对 应用 进程 的 考察 我们 有 两个 发现 第在 某些 应用 中 对于 某些 消息 引起 的 孤儿 进程 即使 不 作 状态 的 卷 回 也 不会 影响 系统 功能 的 正确性 仅 可能 影响 到 系统 的 性能 （ 在 后面 的 章节 中 我们 将 举出 相应 的 例子 ） 此类 进程 往往 与 其他 进程 交互 频繁 因此 单独 对 这种 进程 进行 分析 和 优化 可能 有 一定 的 意义 第 某些 进程 的 关键 状态 （ 根据 具体 应用 不同 而 不同 ） 可以 根据 其他 进程 的 状态 进行 重建 只要 系统 的 进程 之间 存在 着 数据 的 冗余 （ 注意 这种 冗余 是 出于 非 容错 的 原因 如 效率 等 设计 的 ） 就 存在 着 进行 一定 程度 进程 状态 重建 的 可能性 　 　 在 第节 我们 将 在 这 两个 发现 的 基础 上 给出 进程 状态 恢复 的 优化 策略 　 优化 策略 　 　 下面 我们 来 考察 交换 软件 中 的 资源管理 进程 　 　 对于 交换 系统 中 的 每 一类 资源 如 用户线 、 中继线 和 交换 通路 等 都 有 相应 的 资源管理 进程 负责管理 一般来讲 在 呼叫 的 建立 阶段 呼叫 进程 以 一定 的 顺序 逐一 向 相应 的 资源管理 进程 申请 资源 在 得到 满足 之后 建立 连接 在 呼叫 的 释放 阶段 再 以 一定 的 次序 释放 这些 资源 这 决定 了 资源管理 进程 几乎 和 所有 的 呼叫 进程 交互 以 话音 交换 通路 管理 进程 （ sp ） 为例 典型 的 交互 过程 如图所示 其中 m 和 m 分别 是 进程 P 和 P 申请 交换 通路 的 消息 m 和 m 是 相应 的 应答 消息 管理 进程 在 接收 到 申请 消息 （ m 和 m ） 后 首先 寻找 是否 存在 空闲 的 话音 交换 通路 如果 存在 空闲 通路 则 选定 其中 的 一条 并 将 该 通路 置 忙 之后 向 申请 进程 返回 该 通路 的 编号 （ m ） ； 如果 不 存在 空闲 通路 则 向 申请 进程 返回 失败 消息 （ m ） mn 和 mn 是 释放 话 路 的 过程 其中 mn 携带 有 释放 话 路 的 编号 话 路 管理 进程 将 该 话 路 置 闲 之后 返回 一个 应答 消息 （ mn ） 随后 该话 路 即可 被 其他 进程 所 占用 图 　 　 我们 现在 考虑 进程 P 在 k 点 失效 的 情况 假设 P 在 失效 后 状态 退回 到 某个 呼叫 稳态 l 根据 定义 所 导致 的 依赖 关系 sp 的 状态 必须 后退 至 接收 消息 m 之前 （ 这里 是 j ） 从而 引起 P 以及 其他 所有 对 j 状态 有 依赖 关系 的 进程 的 后退 由于 sp 在 接收 到 m 之后 可能 与 大量 的 进程 进行 了 交互 因此 需要 后退 的 进程 可能 很多 在 实际 应用 中有 的 后退 是 不 可能 的 如 进程 向 外界 环境 输出 的 消息 不 可能 收回 ； 有 的 后退 是 不明智 的 如 后退 影响 了 正在 进行 的 通话 　 　 事实上 不必 进行 sp 的 状态 后退 只 需 将 P 卷 回至 状态 l 因为 P 等 进程 并 没有 受到 P 失效 的 影响 P 失效 给 sp 带来 的 负面效应 仅仅 是 某 一条 话 路 的 虚 占 这 可以 通过 其他 方法 （ 可能 的话 可 与 硬件 话音 通路 寄存器 核对 ［ ］ ） 对 sp 的 状态 进行 修正 　 　 下面 我们 提出 对于 该类 进程 的 一般性 的 状态 恢复 算法 　 　 首先 我们 考虑 像 交换 系统 这样 的 多用户 系统 的 功能 相对 正确性 　 　 定义 进程 可以 用 有限 状态 自动机 FQE δ q 来 表示 其中 Q 是 进程 状态 的 有限 集合 E 是 事件 的 有限 集合 δ 是 一个 状态 转换 函数 δ Q × E → Qq 为 进程 的 初始状态 　 　 假设 进程 p 和 p ′ 我们 用 p ‖ p ′ 表示 一个 进程 其 行为 就是 p 和 p ′ 构成 的 系统 的 行为 符号 “ ‖ ” 称为 并发 算子 我们 将 系统 中 进程 的 集合 记为 S 环境 可以 看做 是 另外 一个多 进程 的 系统 其中 的 每 一个 进程 表示 一个 接受 服务 的 用户 称为 环境 进程 环境 进程 的 集合 记为 SENV 　 　 引入 迹 的 概念 和 相应 的 算子 ： 　 　 迹 ： 一个 进程 行为 的 迹 是 事件 的 一个 有限 序列 　 　 ： 连接 算子 ab 将 两个 迹 a 和 b 按 次序 简单 地 拼到 一起 构成 一个 迹 　 　 ↑ ： 局限 算子 t ↑ A 表示 迹 t 局限于 集合 A 中 的 事件 即 把 t 中 所有 不 属于 A 的 事件 去掉 之后 留下 的 迹 例如 ： 〈 eeeee 〉 ↑ ee 〈 eee 〉 　 　 ≤ ： 前缀 算子 假设 t ′ 是 序列 t 的 一个 初始 子 序列 则 我们 总能 找到 t ′ 的 某个 扩展 序列 使 t ′ μ t 定义 t ′ ≤ t ≡ μ t ′ μ t 　 　 进程 p 的 所有 可能 的 迹 的 全集 是 有 可能 事先 知道 的 我们 定义 函数 Tracep 来 产生 这个 集合 　 　 定义 进程 p 的 功能 对于 进程 p ′ 是 相对 正确 的 当且 仅 当 其中 Commpp ′ 表示 p 和 p ′ 交互 事件 的 集合 　 　 如果 则 称 系统 对于 用户 p ′ 的 功能 是 相对 正确 的 　 　 定义 系统 的 功能 是 相对 正确 的 当且 仅 当 p ′ ∈ SENV 系统 对于 用户 p ′ 的 功能 相对 正确 　 　 定义 系统 功能 的 相对 正确性 仅 从 单个 用户 的 视角 来 看待 系统 的 行为 摆脱 了 所有 用户 进程 作为 一个 整体 对系统 的 要求 显然 对于 用户 进程 相互 独立 的 应用 系统 系统 功能 的 相对 正确 等价 于 功能 正确 （ 所谓 进程 相互 独立 是 指 进程 的 状态 之间 不 存在 依赖 关系 ） 　 　 对于 交换 系统 而言 如果 我们 将 一次 呼叫 所 涉及 到 的 所有 用户 看成 是 一个 用户 进程 并 不 考虑 用户 进程 之间 的 资源共享 问题 则 用户 进程 之间 是 相互 独立 的 因此 我们 有 必要 单独 对 资源管理 进程 加以分析 用户 进程 通过 资源管理 进程 相互影响 可以 分为 两种 情况 第 影响 了 分配资源 的 具体 编号 占 绝大多数 ； 第 影响 了 资源分配 的 成功 与否 占 极小 的 比率 从 用户 进程 的 角度 上 看 这 两种 影响 均 可以 忽略 因此 如果 我们 强行 指定 这种 影响 不 存在 即将 资源管理 进程 收到 的 资源 请求 消息 标记 为 非 重要 消息 则 可以 导出 用户 进程 之间 是 独立 的 　 　 我们 的 思路 是 首先 根据 应用 系统 的 特点 划分 用户 进程 从 概念 上 初步判断 系统 功能 的 相对 正确 是否 已经 足够 如果 该 判断 成立 则 由 定义 的 系统 进程 的 交互 关系 推断出 导致用户 进程 依赖 关系 的 进程 链 和 相应 的 消息 然后 逐一 对 该 进程 链中 的 进程 进行 分析判断 该 进程 接收 相应 消息 导致 的 状态 变化 对 另 一 用户 进程 的 影响 如果 认为 这种 影响 可以 忽略 则 将 此 消息 标记 为 非 重要 消息 从而 割断 用户 进程 之间 的 依赖 关系 如果 没有 可以 标记 的 消息 则 认为 该 系统 不 适合 于 依赖 关系 的 优化 以上 步骤 在 进程 的 设计 完成 之后 进行 　 　 系统 在 恢复 时 依赖于 重要 消息 形成 的 依赖 关系 　 　 进程 p 保存 一个 消息 编号 向量 M 〈 mmmN 〉 其中 mi 记载 进程 i 发给 p 的 最近 一次 的 消息 编号 mp 为 进程 p 自身 的 发送 消息 编号 p 每 发送 一次 消息 mp 的 值加 并 作为 该 消息 的 一部分 发送至 目的 进程 进程 在 接收 到 一条 消息 之后 根据 消息 内容 中 附带 的 消息 编号 修改 自己 的 消息 编号 向 量值 在 正常 情况 下 从 同一 进程 接收 到 的 连续 消息 的 编号 应该 是 递增 的 如果 接收 到 的 消息 编号 小于 或者 等于 向量 中 对应 的 消息 编号 值则 说明 消息 的 发送 进程 产生 了 后退 　 　 如果 进程 p 在 系统 的 恢复 完成 之后 发现 了 相关 进程 的 后退 则 可以 采用 前向 恢复 的 思想 对 进程 p 的 状态 进行 修正 本文 提供 一个 可能 的 解决方案 p 暂停 正常 的 处理 启动 一个 对话 在 该 对话 中 进程 向 与 之 具有 数据 耦合 关系 的 有关 进程 发送 请求 消息 收集 其 状态 恢复 所 必须 的 数据 直到 所有 的 消息 都 得到 了 响应 p 的 状态 得到 修正 对话 结束 p 继续 正常 的 处理 对话 的 启动 可以 选在 一个 系统 负荷 很轻 的 时间段 （ 对于 交换 系统 而言 可以 考虑 在 凌晨 启动 对话 ） 从而 尽可能 减轻 状态 修正 对系统 的 影响 关于 交换 系统 的 有 针对性 的 前 向 恢复 方法 我们 将 另文 给出 　 　 具体 的 状态 恢复 算法 可以 在 已有 算法 文献 ［ ］ 等 的 基础 上 扩充 这里 从略 　 　 我们 分析 该 算法 应用 于 协作 的 恢复 时 可能 带来 的 好处 一个 典型 的 会 话 执行 过程 如图 （ a ） 所示 进程 ppp 和 p 之间 的 交互 构成 会话 C 进程 ppp 和 p 之间 的 交互 构成 会话 C 从图 中 可以 看出 由于 C 和 C 存在 着 共同 的 参与 进程 p 使得 C 和 C 必须 以 串行 的 方式 执行 如果 对 进程 可以 应用 上述 算法 则 可以 按如图 （ b ） 所示 的 方式 执行 其 原因 在于 由于 定义 了 非 重要 消息 i 和 i 使得 进程 p 不必 遵循 随会 话 内 其他 进程 的 回滚 而 回滚图 　 　 在 非 协作 的 恢复 方法 中 应用 本 算法 的 好处 通过 图 的 说明 已经 可以 看到 这里 不再 赘述 　 讨论 　 　 消息 语义 的 概念 由 Leong 和 Agrawal 提出 他们 首先 注意 到 消息 的 提交 可能 不会 导致 接收 进程 状态 的 改变 因此 不会 引起 进程 状态 对 消息 的 依赖 本文 在 此基础 上 做 了 进一步 的 扩充 指出 针对 某些 特定 的 应用 进程 即使 消息 接收 进程 的 状态 发生 了 改变 也 可以 不 导致 进程 状态 对 消息 的 依赖性 相比之下 Leong 的 方法 对非 重要 消息 的 判定 可以 不 需要 应用 进程 设计者 的 参与 而 利用 静态 的 数据流 分析 和 动态 执行 算法 的 手段 来 实现 ； 在 我们 的 方法 中非 重要 消息 需要 设计 人员 根据 具体 应用 进程 的 语义 给出 　 　 关于 会话 的 并发 性 JXu 曾 提出 了 一种 称之为 “ 协作 的 原子 动作 （ CA ） ” 模型 ［ ］ 该 模型 将 事务处理 从会 话 中 分离 开来 （ 称为 外部 原子 对象 ） 并 认为 外部 原子 对象 的 并发 性 控制 以及 错误 恢复 应 单独 加以 考虑 本文 的 思想 在 某些 方面 与 之 有 相近 之 处 　 　 本文 的 方法 是 结合 应用 进程 的 特点 提出 的 作者 认为 针对 特定 的 应用 、 特定 的 数据结构 制定 出 容忍 特定 软件 错误 的 方法 更切乎 实际 　 本文 研究 得到 国家教委 博士点 基金 资助 本文 通讯联系 人 王准 北京 北京市 信箱 分箱 室 作者简介 　 王准 年生 博士 主要 研究 领域 为 软件 容错 通信软件 分布式系统 　 　 　 　 　 陈俊亮 年生 教授 博士生 导师 中国科学院 院士 中国工程院 院士 主要 研究 领域 为 程控 交换 系统 智能网 通信软件 作者 单位 ： 王准 南方 通信 惠州 实业 有限公司 北京 研究所 　 北京 　 　 　 　 　 　 王准 　 陈俊亮 北京邮电大学 程控 交换 技术 与 通信网 国家 重点 实验室 　 北京 　 Emailwangzhunnet 参考文献 　 　 RandellBSystemstructureforsoftwarefaulttoleranceIEEETransactionsonSoftwareEngineering ～ 　 　 AndersonTKnightJCAframeworkforsoftwarefaulttoleranceinrealtimesystemsIEEETransactionsonSoftwareEngineering ～ 　 　 LamportLTimeclocksandtheorderingofeventsinadistributedsystemCommunicationoftheACM ～ 　 　 BirmanKSchiperAStephensonPLightweightcausalandatomicgroupmulticastACMTransactionsonComputerSystems ～ 　 　 JohnsonDBZwaenepoelWRecoveryindistributedsystemsusingoptimisticmessageloggingandcheckpointingJournalofAlgorithms ～ 　 　 WangYMConsistentglobalcheckpointsthatcontainagivensetoflocalcheckpointsIEEETransactionsonComputers ～ 　 　 CristianFUnderstandingfaulttolerantdistributedsystemsCommunicationofACM ～ 　 　 LeongHVAgrawalDUsingmessagesemanticstoreducerollbackinoptimisticmessageloggingrecoveryschemesInProceedingsofthethInternationalConferenceonDistributedComputingSystemLosAlamitorsCAIEEEComputerSocietyPress ～ 　 　 StromRYeminiSOptimisticrecoveryindistributedsystemsACMTransactionsonComputerSystems ～ 　 　 NakamuraROnoHetalReliableswitchingsystemrecoveryInIEEEGLOBCOMNJIEEEInc ～ 　 　 XuJieRandellBRomanovskyAetalFaulttoleranceinconcurrentobjectorientedsoftwarethroughcoordinatederrorrecoveryInProceedingsofthethInternationalSymposiumonFaultTolerantComputingDigestofPapersLosAlamitorsCAIEEEComputerSocietyPress ～ 本文 收到 原稿 收到 修改稿