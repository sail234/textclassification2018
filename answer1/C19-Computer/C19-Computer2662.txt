软件 学报 JOURNALOFSOFTWARE 年 　 第卷 　 第期 　 Vol 　 No 　 用 LR 算法 分析 汉语 的 语法 关系 周会平 　 王挺 　 陈 火旺 摘要 　 为了 获取 汉语 词语 之间 的 语法 关系 ， 以 达到 准确 分析 汉语 的 目的 ， 文章 给出 了 一种 基于 词组 的 扩充 的 LR 分析方法 关键词 　 机器翻译 ， 依存 文法 ， 上下文 无关 文法 ， 中间 语言 ， LR 算法 中图法 分类号 　 TPUsingLRAlgorithmtoAnalyzetheGrammarRelationsofChineseZHOUHuipingWANGTingCHENHuowangDepartmentofComputerScienceChangshaInstituteofTechnologyChangshaAbstract 　 InordertoobtainthegrammarrelationsbetweenthewordsinChinesesentencesandanalyzeChinesecorrectlytheauthorspresentanextendedLRalgorithmbasedonphrasesinthispaperKeywords 　 MachinetranslationdependencygrammarcontextfreegrammarinterlinguaLRalgorithm 　 　 汉语 是 孤立语 ， 语法 现象 非常灵活 例如 ， 汉语 的 名词 除了 作 主语 和 宾语 外 ， 还 可以 作 谓语 和 定语 动词 和 形容词 既 可以 作 谓语 、 状语 ， 也 可以 作 主语 、 宾语 这种 语言 现象 导致 了 一个 句子 可以 包含 多个 谓词 （ 动词 和 形容词 ） ， 而且 汉语 的 语法 没有 提供 任何 标志 来 描述 它们 之间 的 关系 因此 ， 如何 确定 汉语 句子 中 各 词语 之间 的 关系 是 汉语 分析 中 一个 非常 令人 头疼 ， 也 的确 是 非常 困难 的 问题 　 　 语法 关系 来源于 依存 文法 中 的 依存关系 ， 用于 描述 词语 之间 内在 的 联系 语法 关系 树 和 语义 网 之间 也 存在 着 比较简单 的 对应 关系 我们 采用 一种 扩充 的 LR 算法 来 分析 汉语 词间 的 语法 关系 ， 目前 这种 算法 正 应用 于 一个 基于 中间 语言 的 汉英 翻译 系统 interlinguabasedChineseEnglishnaturallanguagetranslation 简称 ICENT ［ ］ 中 ， 并 取得 了 比较满意 的 结果 　 词间 的 语法 关系 　 　 依存 文法 dependencygrammar 是 由 Tesniere ［ ］ 于 年 提出 的 一种 语法 理论 年 Gaifman ［ ］ 对 它 进行 了 形式化 ， 并 正式 在 语言 学界 提出 来 依存 文法 直接 描述 单个 词 之间 的 关系 ， 依存关系 描述 了 中心词 与 修饰词 、 动词 与 施受 对象 之间 的 关系 如果 用 箭头 表示 依存关系 ， 则 句子 “ 依存 文法 直接 描述 单个 词 之间 的 关系 ” 的 结构 如图所示 　 　 从图 可以 看出 ， “ 描述 ” 是 句子 的 中心词 ， 直接 依存 于 它 的 词 有 个 ， 其中 ， “ 文法 ” 是 它 的 主语 ， “ 关系 ” 是 宾语 ， “ 直接 ” 是 修饰词 直接 依存 于 “ 文法 ” 的 词 只有 “ 依存 ” ， 是 它 的 修饰词 图 　 句子 “ 依存 文法 直接 描述 单个 词 之间 的 关系 ” 各词 之间 的 依存关系 　 　 传统 的 依存 文法 只 描述 了 词 与 词 之间 的 依存关系 ， 没有 任何 语法 信息 直接 用 它 来 表示 和 分析 汉语 句子 ， 其 结果 显得 太粗 ， 忽略 了 太 多 的 信息 我们 对 它 进行 了 改进 ， 在 其中 加入 一些 语法 功能 函数 来 描述 词 之间 的 语法 关系 我们 将 它 写成 fAX ， A 其中 XA 是 句子 中 的 两个 词法 结构 ， 函数 fA 描述 X 和 A 之间 的 语法 关系 ， 可以 是 sentpredobjmanpred 等值 这样 对 句子 “ 依存 文法 直接 描述 单个 词 之间 的 关系 ” 就 可以 描述 如下 ： 　 　 attobj （ 依存 ， 文法 ） 　 manpred （ 直接 ， 描述 ） 　 quanobj （ 单个 ， 词 ） 　 　 objdir （ ， 之间 ） 　 　 objaux （ ， 的 ） 　 　 　 　 attobj （ ， 关系 ） 　 　 predobj （ ， ） 　 　 　 agentpred （ ， ） 　 　 　 end （ ） 　 　 改进 后 的 语法 关系 树 清楚 地 描述 了 句子 中 各 词语 之间 的 关系 以及 它们 在 句子 中 的 语法 功能 ， 使 句子 的 框架 一目了然 加入 的 语法 功能 函数 和 系统 的 中间 语言 结构 对 词汇 的 语法 功能 的 描述 是 一一对应 的 ， 便于 从 语法 关系 的 表示 到 中间 语言 结构 的 直接 转换 ICENT 通过 适当 改写 上下文 无关 文法 使 系统 在 得到 分析树 的 同时 获得 句子 词间 的 语法 关系 　 扩充 的 LR 分析方法 　 　 LR 算法 原本 是 为 程序语言 设计 的 ， 它 根据 一张 分析 表 的 内容 决定 推理机 下 一步 的 动作 ： 移进 或者 归约 分析 表 可以 从 一组 上下文 无关 短语 通过 算法 自动 生成 传统 的 LR 算法 只能 处理 简单 的 上下文 无关 文法 ， 对于 分析 表中 的 歧义 无能为力 分析 表 的 歧义 是 指 在 分析 表 的 某 一项 中 同时 包含 移进 和 归约 或 包含 多个 归约 动作 之后 ， Tomita ［ ］ 对 基于 上下文 无关 文法 的 LR 分析 算法 进行 了 扩充 ， 使 它 能够 处理 移进 归约 歧义 也 就是 在 碰到 移进 归约 歧义 时 ， 复制 分析 栈 ， 让 每个 分析 栈去 完成 分析 表中 的 一个 动作 ， 保留 多种 可能性 ， 生成 多个 结果 为了 方便 书写 规则 ， ICENT 的 分析器 对 所 使用 的 上下文 无关 文法 没有 任何 限制 ， 可以 有 左 递归 例如 ， 对于 如下 的 一个 包含 歧义 的 文法 ， 其 分析 如表 所示 　 　 START → S 　 　 　 S → pronVP 　 　 　 S → VP 　 　 　 　 　 VP → verbS 　 　 VP → LOCVP 　 　 VP → VPnoun 　 　 VP → verbaux 　 LOC → noundirec 表 　 歧义 文法 生成 的 分析 表移 进 归约 表 GOTO 表 StatepronverbnounauxdirecSVPLOCshshshsh 　 　 　 　 shshsh 　 　 　 　 　 　 　 sh 　 　 　 　 　 shshshsh 　 　 　 　 　 　 　 sh 　 　 　 　 　 　 　 　 　 acc 　 　 　 rererererere 　 　 　 　 　 sh 　 　 　 　 　 　 　 shshsh 　 　 　 　 rererererere 　 　 　 rererererere 　 　 　 rererererere 　 　 　 rererererere 　 　 　 rererererere 　 　 　 rererererere 　 　 　 　 　 在 表中 ， 状态 碰上 动词 时 就 会 产生 移进 歧义 这时 ， 系统 将 原来 的 分析 栈 一分为二 ， 分别 保留 两种 移进 的 中间 结果 用 这个 分析 表 分析 句子 “ 他 看见 叶子 上爬 着 蚜虫 ” 全部 移进 后 的 栈 状态 如下 所示 　 　 — pron — — verb — — × 　 　 — pron — — verb — — LOC — — VP — — noun — 　 　 — pron — — VP — — noun — 　 　 — S — — × 　 　 — pron — — verb — — VP — — noun — 　 　 — pron — — verb — — LOC — — verb — — × 　 　 从 以上 分析 过程 可以 看出 ， 先后 次 碰到 移进 归约 歧义 ， 次 对 栈 进行 了 复制 ， 共 生成 了 个 分析 结果 ， 但 其中 的 个 栈 ， ， 由于 出错 而 夭折 ICENT 采用 这种 扩充 的 LR 分析方法 进行 汉语 分析 以 获取 多个 分析 结果 ， 保留 汉语 句子 的 歧义 性 　 通过 LR 算法 获取 句子 的 语法 关系 　 　 LR 分析方法 只 保留 了 句子 中 词语 之间 的 层次 关系 ， 而 没有 足够 可用 的 语法 信息 例如 ， 两个 名词 可以 归约 成 一个 名词 词组 ， 这部分 工作 LR 分析方法 可以 完成 但 在 分析 汉语 句子 结构 时 ， 我们 更 需要 了解 这 两个 名词 之间 的 语法 关系 ， 是 偏正 还是 并列 关系 若 没有 词语 之间 的 语法 信息 ， 对 句子 的 分析 是 不 可能 的 因此 ， 我们 将 上下文 无关 文法 、 语法 关系 和 LR 分析方法 结合 起来 ， 在 获取 句子 分析树 的 同时 获取 句子 词语 之间 的 语法 关系 　 　 要 在 文法 中 描述 词语 之间 的 语法 关系 ， 文法 的 结构 就 不能 太 复杂 ICENT 文法 规则 的 形式 都 是 描述 两个 词法 单位 之间 的 关系 ， 如 Nounyword → adjnoun ， 这样 组成 Nounyword 的 两个 词法 单位 adj 和 noun 之间 的 关系 就 很 容易 描述 但 使用 这种 简单 的 文法 规则 必然 会 导致 分析 的 歧义 性 非常 大 ， 如果 任由 分析器 在 分析 的 过程 中 不断 地 产生 新 的 栈 ， 对于 一些 复杂 的 句子 就 会 生成 相当 多 的 分析树 ， 并 有 可能 产生 组合 爆炸 因此 ， 系统 必须 提供 一些 机制 去 阻止 一些 错误 分析树 的 产生 　 　 ICENT 采用 上下文 无关 文法 的 形式 ， 并 对 它 进行 了 扩充 ， 其 文法 形式 是 一个 六元 式 GVTVNVDVFS Ψ ， 其中 VT 是 终结符 集合 ， 是 一个 非空 有限 集 ； VN 是非 终结符 集合 ， 是 一个 非空 有限 集 ， 并 有 VT ∩ VN ； VD 是 语法 关系 集合 ， 是 一个 非空 有限 集 ； VF 是 布尔 函数 集合 ， 是 一个 非空 有限 集 ， 有 accept ∈ VF ； S 是 开始符号 ， S ∈ VN ； Ψ 是 一个 产生 式 集合 ， 每个 产生 式 的 形式 是 P → 〈 α β γ 〉 ， 其中 P ∈ VN ， α ∈ VT ∪ VN ， β ∈ VD ， γ ∈ VF β 描述 了 α 中 各 成员 之间 的 语法 关系 ， γ 是 产生 式 的 约束 函数 ， 只有 当 分析器 的 当前 状态 满足 该 函数 时 ， 产生 式 才 是 有效 的 ， 才能 使用 该 产生 式 进行 归约 　 　 ICENT 使用 算法 根据 产生 式 集 自动 生成 了 张 表格 ， 第张 是 移进 归约 表格 ， 描述 了 推理机 在 当前 状态 面对 下 一个 终结符 要 做 的 动作 ， 是 将 该 终结符 移进 还是 对 当前 栈顶 的 元素 进行 归约 ， 这是 一个 含 歧义 的 表格 ， 一栏 中 可以 含有 多个 移进 归约 动作 ， 推理机 通过 栈 复制 来 处理 分析 表 的 歧义 第张 是 GOTO 表格 ， 它 描述 了 推理机 在 当前 状态 面对 当前 终结符 或非 终结符 所 要 进入 的 下 一个 状态 这 也 是 一个 含 歧义 的 表格 ， 有 的 状态 在 面对 某些 非 终结符 时 可能 有 多个 不同 的 新 状态 选择 推理机 也 是 通过 栈 复制 的 方式 来 处理 GOTO 表 的 歧义 第张 是 规则 语法 属性 表 ， 它 描述 了 推理机 在 使用 某 一条 规则 进行 归约 时 ， 被 归约 的 各 元素 之间 的 语法 关系 一条 规则 可以 有 多种 语法 关系 ， 如 名词 之间 的 并列 和 修饰 关系 同 一条 规则 如果 存在 多种不同 的 语法 关系 ， 在 系统 中 就 表现 为 多条 不同 的 规则 ， 并 在 移进 归约 表格 和 规则 语法 属性 表中 有 多个 不同 的 入口 如 规则 NP → 〈 nounnounandnounNULL 〉 和 NP → 〈 nounnounattobjNULL 〉 虽然 都 是从 两个 名词 归约 成 一个 名词 词组 ， 但 由于 它们 的 语法 属性 不同 ， 在 ICENT 里 就是 两条 不同 的 规则 第张 表是 约束 函数 表 ， 移进 归约 表中 的 每 一个 归约 动作 都 要 满足 一定 的 前提条件 才 会 有效 这些 前提条件 体现 在 约束 函数 表中 的 函数 （ 函数 可以 为空 ， 空 函数 返回 真 ） ， 系统 可以 任意 设置 这些 函数 来 调整 推理机 的 动作 ， 阻止 对 错误 分析树 的 继续 分析 　 例子 　 　 本 节 给出 了 一个 使用 LR 分析方法 来 分析 扩充 后 的 上下文 无关 文法 来 获取 汉语 句子 词语 间 语法 关系 的 实例 使用 的 文法 由 第节 中 的 歧义 文法 扩充 而 来 ， 如下 所示 　 　 START → 〈 Sendaccept 〉 　 　 　 　 　 S → 〈 pronVPagentpredsubpron 〉 　 　 S → 〈 VPsentnosub 〉 　 　 　 　 　 　 　 VP → 〈 verbSpredobjtakesent 〉 　 　 VP → 〈 LOCVPlocpredNULL 〉 　 　 　 VP → 〈 VPnounpredobjverbobj 〉 　 　 VP → 〈 verbauxpredauxauxfverb 〉 LOC → 〈 noundirecobjdirNULL 〉 其中 语法 关系 中 的 end 表示 分析 结束 ， 得到 分析树 ； agentpred 描述 被 归约 的 两个 元素 是 主语 和 谓词 结构 之间 的 关系 ； predobj 描述 谓词 结构 与 宾语 之间 的 关系 ； locpred 描述 地点 状语 与 谓词 结构 的 关系 ； objdir 描述 方位 词组 中 中心词 与 方位词 之间 的 关系 规则 里 的 函数 都 是 系统 自定义 的 ， 它 定义 了 使用 该 规则 的 前提条件 ， 如 函数 accept 给出 了 接受 一个 句子 的 前提条件 ， 只有 当 它 被 满足 时 ， 非 终结符 S 才能 被 归约 成 START 下面 是 系统 使用 图中 的 文法 对 句子 “ 他 看见 叶子 上爬 着 蚜虫 ” 的 归约 过程 　 　 开始 系统 的 栈顶 状态 初始化 为 ， 表示 分析 开始 系统 的 当前 词是 “ 他 ” ， 词性 是 pron ， 推理机 的 动作 是 移进 ， 并且 从 GOTO 表中查 到 当 状态 遇到 终结符 pron 时 ， 转入 新 状态 移进 “ 他 ” 后 的 栈 状态 为 ： 　 　 NextWord “ 看见 ” 　 　 pron 　 　 推理机 的 动作 和 传统 LR 分析器 基本相同 ， 状态 遇 动词 移进 ， 但 在 GOTO 表中 查找 要 转入 的 新 状态 时 存在 歧义 ， 表中 给出 了 两个 状态 ， 分别 是 和 系统对 栈 进行 复制 ： 　 　 NextWord “ 叶子 ” 　 　 pronverb 　 　 　 　 　 　 　 　 　 　 　 　 　 pronverb 　 　 第个 栈 遇到 名词 “ 叶子 ” 时 出错 ， 被 抛弃 ， 则 有 ： 　 　 NextWord “ 上 ” 　 　 pronverbnoun 　 　 移进 “ 上 ” 和 状态 ： 　 　 NextWord “ 爬 ” 　 　 pronverbnoundirec 　 　 状态 在 当前 词是 动词 时 使用 规则 来 归约 ， 系统 首先 查询 规则 的 约束 函数 ， 为 NULL ， 返回 真 规则 的 语法 关系 属性 是 objdir ， 在 归约 的 同时 ， 系统 记录 了 被 归约 的 各 语法结构 之间 的 语法 关系 ： 　 　 NextWord “ 爬 ” 　 　 pronverbLOC 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 objdir （ 叶子 ， 上 ） 　 　 移进 “ 爬 ” 时 出现 歧义 ， 分别 转入 状态 和 ： 　 　 NextWord “ 着 ” 　 　 pronverbLOCverb 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 objdir （ 叶子 ， 上 ） 　 　 　 　 　 　 　 　 　 　 　 　 pronverbLOCverb 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 语法 关系 同 　 　 移进 “ 着 ” 时 ， 第棵 分析树 出错 ， 被 抛弃 ： 　 　 NextWord “ 蚜虫 ” 　 　 pronverbLOCverbaux 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 objdir （ 叶子 ， 上 ） 　 　 状态 在 遇到 名词 时 ， 要 用 规则 进行 归约 系统 调用 规则 的 约束 函数 auxfverb 检查 动词 “ 爬 ” 和 助词 “ 着 ” 的 语法 属性 ， 如果 它们 能 组成 一个 谓词 结构 ， 则 返回 真 归约 的 同时 记录 词语 之间 的 语法 关系 ， 归约 后 查询 GOTO 表 出现 歧义 ， 分别 转入 状态 和 ： 　 　 NextWord “ 蚜虫 ” 　 　 pronverbLOCVP 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 objdir （ 叶子 ， 上 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predaux （ 爬 ， 着 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 pronverbLOCVP 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 语法 关系 同 　 　 状态 在 当前 词是 名词 时移 进 ， 移进 后 句子 结束 ， 当前 词是 结束符 “ ＄ ” 状态 在 当前 词是 名词 时 归约 ， 归约 时 约束 函数 为 NULL ， 之后 分别 转入 状态 和 ： 　 　 NextWord 　 　 pronverbLOCVPnoun 　 　 　 　 　 　 　 　 　 　 　 　 　 　 objdir （ 叶子 ， 上 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predaux （ 爬 ， 着 ） 　 　 NextWord “ 蚜虫 ” 　 　 pronverbVP 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 objdir （ 叶子 ， 上 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predaux （ 爬 ， 着 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 locpred （ ， ） 　 　 NextWord “ 蚜虫 ” 　 　 pronverbVP 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 语法 关系 同 　 　 下 一步 ， 第个 栈 的 动作 是 用 规则 进行 归约 ， 约束 函数 是 verbobj ， 归约 后 状态 是 和 第个 栈 的 动作 是 用 规则 归约 ， 约束 函数 是 nosub ， 它 检查 当前 谓词 结构 是否 适合 归约 成 句子 结构 ， 结果 为 假 ， 被 抛弃 第个 栈 的 动作 是 移进 ： 　 　 NextWord 　 　 pronverbLOCVP 　 　 　 　 　 　 　 　 　 　 　 　 　 　 objdir （ 叶子 ， 上 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predaux （ 爬 ， 着 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predobj （ ， 蚜虫 ） 　 　 NextWord 　 　 pronverbLOCVP 　 　 　 　 　 　 　 　 　 　 　 　 　 　 语法 关系 同 　 　 NextWord 　 　 pronverbVPnoun 　 　 　 　 　 　 　 　 　 　 　 　 　 　 语法 关系 同 　 　 下 一步 ， 第个 栈 出错 ， 后 两个 栈 分别 用 规则 、 进行 归约 ， 之后 都 产生 歧义 ， 分别 转入 状态 和 ： 　 　 NextWord 　 　 pronverbVP 　 　 　 　 　 　 　 　 　 　 　 　 　 　 objdir （ 叶子 ， 上 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predaux （ 爬 ， 着 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predobj （ ， 蚜虫 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 locpred （ ， ） 　 　 NextWord 　 　 pronverbVP 　 　 　 　 　 　 　 　 　 　 　 　 　 　 语法 关系 同 　 　 NextWord 　 　 pronverbVP 　 　 　 　 　 　 　 　 　 　 　 　 　 　 objdir （ 叶子 ， 上 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predaux （ 爬 ， 着 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 locpred （ ， ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predobj （ ， 蚜虫 ） 　 　 NextWord 　 　 pronverbVP 　 　 　 　 　 　 　 　 　 　 　 　 　 　 语法 关系 同 　 　 下 一步 ， 第 、 个栈 出错 ， 第 、 个 栈用 规则 归约 ， 然后 转入 状态 ： 　 　 NextWord 　 　 pronverbS 　 　 　 　 　 　 　 　 　 　 　 　 　 　 objdir （ 叶子 ， 上 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predaux （ 爬 ， 着 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predobj （ ， 蚜虫 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 locpred （ ， ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 sent （ ） 　 　 NextWord 　 　 pronverbS 　 　 　 　 　 　 　 　 　 　 　 　 　 　 objdir （ 叶子 ， 上 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predaux （ 爬 ， 着 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 locpred （ ， ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predobj （ ， 蚜虫 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 sent （ ） 　 　 下 一步 ， 两个 栈 的 动作 都 是 用 规则 归约 ， 约束 函数 takesent 判断 动词 结构 能否 带 宾语 从句 ， 归约 后 都 产生 歧义 ， 分别 转入 状态 和 ： 　 　 NextWord 　 　 pronVP 　 　 　 　 　 　 　 　 　 　 　 　 　 　 objdir （ 叶子 ， 上 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predaux （ 爬 ， 着 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predobj （ ， 蚜虫 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 locpred （ ， ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 sent （ ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predobj （ 看见 ， ） 　 　 NextWord 　 　 pronVP 　 　 　 　 　 　 　 　 　 　 　 　 　 　 语法 关系 同 　 　 NextWord 　 　 pronVP 　 　 　 　 　 　 　 　 　 　 　 　 　 　 objdir （ 叶子 ， 上 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predaux （ 爬 ， 着 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 locpred （ ， ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predobj （ ， 蚜虫 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 sent （ ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predobj （ 看见 ， ） 　 　 NextWord 　 　 pronVP 　 　 　 　 　 　 　 　 　 　 　 　 　 　 语法 关系 同 　 　 下 一步 ， 第 、 个栈 出错 ， 第 、 个 栈用 规则 归约 约束 函数 subpron 判断 代词 “ 他 ” 能否 作 主语 ， 能则 返回 真 　 　 NextWord 　 　 S 　 　 　 　 　 　 　 　 　 　 　 　 　 　 objdir （ 叶子 ， 上 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predaux （ 爬 ， 着 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predobj （ ， 蚜虫 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 locpred （ ， ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 sent （ ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predobj （ 看见 ， ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 agentpred （ 他 ， ） 　 　 NextWord 　 　 S 　 　 　 　 　 　 　 　 　 　 　 　 　 　 objdir （ 叶子 ， 上 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predaux （ 爬 ， 着 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 locpred （ ， ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predobj （ ， 蚜虫 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 sent （ ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predobj （ 看见 ， ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 agentpred （ 他 ， ） 　 　 最后 ， 两个 栈 都 用 规则 进行 归约 ， 约束 函数 accept 接受 两个 栈为 成功 的 分析树 ： 　 　 NextWord 　 　 Start 　 　 　 　 　 　 　 　 　 　 　 　 　 　 objdir （ 叶子 ， 上 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predaux （ 爬 ， 着 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predobj （ ， 蚜虫 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 locpred （ ， ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 sent （ ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predobj （ 看见 ， ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 agentpred （ 他 ， ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 end （ ） 　 　 NextWord 　 　 Start 　 　 　 　 　 　 　 　 　 　 　 　 　 　 objdir （ 叶子 ， 上 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predaux （ 爬 ， 着 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 locpred （ ， ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predobj （ ， 蚜虫 ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 sent （ ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 predobj （ 看见 ， ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 agentpred （ 他 ， ） 　 　 　 　 　 　 　 　 　 　 　 　 　 　 end （ ） 　 　 至此 ， 系统 得到 了 两个 正确 的 分析树 ， 并 同时 获得 了 形成 两棵树 时 句子 中 词语 之间 的 语法 关系 ， 它们 正是 明确 一个 汉语 句子 的 结构 所 不可 缺少 的 信息 　 结 　 论 　 　 本文 扩充 了 传统 的 上下文 无关 文法 ， 使 它 能 描述 汉语 词语 之间 的 语法 关系 ， 从而 使 汉语 句子 的 结构 一目了然 ， 所 生成 的 每 一个 句子 的 中间 语言 表示 结构 都 不再 存在 语义 和 语法 上 的 歧义 系统 还 在 文法 中 加入 约束 函数 来 调整 推理机 的 动作 ， 使 系统 尽早 抛弃 一些 错误 的 生成 树 ， 减少 系统 不必要 的 开销 ， 同时 也 减少 了 生成 中间 语言 的 歧义 目前 ， 该 方法 正 应用 于 ICENT 系统 ， 并 取得 了 较为理想 的 结果 　 本文 研究 得到 国家自然科学基金 和 国家 高科技 项目 基金 资助 本文 通讯联系 人 ： 周会平 ， 长沙 ， 长沙 工学院 计算机系 作者简介 ： 周会平 ， 年生 ， 博士生 ， 主要 研究 领域 为 人工智能 ， 机器翻译 　 　 　 　 　 王挺 ， 年生 ， 博士 ， 讲师 ， 主要 研究 领域 为 计算 语言学 ， 机器翻译 　 　 　 　 　 陈 火旺 ， 年生 ， 教授 ， 博士生 导师 ， 中国工程院 院士 ， 主要 研究 领域 为 人工智能 ， 计算机 软件作者 单位 ： 长沙 工学院 计算机系 　 长沙 　 参考文献 ： ［ ］ 周会 平等 一个 基于 中间 语言 的 汉英 机译 系统 计算机科学 ， ～ ZhouHuipingetalAninterlinguabasedChineseEnglishmachinetranslationsystemComputerScience ～ ［ ］ TesniereLElementdeSyntaxeStructuralsParisKlincksieck ［ ］ GaifmanHDependencysystemsandphrasestructuresystemsInformationandControl ～ ［ ］ MasaruTomitaAnefficientaugmentedcontextfreeparsingalgorithmComputationalLinguistics ～ ～ 收稿 日期 ： ， 修改 日期 ：