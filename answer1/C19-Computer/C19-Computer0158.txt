微型 电脑 应用 MICROCOMPUTERAPPLICATIONS 　 Vol 　 No 　 P 处理 消息 环 中 消息 的 一种 安全 方法 刘 华蓥 　 韩建民 　 王桂华摘 　 要 ： 本文 阐述 了 Windows 下 消息 映射函数 中 检测 并 处理 消息 的 一种 安全 方法 ， 并 给出 了 程序 实例 。 关键词 ： 消息 　 消息 环 　 消息 映射 机制 　 GetMessagePeekMessageDispatchMessage ▲ 一 、 消息 、 消息 环 和 消息 映射 机制 　 　 Windows 中 应用程序 和 应用程序 之间 、 应用程序 和 用户 之间 的 通信 是 靠 消息 来 实现 的 。 消息 可以 由 用户 发出 ， 如 移动 鼠标 ； 也 可 由 系统 发出 ， 如 建立 一个 窗口 。 Windows 中 的 消息 是 以 一定 的 规则 排列 起来 ， 这 就是 消息 环 。 消息 环 的 结构 是 一个 队列 ， 即 “ 先进先出 ” 。 在 一般 Windows 程序 中 ， 都 是 由主 函数 来 检测 消息 环中 的 消息 ， 然后 对 它 进行 翻译 ， 并 将 翻译 过 的 消息 发送到 消息 指定 的 窗口 ， 处理 完 消息 后 控制 从 消息 处理函数 中 返回 ， 再 取出 消息 环中 的 下 一个 消息 ， 这 就是 windows 编程 中 的 消息 映射 机制 。 　 　 消息 映射 机制 是 windows 编程 的 基本 机制 之一 ， 它 的 优点 是 编程 的 结构化 ； 但 它 也 有 缺点 ， 就是 在 处理 一个 消息 的 过程 中 不能 检测 是否 有 其它 的 消息 。 例如 在 程序 中有 一段 重复 显示 动画 ， 或 传输 文件 等 时间 比较 长 的 操作 ， 如果 进程 允许 被 用户 中断 或 终止 ， 进程 就 必须 间或 地 检测 并 处理 用户 发来 的 消息 。 要 解决 此类 问题 ， 必须 直接 对 消息 环 进行 操作 。 本文 论述 了 在 Windows 环境 下 ， 检测 和 处理 消息 环 中 消息 的 一种 安全 方法 。 二 、 消息 的 检测 与 发送 　 　 消息 的 检测 　 　 检测 消息 环 的 函数 有 两个 ： GetMessage 和 PeekMessage 这 两个 函数 的 区别 有 两点 ： 如果 消息 环 中 没有 消息 ， GetMessage 一直 等到 有 消息 才 返回 ， 而 PeekMessage 则 直接 返回 ， 且 返回值 为 ； PeekMessage 检测 到 WMQUIT 没有 什么 特殊 反应 ， 而 GetMessage 检测 到 WMQUIT 则 返回值 为 。 　 　 由于 在 消息 环 中 可能 没有 消息 ， 使用 GetMessage 进程 会 进入 循环 等待 消息 的 状态 。 所以 用 PeekMessage 比较 安全 ， PeekMessage 用法 如下 ： 　 　 BOOLPeekMessagepMsghWndwMsgfilterMinwMsgFilterMaswRemoveMsg 　 　 该 函数 的 功能 是 检测 发送给 hWnd 窗口 并且 值 在 wRsgFilterMin 和 wMsgFilterMax 之间 的 消息 ， 如 有 ， 则 将 消息 放入 lpMsg 指向 的 MSG 结构 中 。 wRemoveMsg 是 一个 标志 ， 它 可以 是 以下 值 的 组合 ： PMNOREMOVE 表示 经 处理 后 ， 消息 保留 在 队列 中 、 PMREMOVE 表示 经 处理 后 ， 消息 不 保留 在 队列 中 、 PMNOYIELD 防止 向 别的 任务 转让 系统资源 ， 但 在 WIN 中 ， 此参数 无效 。 　 　 如 指定 消息 没有 找到 ， PeekMessage 返回 ， 否则 返回 非值 。 如果 hWnd 为 NULL ， 则 检测 属于 本 应用程序 的 所有 窗口 的 消息 ， 如 wMsgFilterMin 和 wMsgFilterMax 都 为 ， 则 检测 发送给 指定 窗口 的 所有 消息 。 　 　 取出 消息 后 ， 滤出 有用 的 消息 ， 由于 消息 环中 的 消息 没有 经过 翻译 ， 所以 必须 在 处理 之前 先 翻译 一下 ， 再 将 消息 直接 处理 或 发送 出去 。 　 　 发送 消息 　 　 发送 消息 的 函数 有 三个 ： PostMessageSendMessage 和 DispatchMessage 。 前 两个 函数 是 把 消息 放入 消息 环 中 ， 而 DispatchMessage 则 直接 将 消息 发送到 应该 处理 此 消息 的 窗口 ， 并且 等待 将 这个 消息 处理 完才 返回 ， 所以 应该 用 DispatchMessage 来 发送 消息 。 三 、 处理 消息 的 安全 方法 　 　 为了 安全 检测 和 处理 消息 环中 的 消息 ， 需注意 以下几点 ： 　 　 首先 ， 在 消息 环 中 可能 有 很多 消息 ， 所以 检测 消息 时应 一直 检测 下去 直到 没有 消息 为止 。 　 　 其次 ， 如果 在 处理 本 消息 过程 中 又 做 了 关闭 本 程序 窗口 的 操作 ， 若 不 滤掉 关闭 窗口 的 消息 直接 发送 出去 ， 而 DispatchMessage 语句 本身 又 不 在 函数 的 末尾 ， 则 会 导致 内存 渗漏 ， 窗口 关闭 了 ， 但 程序 还 在 内存 中 ， 且 无法 再 对 它 进行 操作 。 因此 ， 当 进程 检测 到 关闭 窗口 的 消息 时应 先用 goto 语句 到 本 函数 的 末尾 ， 再 发送 关闭 窗口 的 消息 。 　 　 第三 ， 如果 再次 在 消息 环 中 检测 到 本 消息 ， 并且 发送 了 出去 ， 则 会 导致 二次 进入 本 程序 体 ， 从而 导致 混乱 。 解决办法 是 设置 一个 布尔 变量 ， 若该 布尔 变量 为 真则 表示 正在 处理 本 消息 。 在 函数 首 对此 布尔 变量 进行 检测 ， 如为 真则 直接 返回 ； 否则 设置 为 真 ， 处理 此 消息 后 在 函数 尾 将 它 设置 为 假 。 四 、 程序 实例 　 　 下面 举例说明 一下 ， 如何 在 应用程序 中 安全 地 检测 、 处理 和 发送 消息 。 　 　 假设 正在 处理 的 消息 是 ID — EDIT — UNDO 其中 TranslateAccelerator 函数 的 功能 是 将 加速 键 翻译成 菜单 命令 并 直接 将 此 消息 发送到 窗口 ， TranslateMessage 函数 的 功能 是 将 虚拟 键 消息 翻译成 字符 消息 ， 因 与 本文 无关 ， 不 做 过 多 介绍 。 　 　 voidDViewOnEditUndoIsEditUndo 在 头文件 中 的 CView 类中 定义 为 BOOL 型 如 IsEditUndo 为 真 ， 表示 正在 处理 IDEDITUNDO 则 不 执行 任何 操作 ， 直接 返回 ifIsEditUndoreturn 将 IsEditUndo 设置 为 真 ， 表示 正在 处理 IDEDITUNDOIsEditUndoTRUE ； MSGmsgMSGmsgmsgBOOLbbbbb 　 　 　 … … dobbPeekMessagemsgNULLOOPMREMOVE 　 　 bbbFALSE 　 　 接收 到 此 消息 证明 用户 选择 了 系统 菜单 的 关闭 窗口 的 命令 ifmsgmessageWMSYSCOMMANDmsgwParmSCCLOSEbbbTRUEgotoeee 接收 到 此 消息 证明 用户 选择 了 FileExit 命令 elseifmsgmessageWMCOMMANDmsgwParamIDAPPEXITbbbTRUEgotoeee 接收 到 此 消息 证明 用户 在 窗口 的 右上角 的 叉号 上 单击 了 一下 elseifmsgmessageWMNCLBUTTONDOWNmsgwParamHTCLOSEbbbTRUEgotoeeeelseifTranslateAcceleratormhWndAccelTablemsg 　 　 　 TranslateMessagemsg 　 　 　 DispatchMessagemsgwhilebb 　 　 　 … … 将 IsEditUndo 设置 为 假 ， 表示 已 处理 完 IDEDITUNDIsEditUndoFALSEeeeifbbbTRUE 　 　 TranslateMessagemsg 　 　 DispatchMessagemsg 五 、 结束语 　 　 消息 映射 机制 是 Windows 下 应用程序 的 重要 组成部分 ， 本文 论述 了 Windows 下 应用 程序开发 中 对 消息 进行 检测 和 处理 的 一种 安全 方法 。 在 实际 应用 中 ， 具有 一定 的 普遍意义 。 ■ 作者 单位 ： 刘 华蓥 大庆 石油学院 计算机系 安达 收稿 日期 ：