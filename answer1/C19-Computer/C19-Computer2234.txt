计算机 应用 研究 APPLICATIONRESEARCHOFCOMPUTERSVolNoP 性能 优化 的 同态滤波 空域 算法 闻莎 　 游志胜 摘 　 要 ： 集中 了 同态滤波 的 常用 算法 ， 从 传统 的 频域 算法 到 现在 常用 的 空域 算法 。 在 空域 算法 中 ， 采用 了 邻域 平均 和 高斯 函数 两种 算法 来 近似 地 实现 低 通滤波 ， 它们 克服 了 频域 算法 的 部分 缺点 ， 但 计算 效率 不高 ， 所以 又 利用 滑窗 思想 和 模板 分解 思想 分别 对 邻域 平均 和 高斯 函数 滤波 两种 算法 分别 进行 了 改进 ， 大大提高 了 空域 同态滤波 的 计算 效率 。 关键词 ： 同态滤波 频域 滤波 空域 滤波 滑窗 思想 模板 分解 　 概要 　 　 同态滤波 是 在 图象处理 中较 常用 到 的 一种 算法 它 通常 用于 处理 照明 不均 的 图象 或是 校正 MR 图象 中 强度 不均 的 问题 。 　 　 对于 一幅 图象 来说 其 灰度 值 可以 看成 是 由 入射光 分量 和 反射光 分量 两 部分 的 乘积 其中 入射光 取决于 光源 ， 它 比较 均匀 ， 随 空间 位置 变化 较 小 ， 所以 入射光 占据 频率 域 的 低频 部分 ， 对应 图象 背景 。 而 反射光 取决于 物体 本身 的 性质 ， 也就是说 景物 的 亮度 特征 主要 取决于 反射光 。 由于 物体 性质 和 结构 特点 不同 迎光 背光 轮廓 ， 反射光 的 强弱 也 很 不 相同 ， 随 空间 位置 变化 较 剧烈 ， 所以 反射光 占据 频率 域 的 高频 部分 对应 图象 细节 。 我们 对 照明 不均 的 图象 的 处理 ， 就是 要 尽量 削减 入射光 分量 的 影响 ， 即 压制 图象 的 低频 分量 ， 同时 要 增强 物体 的 反射光 分量 ， 即 是 放大 图象 的 高频 分量 。 经过 这样 的 处理 ， 对于 一幅 照明 不均 的 图象 我们 能够 在 压制 其 动态 范围 的 同时 增强 图象 的 对比度 ， 达到 我们 的 处理 目的 。 　 　 经典 的 同态滤波 算法 是 在 频率 域 上 进行 的 ， 先 利用 FFT 将 图象 变换 到 频率 域 上 ， 然后 再用 适当 的 滤波 函数 对 低频 部分 和 高频 部分 施加 不同 的 影响 ， 最后 再作 IFFT 变换 回来 。 但是 频率 域 算法 有 几个 缺点 ： 一是 要 对 整幅 图象处理 完后 才能 见到 结果 ； 二是 计算 FFT 时要 扩展 到 复数 域 ， 占用 运算 空间 较大 ； 三是 进行 两次 FFT 花费 的 时间 也 不少 。 所以 我们 现在 将 同态滤波 通常 放到 空间 域 上来 做 ， 一般 的 做法 是 先 对 图象 作低 通滤波 ， 再用 原图 减去 低通 后 的 图象 ， 得到 同态滤波 的 最终 结果 。 在 空间 域 上作 同态滤波 能够 克服 频率 域 算法 的 前 两个 缺点 ， 至于 速度 ， 关键 在 低 通滤波 这一环 本文 用 了 邻域 平均 和 高斯 函数 两种 算法 来 近似 地 实现 低 通滤波 ， 并且 利用 滑窗 思想 和 模板 分解 的 思想 分别 对 低 通滤波 的 两种 算法 进行 了 改进 ， 大大减少 了 计算 量 ， 提高 了 速度 ， 使得 空域 上 的 同态滤波 取得 了 比较 好 的 效果 。 　 算法 　 传统 的 频域 算法 　 　 图象 的 灰度 函数 fxy 看成 是 入射光 分量 和 反射光 分量 两 部分 的 乘积 ， 即 ： fxyixyrxy 其中 ixy 是 入射光 ， 且 ixy ∞ 而 rxy 是 反射光 ， 且 有 rxy 在 作 FFT 变换 之前 要 先用 取 对数 的 办法 将 两个 分量 分开 ， 以便 分别 对 两个 分量 做 不同 的 处理 ， 即令 zxylnfxylnixylnrxy 　 　 然后 再作 FFT 变换 于是 FzxyFlnixyFlnrxy 　 　 简记 为 ZuvIuvRuv 　 　 接下来 选择 一个 合适 的 滤波 函数 Huv ， 对 信号 zxy 进行 处理 ， 则 滤波器 的 输出 为 ： SuvHuvZuvHuvIuvHuvRuv 　 　 再取 其 IFFT 变换 得到 空间 域 的 输出 为 ： sxyFSuvFHuvIuvFHuvRuvixyrxy 　 　 因为 最初 是 用取 对数 将 入射光 和 反射光 分量 分开 所以 最后 还要 对 sxy 进行 反对 数 运算 才能 得到 正确 的 结果 gxyexpsxyexpixyexprxyixyrxy 　 　 上述 处理过程 可以 用 下图 来 表示 。 　 　 在 频率 域 算法 中 ， 影响 速度 的 步骤 是 FFT 和 IFFT ， 因此 运算 时间 只 与 图象 的 大小 有关 ， 与 其它 因素 无关 。 而 影响 同态滤波 效果 的 则 是 滤波 函数 Huv ， 它 的 选择 直接 影响 到 图象处理 出来 的 效果 ， 现在 较 常用 到 的 滤波 函数 有 ButterWorth 高通 滤波器 和 指数 高通 滤波器 它们 的 作用 都 是 压制 低频 而 增强 高频 ， 可以 达到 同态滤波 希望 达到 的 效果 ， ButterWorth 高通 滤波器 的 形式 是 ： 其中 k 根据 截止频率 D 的 定义 不同 可选为 或 ， 另外 n 与 ButterWorth 高通 滤波器 变化 的 剧烈 程度 成正比 。 在 本文 中 k 选为 ， D 选为 ， 而 n 也 选为 。 指数 高通 滤波器 的 形式 是 ： ekDDuvn 其中 k 根据 截止频率 D 的 定义 不同 可选为 或 ， 另外 n 与 指数 高通 滤波器 变化 的 剧烈 程度 成正比 。 在 本文 中 k 选为 ， D 选为 ， 而 n 选为 。 　 空域 算法 　 　 正是 因为 频率 域 算法 存在 几个 缺点 ， 所以 我们 常常 将 同态滤波 放到 空间 域 上面 来 做 。 空域 算法 可以 克服 频域 算法 占用 空间 大 的 缺点 ， 并且 也 不必 等到 整幅 图象处理 完便 可以 得到 局部 结果 。 同态滤波 的 空域 算法 的 大致 思想 是 先 对 图象 做 低 通滤波 ， 再用 原 图象 减去 低 通滤波 后 的 图象 ， 得到 的 结果 即 可以 基本 反映 出 压制 低频 而 增强 高频 的 效果 。 下面 我们 将 详细 介绍 一下 空域 算法 的 具体步骤 。 　 　 首先 我们 把 图象 的 灰度 函数 fxy 用下式 来 表示 ： fxyi ． ixy ． rxy 其中 ixy 是 入射光 分量 ， rxy 是 反射光 分量 ， 另外 请 注意 ， 我们 在 这里 还 乘 了 一个 分量 i ， 它 是 一个 为 常量 的 入射光 分量 ， 之所以 要 乘 上 这个 入射光 常量 i ， 是因为 我们 想要 在 最后 处理 得到 的 图象 中 保留 一定 的 低频 分量 ， 以便 能 得到 比较 好 的 显示 效果 。 如果 不乘 上 这个 入射光 常量 i ， 那 我们 在 用 原 图象 减去 低 通滤波 的 图象 后 ， 将 失去 绝大部分 低频 信息 ， 这样 得到 的 结果 类似 于 仅 对 原图 作高 通滤波 ， 而 并非 我们 期望 的 压制 低频 而 增强 高频 ， 所以 这里 的 i 分量 是 必需 的 。 　 　 接下来 仍然 利用 取 对数 的 办法 将 入射光 和 反射光 分量 分离 ： gxylnfxylnilnixylnrxy 　 　 因为 入射光 分量 对应 图象 的 低频 部分 ， 而 反射光 分量 对应 图象 的 高频 部分 ， 于是 当 我们 对 gxy 进行 低 通滤波 后 ， 就 能 近似 地 将 入射光 分量 即 图象 的 低频 部分 分离出来 ， 见 下式 ： gxyLPFgxy ≈ lnilnixy 　 　 得到 低 通滤波 的 图象 后 ， 我们 便 很 容易 得到 高频 增强 的 图象 sxy ： sxygxygxylni ≈ lnilnrxy 　 　 最后 ， 因为 开始 利用 取 对数 将 入射光 和 反射光 分量 分离 ， 所以 还要 对 结果 sxy 取 反对 数 ， 才能 得到 最终 的 正确 结果 ： sxyexpsxy ≈ i ． rxy 　 　 同态滤波 的 空域 算法 中 ， 影响 处理 效果 的 步骤 是 低通滤波器 的 选择 以及 入射光 常量 i 的 指定 ， 影响 速度 的 关键 在 低 通滤波 一步 。 空域 同态滤波 算法 要 解决 的 主要 问题 就是 滤波 的 速度 问题 ， 下面 我们 详细 介绍 一下 低 通滤波 的 过程 。 　 　 在 本文 中 采用 了 两种 方法 来 实现 低 通滤波 ： 一种 是 利用 邻域 平均法 来 近似 地 实现 低 通滤波 ； 另 一种 是 利用 高斯 函数 来 实现 低 通滤波 。 我们 下面 将 分别 对 它们 作 介绍 。 用 邻域 平均法 近似 地 实现 低 通滤波 　 　 用 邻域 平均法 来 近似 地 实现 低 通滤波 是 比较简单 的 办法 ， 见 下式 ： 　 　 邻域 平均 虽然 简单 ， 但是 要 得到 比较 好 的 效果 的话 ， 邻域 一定 要 取得 比较 大 ， 否则 在 减去 低通 图象 后 会 损失 很多 低频 信息 ， 即使 是 乘 上 了 入射光 常量 i 也 无法弥补 。 但是 同时 我们 知道 ， 邻域 平均 滤波 的 时间 复杂度 与 所定 邻域 的 大小 是 成正比 的 ， 所以 ， 一旦 邻域 增大 ， 滤波 所 花费 的 时间 也 会 随之 增大 。 我们 所要 做 的 就是 在 大 邻域 的 情况 下 ， 怎样 减少 计算 量 ， 提高 滤波 的 速度 。 　 　 借鉴 TSHuang 在 中值 滤波 中 采用 的 滑窗 思想 。 每 计算 一个 象素 点 周围 邻域 的 均值 时 ， 不必 都 作 一次 累加 和 ， 否则 当 邻域 很大 时 ， 计算 每个 象素 点 均值 滤波 后 的 值 都 将 花费 很 长时间 。 我们 利用 滑动 窗口 的 思想 会 减少 很多 计算 量 ， 只 需 计算 左上角 第一个 窗口 的 灰度 值 累加 和 。 至于 其它 象素 邻域 窗口 的 累加 和 ， 只要 移动 第一个 窗口 并 修改 其 累加 和 即 可以 得到 ， 我们 先 用 一维 的 例子 大体 说明 一 下滑 窗 的 思想 ， 见 下式 ： 　 　 至于 二维 的 图象 ， 首先 假设 图象 大小 为 NM ， 滤波 窗口 大小 为 KK 假设 K 为 奇数 ， 定义 列 和 Colxy 是 在 点 xy 处 ， 以 y 为 中心 的 一列 K 个 象素 的 和 ， 窗口 和 Winxy 是 以点 xy 为 中心 的 KK 窗口 内 的 象素 之 和 ， 有 如下 关系 ： 　 　 当 窗口 向 右 滑动 一个 象素 时 ， 按 下面 式 更新 窗口 和 Winxy ： 　 　 　 　 　 　 　 当 窗口 向下 滑动 一个 象素 时 ， 按 下面 式 更新 列 和 Colxy ： 　 　 　 　 　 　 　 具体 的 步骤 如下 ： 　 　 y 计算 x ， ， ， N 时 的 列 和 Colx ； 　 　 计算 左上角 第一个 窗口 的 窗口 和 Win ， 得到 点 的 滤波 输出 ； 　 　 按照 式 计算 当 xN 时 的 窗口 和 Winx 并 得到 第一行 象素 的 滤波 输出 　 　 yy ； 判断 y 值 是否 等于 M ， 若 等于 则 跳 到 ， 否则 执行 　 　 按照 式 计算 当 xN 时 的 列 和 Colxy 　 　 计算 Winy 的 值 ， 并且 按照 式 计算 当 x ， ， N 时 的 窗口 和 Winxy 并 得到 第 y 行 象素 的 滤波 输出 ， 然后 转 到 执行 　 　 整幅 图象 滤波 结束 。 　 　 利用 上面 的 滑窗 算法 来 实现 二维 均值 滤波 时 ， 可以 大大 地 提高 计算速度 ， 并 使 算法 的 时间 复杂度 与 窗口 或 邻域 的 大小 无关 。 在 传统 的 二维 均值 滤波 算法 中 ， 计算 每个 象素 点 的 滤波 输出 的 运算量 为次 乘法 和 KK 次 加法 ； 而 在 改进 的 滑窗 算法 中 ， 在 不计 边界 处理 的 条件 下 ， 每个 象素 点 的 滤波 输出 的 运算量 为次 乘法 和 次 加法 。 　 用 高斯 函数 实现 低 通滤波 　 　 利用 高斯 函数 来 实现 低 通滤波 也 可以 得到 比较 好 的 效果 ， 高斯 函数 的 形式 如下 ： 其中 A 和 σ 是 常数 ， 由 自己 指定 的 ， 它们 的 值 将 影响 到 滤波 的 效果 。 在 本文 中 ， 将 A 的 值 暂定为 ， 而 σ 的 值 暂定为 。 另外 影响 滤波 效果 的 还有 可变 的 高斯 滤波 窗 的 大小 。 为 便于 计算 ， 假设 高斯 滤波 窗 的 大小 为 nn 假设 n 为 奇数 ， 则 用 高斯 函数 Gxy 对 图象 fxy 进行 低 通滤波 相当于 拿 nn 的 高斯 模板 Gxy 与 图象 fxy 作 卷积 ， 滤波 输出 为 gxy ， 见 下式 ： 　 　 这样 计算 一个 象素 点 的 滤波 输出 将 需要 有 nn 次 乘法 和 nn 次 加法 ， 当 滤波 窗 增大 时 ， 时间 复杂度 将 迅速 增大 ， 于是 我们 需要 对 其 进行 改进 ， 以 提高 高斯 低 通滤波 的 效率 。 我们 注意 到 ， 高斯 滤波 窗是 一种 特殊 的 滤波 窗 ， 它 具有 很强 的 空间 对称性 ， 即 中心 旋转 对称 ， 这 使得 滤波 的 结果 与 图象 的 方向 无关 ， 并且 因此 二维 的 高斯 函数 可分解 为 x 和 y 方向 的 两个 一维 函数 的 乘积 ， 见 下式 ： 　 　 这样 用 nn 的 高斯 模板 Gxy 与 图象 fxy 作 卷积 的 式子 可以 写成 ： 　 　 这样一来 高斯 模板 与 图象 的 二维 卷积 便 分解 为行 和 列 方向 的 两次 一维 卷积 计算 ， 这时 每 计算 一个 象素 点 的 滤波 输出 只 需要 有 n 次 乘法 和 n 次 加法 ， 计算 量 明显 减少 ， 计算 效率 也 随之 提高 。 对于 用 方向 对称 模板 作 线性 滤波 的 情况 ， 这种 模板 分解 方法 都 能 有效 地 提高 其 计算 效率 。 　 实验 及 结果 　 　 本文 的 实验 环境 是 Pentium 的 微机 ， 编程语言 是 VC ， 实验 对象 是 的 黑白图象 。 本文 共用 了 六种 算法 来 实现 同态滤波 ， 其中 在 频域 算法 中 ， 分别 采用 了 ButterWorth 和 指数 两种 滤波器 来 作 同态滤波 器 。 在 空域 算法 中 ， 先 分别 采用 传统 的 邻域 平均 和 高斯 滤波 窗作 低 通滤波 来 实现 空域 的 同态滤波 。 接下来 又 利用 滑窗 思想 和 模板 分解 思想 分别 对 空域 的 两种 算法 做 了 改进 。 两种 改进 算法 均 比 原来 的 传统 算法 的 效率 要 高 一些 。 　 　 下面 的 表格 列出 的 是 频域 同态滤波 的 两种 算法 的 执行 时间 情况 。 请 注意 ， 用 频域 算法 实现 时 ， 花费 的 时间 与 滤波 模板 的 大小 无关 。 表格 列出 的 是 对 在 不同 大小 滤波 模板 的 情况 下 ， 用 空域 同态滤波 的 四种 算法 来 实现 时所 花费 的 时间 情况 。 表 频域 同态滤波 的 两种 算法 频域 算法 执行 时间 秒 ButterWorth 滤波器 指数 滤波器 表 空域 同态滤波 的 四种 算法 滤波 模板 大小 执行 时间 秒 传统 的 邻域 平均 改进 的 邻域 平均 传统 的 高斯 滤波 窗 改进 的 高斯 滤波 窗 　 　 图和图 是 两幅 照明 不均 的 图象 ， 图和图 是 经过 同态滤波 处理 后 的 图象 。 这里 采用 的 是 空域 同态滤波 算法 ， 并且 用 改进 的 高斯 滤波 窗 算法 来 实现 其中 的 低 通滤波 ， 滤波 窗 大小 分别 选 为 × 和 × ， 滤波 前 乘 上 的 入射光 常量 i 选为 。 　 　 　 　 图 　 原 图象 　 　 　 图 　 修正 后 图象 　 　 　 　 图 　 原 图象 　 　 　 　 　 　 　 图 　 修正 后 图象 　 结论 　 　 由 以上 的 分析 和 实验 可以 得知 ， 用 频域 算法 进行 同态滤波 存在 占用 存储空间 大 ， 无法 得到 局部 效果 ， 运算 时间 较长 三个 缺点 ， 所以 现在 的 常见 做法 是 在 空间 域 上 进行 同态滤波 ， 空域 同态滤波 能克服 频域 同态滤波 的 前 两个 缺点 ， 但 其 用来 实现 低 通滤波 的 传统 算法 的 效率 也 比较 低 ， 于是 我们 采用 滑窗 思想 来 改进 传统 的 邻域 平均 算法 ， 同时 利用 模板 分解 思想 来 改进 传统 的 高斯 滤波 窗 算法 ， 两个 改进 算法 都 比 原来 的 传统 算法 的 效率 有 较大 提高 。 　 　 根据 上面 的 实验 数据 可以 看出 ， 在 滤波 模板 比较 小 的 时候 ， 两种 传统 的 空域 同态滤波 比 频域 同态滤波 速度 要 快 一些 ， 随着 滤波 模板 的 增大 ， 传统 空域 同态滤波 花费 的 时间 的 增长速度 也 越来越 大 。 而 同时 我们 看到 ， 两种 空域 同态滤波 的 改进 算法 的 效率 却 有 显著 提高 ， 利用 滑窗 思想 对 邻域 平均 作 的 改进 算法 的 时间 复杂度 不随 滤波 模板 的 增大 而 增大 ， 它 与 滤波 模板 的 大小 无关 ； 利用 模板 分解 思想 对 高斯 滤波 作 的 改进 算法 的 速度 也 较 原 算法 有 较大 提高 。 　 　 滑窗 思想 可 在 均值 滤波 和 中值 滤波 中 得到 应用 ， 而 模板 分解 思想 则 可以 在 用 方向 对称 模板 进行 线性 滤波 时 得到 普遍 应用 。 闻莎 四川大学 计算机 学院 图象 图形 研究所 成都 游志胜 四川大学 计算机 学院 图象 图形 研究所 成都 参考文献 赵荣 椿 等 编著 数字 图象处理 导论 西安 ： 西北工业大学 出版社 年 游志胜 杨红雨 张磊 等 大 模板 线性 滤波 的 空域 快速 计算 四川大学 图象 所张 远鹏 董海 周文灵 编著 计算机 图象处理 技术 基础 北京 ： 北京大学出版社 BlairMackiewichIntracranialBoundaryDetectionandRadioFrequencyCorrectioninMagneticResonanceImage 收稿 日期 ： 年月日