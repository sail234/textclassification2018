计算机 应用 COMPUTERAPPLICATIONS 年 第卷 第期 VolNoWindows 下 串行 通信 编程技术 及其 实现 郭 峰林 　 朱才 连 　 　 摘 　 要 　 本文 首先 简单 讨论 MSDOS 、 位 Windows 和 Windows 下 的 通信 编程 差别 ， 然后 着重 讲述 位 Windows 环境 下 的 通信 编程技术 ， 最后 给出 利用 该 技术 实现 串行 通信 的 实例 。 　 　 关键词 　 API 函数 ， 串行 通信 ， 中断 ， 查询 ， 线程 ， 同步 ， 异步 ， 阻塞 TECHNIQUEOFSERIALCOMMUNICATIONPROGRAMMINGANDITSREALIZATIONINWINDOWSGuoFenglin 　 ZhuCailianInstituteofGeodesyGeophysicsChineseAcademyofSciencesHubeiWuhan 　 　 Abstract 　 ThispaperdiscussesthedifferenceofcommunicationprogrammingintheoperatingsystemofMSDOSbitWindowsandWindowsThentellsofsomeproblemsaboutserialcommunicationprogrammingtechniqueinbitOSofwindowsFinallyanexampleoftheapplicationofthistechniqueinwindowsisprovided 　 　 Keywords 　 APIfunctionSerialcommunicationInterruptPollThreadSynchronizationAsynchronization 　 前言 　 　 Windows 以其 形象 的 图形界面 设计 、 操作 简单 、 功能强大 、 可靠性 高等 优点 ， 赢得 了 越来越 多 的 用户 ， 开发 Windows 应用程序 已经 成为 当今 的 主流 。 在 诸多 的 应用 开发 中 ， 与 外部 硬件 设备 通信 是 常见 的 应用 ， 而 串行 通信 以 其 简单 的 硬件 连接 方式 常常 成为 应用 开发者 的 首选 。 然而 串行 通信 编程 从 MSDOS 、 Windows 到 Windows 各不相同 ， 虽然 在 功能 上 越来越 强 ， 但是 编程 的 复杂度 也 相应 增大 。 　 　 笔者 最近 在 Windows 环境 下 开发 一套 “ 公安 智能 报警 系统 ” ， 该 系统 需要 对 报警 电话 进行 实时 监控 ， 以便 能 实时 地 进行 接警 和 处警 。 报警 电话 的 监控 是 通过 检测 从 电话 交换机 中 馈送 的 RS 标准 的 串行 通信 信号 ， 其中 串行口 通信 采用 线 方式 。 该 系统 采用 Windows 下 的 VisualC 编写 ， 由于 有关 Windows 的 串行口 通信 编程 方面 的 资料 少 ， 串行 通信 编程 的 实例 也 不多见 ， 笔者 在 成功 开发 “ 公安 智能 报警 系统 ” 的 基础 上 ， 取得 了 一些 经验 ， 现在 将 有关 串行口 通信 方面 的 一些 关键技术 写 出来 ， 供 广大 的 编程 者 借鉴 、 参考 。 　 下 串行 通信 编程 特征 　 　 MSDOS 下 的 串行 通信 编程 较 简单 ， 通信 编程 可以 直接 对 串口 的 物理地址 进行 编程 操作 同时 配合 BIOS 调用 ， 即可 实现 串行口 数据 读写 。 　 　 在 Windows 下 ， 串行口 作为 系统资源 ， 由 设备 驱动程序 统一 管理 ， 用户 不能 象 在 MSDOS 下 一样 直接 对 串行口 硬件 端口 进行 编程 。 位 的 Windows 操作系统 提供 了 专门 的 串行 通信 的 API 函数 ： OpenComm 、 CloseComm 、 ReadComm 、 WriteComm 等 ， 通过 这些 专用 API （ ApplicationProgrammingInterfaces ） 函数 来 设置 和 读 、 写 串行口 。 而 Windows 将 串行口 和 其它 通信 设备 如 Modern 、 传真机 等 统一 视作 文件 ， 对 串行口 的 打开 、 关闭 、 读写 等 操作 与 操作 普通 文件 的 API 函数 相同 ， 如 CreateFile 、 CloseHandel 、 ReadFile 、 WriteFile ， 正是 由于 这些 函数 的 “ 多态性 ” ， 同时 还 由于 需要 结合 Windows 的 线程 编程 、 事件驱动 等 新 技术 ， 因而 使得 Windows 下 的 串行口 通信 编程 比较复杂 。 　 Windows 下 串行 通信 API 函数 　 　 在 Windows 中将 串行口 与 文件 的 统一 了 起来 ， 对 它们 的 打开 、 读 、 写 、 关闭 等 操作 都 使用 相同 的 API 函数 ， 但是 它们 之间 又 有 差别 ， 譬如 串行口 不能 象 文件 一样 可以 被 删除 ， 这些 差别 体现 在 API 函数 中 部分 参数 的 设置 上 。 　 　 弄清 串行 通信 API 函数 的 用法 是 掌握 串行 通信 编程技术 的 关键 。 下面 介绍 几个 与 串行 通信 编程 密切相关 的 API 函数 ， 着重 说明 这些 API 函数 在 进行 串行 通信 时 参数设置 需要 注意 的 地方 。 其它 没有 提及 的 函数 及 参数 可以 参考 WindowsAPI 函数 手册 。 　 打开 串行口 API 函数 　 　 Windows 通信 会话 以 调用 CreateFile 函数 打开 串行口 开始 。 调用 CreateFile 打开 串口 成功 ， 返回 一个 操作 句柄 。 该 句柄 供 随后 对 串行口 的 设置 、 读写 等 操作 用 。 　 　 CreateFile 函数 原型 　 HANDLECreateFileLPCTSTRszDeviceDWORDdwAccessDWORDdwShareModeLPSECURITY — ATTRIBUTESlpSADWORDdwCreateDWORDdwFlagsAndAttributesHANDLEhTemplateFile 　 　 调用 此 函数 要 注意 这 几个 参数 的 设置 ： dwShareMode 指定 该 端口 的 共享 属性 。 该 参数 是 为 文件共享 提供 的 ， 串行口 不能 作为 共享 设备 。 故 参数值 必须 为 ， 这是 文件 与 通信 设备 之间 的 主要 差异 之一 ； dwCreate 必须 为 OPEN — EXISTING 。 因为 CreateFile 只能 打开 存在 的 端口 ， 而 不能 象 创建 新 文件 一样 创建 物理 上 不 存在 的 新 串口 ； dwFlagsAndAttributes 描述 了 该 端口 的 各种 属性 。 对于 文件 来说 ， 具有 多种 属性 （ 只读 、 隐藏 、 系统 ） 是 可能 的 ， 但是 对于 串行口 ， 唯一 有 意义 的 设置 是 FILE — FLAG — OVERLAPPED ； 参数 hTemplateFile 必须 为 NULL 。 　 　 返回值 ： 若 成功 ， 返回 创建 的 句柄 ； 否则 返回 ， INVALID — HANDLE — VALUE 　 　 举例 ： 打开 串行口 　 HANDLEhComm 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 定义 句柄 变量 　 hCommCreateFileCOM 　 GENERIC — READGENERIC — WRITENULLNULL 　 OPEN — EXISTINGFILE — FLAG — OVERLAPPEDNULL 　 ifhCommINVALID — HANDLE — VALUE … … 　 打开 串口 错误 的 处理 　 配置 串行口 API 函数 　 　 串行口 打开 成功 ， 接下来 可以 配置 串行口 通信 参数 如 波特率 、 数据 位数 、 停止 位 、 校验位 等 。 修改 这些 参数 时要 和 设备 控制 块 DCBDeviceControlBlock 打交道 ， DCB 有 近个 数据 成员 ， 是 一个 很 复杂 的 数据结构 ， 全部 弄清楚 它们 的 含义 相当 费时 。 而 对于 采用 线 方式 的 串行 通信 来说 ， DCB 结构 中 绝大多数 参数 可以 不予考虑 ， 因为 只要 设置 好 波特率 、 数据位 、 停止 位 、 校验位 等 几个 关键 参数 就行 。 这里 介绍 一种 简捷 的 方法 可以 做到 不 了解 DCB 的 详细 内容 也 可以 设置 好 串行 通信 参数 。 　 　 通过 下面 的 程序 来 说明 串行 通信 参数 的 设置 方法 。 例程 中 利用 BuildCommDCB 函数 来 设置 DCB ， 然后 用 函数 SetCommState 配置 串行 通信 口 。 DCBdcb 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 定义 设备 控制 块 GetCommStatehCommdcb 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 取出 系统 缺省 设备 控制 块 BuildCommDCBCOMNdcb 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 设置 DCB 主要参数 SetCommStatehCommdcb 　 超时 设置 API 函数 　 　 编写 通信 应用程序 的 一个 很 关键 的 问题 就是 如何 处理 通信 中 的 不可 预测 的 事件 。 譬如 接收数据 过程 中 突然 被 中断 ， 或者 发送数据 突然 停止 等等 。 如果 不 认真对待 ， 这些 情况 可能 会 引起 IO 线程 挂 起 或者 线程 被 无限 阻塞 。 Windows 对于 这 类 问题 提供 了 安全措施 ， 它 让 你 通过 超时 设置 来 决定 通信 是否 异常 并作 相应 处理 。 因此 超时 设置 在 串行 通信 中 显得 尤为重要 。 　 　 超时 设置 过程 分为 两步 ， 首先 设置 COMMTIMEOUTS 结构 中 的 五个 变量 ， 然后 调用 SetCommTimeouts 函数 设置 超 时值 。 COMMTIMEOUTS 结构 的 定义 如下 ： 　 typedefstruct — 　 COMMTIMEOUTSDWORDReadIntervalTimeout 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 读 端口 间隔 超时 DWORDReadTotalTimeoutMultiplier 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 读 端口 总 超时 乘数 DWORDReadTotalTimeoutConstant 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 读 端口 总 超时 常数 msDWORDWriteTotalTimeoutMultiplier 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 写 端口 总 超时 乘数 DWORDWriteTotalTimeoutConstant 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 写 端口 总 超时 常数 msCOMMTIMEOUTSLPCOMMTIMEOUTS 　 读 串口 API 函数 　 　 串行口 打开 后 ， 可以 对 它 进行 读写操作 。 读 串行口 的 函数 原型 ： 　 BOOLReadFileHANDLEhFileLPVOIDlpBufferDWORDnNumberOfBytesToReadLPDWORDlpNumberOfBytesReadLPOVERLAPPEDlpOverlappeddata 　 　 其中 第一个 参数 hFile 是 由 CreateFile 返回 的 句柄 。 参数 lpBuffer 是 读取 的 数据 缓冲区 指针 ， 要 注意 给 该 数据 缓冲区 分配 足够 的 空间 ； 参数 nNumberOfBytesToRead 是 要 读取 的 字节数 ； 参数 lpNumberOfBytesRead 是 实际 读取 的 字节数 ； 最后 一个 参数 lpOverlapped 是 指向 一个 可 重叠 IO 异步 的 数据结构 指针 。 如果 lpOverlapped 设置 为 NULL ， 则 ReadFile 工作 在 同步 方式 ； 如果 lpOverlapped 指向 一个 重叠 结构 ， 则 工作 在 异步 方式 。 　 写 串口 API 函数 　 BOOLWriteFileHANDLEhFile 　 　 　 　 　 　 　 　 　 　 　 　 　 由 CreateFile 返回 的 句柄 　 　 　 　 　 　 　 　 　 　 　 　 　 　 LPCVOIDlpBuffer 　 　 　 　 　 　 　 　 　 　 　 　 写 缓冲区 指针 　 　 　 　 　 　 　 　 　 　 　 DWORDnNumberOfBytesToWrite 　 　 　 　 　 　 　 　 　 要 写 的 字节数 　 　 　 　 　 　 　 　 　 　 　 LPDWORDlpNumberOfBytesWritten 　 　 　 　 　 　 　 实际 写 的 字节数 　 　 　 　 　 　 　 　 　 　 　 LPOVERLAPPEDlpOverlapped 　 　 指向 一个 可 重叠 IO 的 数据结构 　 　 　 　 　 　 　 　 　 　 　 　 WriteFile 函数 的 工作 方式 选择 与 ReadFile 的 相同 在 此 不 重复 。 　 关闭 串口 API 函数 　 　 串行口 是非 共享资源 ， 某 应用程序 打开 串行口 后 ， 即 独占 该 资源 ， 使 其它 应用程序 无法 再 访问 ， 直到 该 应用程序 释放 串口 。 所以 打开 串口 后 ， 一定 要 关闭 串口 。 关闭 串口 函数 较 简单 。 函数 原型 ： BOOLCloseHandleHANDLEhObject 其中 hObject 参数 为 CreateFile 返回 的 端口 句柄 。 返回值 非 ， 则 调用 成功 。 　 Windows 的 串行 通信 工作 方式 　 　 串行 通信 会话 以 调用 CreateFile 函数 打开 串行口 开始 ， 接着 设置 串行口 波特率 、 数据位 、 校验位 、 停止 位 等 参数 以及 超时 参数 ， 最后 选择 一种 工作 方式 读 、 写 串行口 。 在 Windows 中 ， 串行 通信 有 两种 工作 方式 可 供选择 ： 查询 方式 和 事件驱动 方式 。 这 两种 工作 方式 各有 优缺点 ， 用户 可以 根据 应用程序 的 实际 需要 选择 其中 的 一种 工作 方式 ， 下面 对 这 两种 工作 方式 分别 介绍 。 　 查询 方式 　 　 对于 从 串口 读取数据 来说 ， 查询 是 最为 直接 、 易于 理解 的 技术 。 但是 查询 会 占用 大量 的 CPU 时间 ， 效率 较 低 。 利用 查询 方式 读取 串口 数据 时 通常 要 建立 一个 线程 ， 建立 线程 使用 CreateThread 函数 。 循环 查询 在线 程里 进行 。 举例 ： （ 假设 端口 已经 打开 　 DWORDReadThreadLPDWORDlpdwParamBYTEBuff ［ ］ 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 读数据 缓冲区 DWORDnBytesRead 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 实际 读取 的 字节数 COMMTIMEOUTSTimeouts 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 超时 设置 MemsetTimeoutssizeofCOMMTIMEOUTSTimeoutsReadIntervalTimeoutMAXDWORDSetCommTimeoutshCommTimeoutsWhilebReadingifReadFilehCommBuffnBytesReadNULL … … … 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 读取数据 出错 处理 else … … … 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 正确 读取数据 的 处理 PurgeCommhCommPURGE — RXCLEARreturn 　 　 例程 中 ， 线程 的 退出 由 bReading 标志 控制 ， 当 bReading 为 TRUE 时 ， 循环 串口 ； 当 breading 为 FALSE 时 ， 线程 退出 。 　 事件驱动 方式 　 　 事件驱动 IO 方式 是 指 线程 通过 监视 通信 资源 中 的 一组 事件 来 进行 IO 操作 ， 这种 方式 类似 于 MSDOS 下 的 中断 工作 方式 ， 效率高 。 可 被 监视 的 事件 列表 如下 ： 事件 掩码 含义 EV — BREAK 检测 到 输入 终止 EV — CTSCTS 清除 发送 信号 改变 状态 EV — DSRDSR 数据 设置 就绪 信号 改变 状态 EV — ERR 发生 了 线路 状态 错误 EV — RING 检测 到 振铃 EV — RLSDRLSD 信号 改变 状态 EV — RXCHAR 收到 任何 字符 并 放进 输入 缓冲区 EV — RXFLAG 收到 事件 字符 ， 并 放进 输入 缓冲区 EV — TXEMPTY 输出 缓冲区 中 最后 一个 字符 发送 出去 　 　 实际 编程 中 ， 对 串行口 的 读 、 写 操作 需要 建立 两个 工作者 线程 。 在读 或 写 线程 中 可以 通过 SetCommMask 函数 设置 事件 屏蔽 来 监视 指定 通信 资源 上 的 事件 。 指定 一组 事件 后 ， 线程 可以 使用 WaitCommEvent 函数 等待 其中 一个 事件 发生 ， 在 等待 过程 中 它 将 花费 极少 的 CPU 时间 。 注意 ： WaitCommEvent 函数 和 读写操作 函数 一样 可以 同步 使用 ， 也 可以 异步 使用 ， 这 主要 取决于 在 第三个 参数 中 是否 指定 OVERLAPPED 结构 。 如果 指定 为 NULL ， 该 函数 就是 同步 的 ， 必须 等到 SetCommMask 中 指定 的 事件 有 一个 发生 时 它 才 返回 ； 如果 指定 了 一个 OVERLAPPED 结构 ， 该 函数 即 工作 在 异步 方式 。 通常 将 该 函数 工作 在 同步 方式 。 　 　 下面 的 例程 演示 了 利用 事件驱动 IO 方式 从 串行口 读取数据 。 DWORDReadThreadLPDWORDlpdwParamBYTEBuff ［ ］ 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 读数据 缓冲区 DWORDnBytesReaddwEventdwErrorCOMMTIMEOUTSTimeouts 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 超时 设置 MemsetTimeoutssizeofCOMMTIMEOUTSTimeoutsReadTotalTimeoutMultiplierTimeoutsReadTotalTimeoutConstantSetCommTimeoutshCommTimeoutsSetCommMaskhCommEV — RXCHAR 　 　 　 　 设置 EV — RXCHAR 掩码 ， 当 任何 字符 到达 时 产生 事件 WhilebReadingifWaitCommEventhCommdwEventNULL 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 接收缓冲区 有 字符 到达 ifdwEventEV — RXCHAR 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 确认 是 EV — RXCHAR 事件 ifReadFilehCommBuffnBytesReadNULL … … 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 处理 读 错误 else … … 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 正确 接收 字符 处理 else … … 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 　 非 EV — RXCHAR 事件 的 处理 PurgeCommhCommPURGE — RXCLEARreturn 　 　 在 上面 的 例程 中 ， 设置 EV — RXCHAR 事件 掩码 ， 则 告诉 Windows 无论 何时 接收 到 一个 字节 ， 就 产生 一个 事件 。 在 WaitCommEvent 返回 后 ， 比较 该 函数 返回 的 事件 掩码 ， 如果 是 EV — RXCHAR ， 则 说明 接收缓冲区 中 至少 有 一个 字符 处于 等待 状态 ； 否则 ， 就是 错误 事件 ， 需要 进行 错误处理 。 　 效果 　 　 作者 在 开发 的 “ 公安 智能 报警 系统 ” 时 利用 事件驱动 方式 的 串行 通信 编程技术 处理 多种 系统 设备 间 频繁 的 数据交换 任务 ， 应用 非常 成功 。 系统 可 实时 地 监控 从 市话网 上 不断 传来 的 报警 电话 。 作者简介 ： 郭 峰林 　 硕士 研究生 。 朱才 连 　 博士生 导师 ， 研究员 。 作者 单位 ： 中国科学院 测量 与 地球物理 研究所 　 湖北 武昌 ） 参考文献 ［ ］ 　 MicrosoftCorporation 著 Win 程序员 参考 大全 二欣 　 力等译 北京 ： 清华大学出版社 ， ， ［ ］ 　 MicrosoftCorporationMicrosoftDeveloperNetwork ［ ］ 　 PeterWGofton 著 精通 串行 通信 王仲文 等 译 北京 ： 电子 工业 出版社 ， ［ ］ 　 CharlesAMirhoAndreTerrisse 著 Windows 通信 编程 贺 　 军等译 北京 ： 清华大学出版社 ， ， ［ ］ 　 ScottStanfieldRalphArvesen 著 VisualC 开发人员 指南 北京 ： 机械 工业 出版社 ， 收稿 日期 修改稿